ne.util.defineNamespace("fedoc.content", {});
fedoc.content["factories_themeFactory.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Theme factory play role register theme.\n *                Also, you can get theme from this factory.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    defaultTheme = require('../themes/defaultTheme');\n\nvar themes = {};\n\nmodule.exports = {\n    /**\n     * Get theme.\n     * @param {string} themeName theme name\n     * @returns {object} theme object\n     */\n    get: function(themeName) {\n        var theme = themes[themeName];\n\n        if (!theme) {\n            throw new Error('Not exist ' + themeName + ' theme.');\n        }\n\n        return theme;\n    },\n\n    /**\n     * Theme register.\n     * @param {string} themeName theme name\n     * @param {object} theme theme\n     */\n    register: function(themeName, theme) {\n        var targetItems;\n        theme = JSON.parse(JSON.stringify(theme));\n\n        if (themeName !== chartConst.DEFAULT_THEME_NAME) {\n            theme = this._initTheme(theme);\n        }\n\n        targetItems = this._getInheritTargetThemeItems(theme);\n\n        this._inheritThemeFont(theme, targetItems);\n        this._copyColorInfo(theme);\n        themes[themeName] = theme;\n    },\n\n    /**\n     * Init theme.\n     * @param {object} theme theme\n     * @returns {object} theme\n     * @private\n     * @ignore\n     */\n    _initTheme: function(theme) {\n        var cloneTheme = JSON.parse(JSON.stringify(defaultTheme)),\n            newTheme;\n\n        this._concatDefaultColors(theme, cloneTheme.series.colors)\n        newTheme = this._overwriteTheme(theme, cloneTheme);\n\n        newTheme = this._copyProperty({\n            propName: 'yAxis',\n            fromTheme: theme,\n            toTheme: newTheme,\n            rejectionProps: chartConst.YAXIS_PROPS\n        });\n\n        newTheme = this._copyProperty({\n            propName: 'series',\n            fromTheme: theme,\n            toTheme: newTheme,\n            rejectionProps: chartConst.SERIES_PROPS\n        });\n\n        return newTheme;\n    },\n\n    /**\n     * Filter chart types.\n     * @param {object} target target charts\n     * @param {array.&lt;string>} rejectionProps reject property\n     * @returns {Object} filtered charts.\n     * @private\n     */\n    _filterChartTypes: function(target, rejectionProps) {\n        var result;\n        if (!target) {\n            return [];\n        }\n\n        result = tui.util.filter(target, function(item, name) {\n            return tui.util.inArray(name, rejectionProps) === -1;\n        });\n        return result;\n    },\n\n    /**\n     * Concat colors.\n     * @param {object} theme theme\n     * @param {array.&lt;string>} seriesColors series colors\n     * @private\n     */\n    _concatColors: function(theme, seriesColors) {\n        if (theme.colors) {\n            theme.colors = theme.colors.concat(seriesColors);\n        }\n\n        if (theme.singleColors) {\n            theme.singleColors = theme.singleColors.concat(seriesColors);\n        }\n    },\n\n    /**\n     * Concat default colors.\n     * @param {object} theme theme\n     * @param {array.&lt;string>} seriesColors series colors\n     * @private\n     */\n    _concatDefaultColors: function(theme, seriesColors) {\n        var chartTypes;\n\n        if (!theme.series) {\n            return;\n        }\n\n        chartTypes = this._filterChartTypes(theme.series, chartConst.SERIES_PROPS);\n\n        if (!tui.util.keys(chartTypes).length) {\n            this._concatColors(theme.series, seriesColors);\n        } else {\n            tui.util.forEach(chartTypes, function(item) {\n                this._concatColors(item, seriesColors);\n            }, this);\n        }\n    },\n\n    /**\n     * Overwrite theme\n     * @param {object} from from theme property\n     * @param {object} to to theme property\n     * @returns {object} result property\n     * @private\n     */\n    _overwriteTheme: function(from, to) {\n        tui.util.forEach(to, function(item, key) {\n            var fromItem = from[key];\n            if (!fromItem) {\n                return;\n            }\n\n            if (tui.util.isArray(fromItem)) {\n                to[key] = fromItem.slice();\n            } else if (tui.util.isObject(fromItem)) {\n                this._overwriteTheme(fromItem, item);\n            } else {\n                to[key] = fromItem;\n            }\n        }, this);\n\n        return to;\n    },\n\n    /**\n     * Copy property.\n     * @param {object} params parameters\n     *      @param {string} params.propName property name\n     *      @param {object} params.fromTheme from property\n     *      @param {object} params.toTheme tp property\n     *      @param {array.&lt;string>} params.rejectionProps reject property name\n     * @returns {object} copied property\n     * @private\n     */\n    _copyProperty: function(params) {\n        var chartTypes;\n\n        if (!params.toTheme[params.propName]) {\n            return params.toTheme;\n        }\n\n        chartTypes = this._filterChartTypes(params.fromTheme[params.propName], params.rejectionProps);\n        if (tui.util.keys(chartTypes).length) {\n            tui.util.forEach(chartTypes, function(item, key) {\n                var cloneTheme = JSON.parse(JSON.stringify(defaultTheme[params.propName]));\n                params.fromTheme[params.propName][key] = this._overwriteTheme(item, cloneTheme);\n            }, this);\n\n            params.toTheme[params.propName] = params.fromTheme[params.propName];\n        }\n\n        return params.toTheme;\n    },\n\n    /**\n     * Copy color info to legend\n     * @param {object} seriesTheme series theme\n     * @param {object} legendTheme legend theme\n     * @param {array.&lt;string>} colors colors\n     * @private\n     */\n    _copyColorInfoToOther: function(seriesTheme, legendTheme, colors) {\n        legendTheme.colors = colors || seriesTheme.colors;\n        if (seriesTheme.singleColors) {\n            legendTheme.singleColors = seriesTheme.singleColors;\n        }\n        if (seriesTheme.borderColor) {\n            legendTheme.borderColor = seriesTheme.borderColor;\n        }\n        if (seriesTheme.selectionColor) {\n            legendTheme.selectionColor = seriesTheme.selectionColor;\n        }\n    },\n\n    /**\n     * Get target items about font inherit.\n     * @param {object} theme theme\n     * @returns {array.&lt;object>} target items\n     * @private\n     */\n    _getInheritTargetThemeItems: function(theme) {\n        var items = [\n                theme.title,\n                theme.xAxis.title,\n                theme.xAxis.label,\n                theme.legend.label\n            ],\n            yAxisChartTypeThems = this._filterChartTypes(theme.yAxis, chartConst.YAXIS_PROPS),\n            seriesChartTypeThemes = this._filterChartTypes(theme.series, chartConst.SERIES_PROPS);\n\n        if (!tui.util.keys(yAxisChartTypeThems).length) {\n            items.push(theme.yAxis.title);\n            items.push(theme.yAxis.label);\n        } else {\n            tui.util.forEach(yAxisChartTypeThems, function(chatTypeTheme) {\n                items.push(chatTypeTheme.title);\n                items.push(chatTypeTheme.label);\n            });\n        }\n\n        if (!tui.util.keys(seriesChartTypeThemes).length) {\n            items.push(theme.series.label);\n        } else {\n            tui.util.forEach(seriesChartTypeThemes, function(chatTypeTheme) {\n                items.push(chatTypeTheme.label);\n            });\n        }\n        return items;\n    },\n\n    /**\n     * Inherit theme font.\n     * @param {object} theme theme\n     * @param {array.&lt;object>} targetItems target theme items\n     * @private\n     */\n    _inheritThemeFont: function(theme, targetItems) {\n        var baseFont = theme.chart.fontFamily;\n\n        tui.util.forEachArray(targetItems, function(item) {\n            if (!item.fontFamily) {\n                item.fontFamily = baseFont;\n            }\n        });\n    },\n\n    /**\n     * Copy color info.\n     * @param {object} theme theme\n     * @private\n     * @ignore\n     */\n    _copyColorInfo: function(theme) {\n        var seriesChartTypes = this._filterChartTypes(theme.series, chartConst.SERIES_PROPS);\n        if (!tui.util.keys(seriesChartTypes).length) {\n            this._copyColorInfoToOther(theme.series, theme.legend);\n            this._copyColorInfoToOther(theme.series, theme.tooltip);\n        } else {\n            tui.util.forEach(seriesChartTypes, function(item, chartType) {\n                theme.legend[chartType] = {};\n                theme.tooltip[chartType] = {};\n                this._copyColorInfoToOther(item, theme.legend[chartType], item.colors || theme.legend.colors);\n                this._copyColorInfoToOther(item, theme.tooltip[chartType], item.colors || theme.tooltip.colors);\n                delete theme.legend.colors;\n                delete theme.tooltip.colors;\n            }, this);\n        }\n    }\n};\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"