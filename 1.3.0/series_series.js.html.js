ne.util.defineNamespace("fedoc.content", {});
fedoc.content["series_series.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Series base component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar seriesTemplate = require('./seriesTemplate'),\n    chartConst = require('../const'),\n    predicate = require('../helpers/predicate'),\n    dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil'),\n    pluginFactory = require('../factories/pluginFactory');\n\nvar Series = tui.util.defineClass(/** @lends Series.prototype */ {\n    /**\n     * Series base component.\n     * @constructs Series\n     * @param {object} params parameters\n     *      @param {object} params.model series model\n     *      @param {object} params.options series options\n     *      @param {object} params.theme series theme\n     */\n    init: function(params) {\n        var libType;\n\n        tui.util.extend(this, params);\n        libType = params.libType || chartConst.DEFAULT_PLUGIN;\n\n        /**\n         * Graph renderer\n         * @type {object}\n         */\n        this.graphRenderer = pluginFactory.get(libType, params.chartType);\n\n        /**\n         * Series view className\n         * @type {string}\n         */\n        this.className = 'tui-chart-series-area';\n    },\n\n    /**\n     * To make series data.\n     * @returns {object} add data\n     */\n    makeSeriesData: function() {\n        return {};\n    },\n\n    /**\n     * Get seriesData\n     * @returns {object} series data\n     */\n    getSeriesData: function() {\n        return this.seriesData;\n    },\n\n    /**\n     * Render series label.\n     * @private\n     * @abstract\n     */\n    _renderSeriesLabel: function() {},\n\n    /**\n     * Set base data.\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      position: {left: number, top: number}\n     * }} bound series bound\n     * @param {object} data data for rendering\n     * @private\n     */\n    _setBaseData: function(bound, data) {\n        this.data = tui.util.extend(this.data, data);\n        this.bound = bound;\n        this.percentValues = this._makePercentValues(this.data, this.options.stacked);\n    },\n\n    /**\n     * To render series label area\n     * @param {{width: number, height: number}} dimension series dimension\n     * @param {object} seriesData series data\n     * @param {?HTMLElement} elSeriesLabelArea series label area element\n     * @returns {HTMLElement} series label area element\n     * @private\n     */\n    _renderSeriesLabelArea: function(dimension, seriesData, elSeriesLabelArea) {\n        var addDataForSeriesLabel = this._makeSeriesDataForSeriesLabel(seriesData, dimension);\n        if (!elSeriesLabelArea) {\n            elSeriesLabelArea = dom.create('div', 'tui-chart-series-label-area');\n        }\n\n        this._renderSeriesLabel(addDataForSeriesLabel, elSeriesLabelArea);\n        return elSeriesLabelArea;\n    },\n\n    /**\n     * To render series area.\n     * @param {HTMLElement} elSeriesArea series area element\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      position: {left: number, top: number}\n     * }} bound series bound\n     * @param {object} data data for rendering\n     * @param {function} funcRenderGraph function for graph rendering\n     * @private\n     */\n    _renderSeriesArea: function(elSeriesArea, bound, data, funcRenderGraph) {\n        var expandedBound, seriesData, elSeriesLabelArea;\n\n        this._setBaseData(bound, data);\n\n        expandedBound = renderUtil.expandBound(bound);\n        this.seriesData = seriesData = this.makeSeriesData(bound);\n\n        renderUtil.renderDimension(elSeriesArea, expandedBound.dimension);\n        this._renderPosition(elSeriesArea, expandedBound.position, this.chartType);\n        funcRenderGraph(expandedBound.dimension, seriesData);\n\n        elSeriesLabelArea = this._renderSeriesLabelArea(expandedBound.dimension, seriesData, this.elSeriesLabelArea);\n\n        if (!this.elSeriesLabelArea) {\n            this.elSeriesLabelArea = elSeriesLabelArea;\n            dom.append(elSeriesArea, elSeriesLabelArea);\n        }\n    },\n\n    /**\n     * To make parameters for graph rendering.\n     * @param {{width: number, height: number}} dimension dimension\n     * @param {object} seriesData series data\n     * @returns {object} parameters for graph rendering\n     * @private\n     */\n    _makeParamsForGraphRendering: function(dimension, seriesData) {\n        return tui.util.extend({\n            dimension: dimension,\n            chartType: this.chartType,\n            theme: this.theme,\n            options: this.options\n        }, seriesData);\n    },\n\n    /**\n     * To render raphael graph.\n     * @param {{width: number, height: number}} dimension dimension\n     * @param {object} seriesData series data\n     * @private\n     */\n    _renderGraph: function(dimension, seriesData) {\n        var params = this._makeParamsForGraphRendering(dimension, seriesData);\n        this.graphRenderer.render(this.elSeriesArea, params);\n    },\n\n    /**\n     * To render series component.\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      position: {left: number, top: number}\n     * }} bound series bound\n     * @param {object} data data for rendering\n     * @returns {HTMLElement} series element\n     */\n    render: function(bound, data) {\n        var el = dom.create('DIV', this.className);\n\n        this.elSeriesArea = el;\n\n        this._renderSeriesArea(el, bound, data, tui.util.bind(this._renderGraph, this));\n\n        return el;\n    },\n\n    /**\n     * To resize raphael graph.\n     * @param {{width: number, height: number}} dimension dimension\n     * @param {object} seriesData series data\n     * @private\n     */\n    _resizeGraph: function(dimension, seriesData) {\n        this.graphRenderer.resize(tui.util.extend({\n            dimension: dimension\n        }, seriesData));\n        this.showSeriesLabelArea(seriesData);\n    },\n\n    /**\n     * To resize series component.\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      position: {left: number, top: number}\n     * }} bound series bound\n     * @param {object} data data for rendering\n     */\n    resize: function(bound, data) {\n        var el = this.elSeriesArea;\n\n        this._renderSeriesArea(el, bound, data, tui.util.bind(this._resizeGraph, this));\n    },\n\n    /**\n     * To make add data for series label.\n     * @param {object} seriesData series data\n     * @param {{width: number, height: number}} dimension dimension\n     * @returns {{\n     *      container: HTMLElement,\n     *      values: array.&lt;array>,\n     *      formattedValues: array.&lt;array>,\n     *      formatFunctions: array.&lt;function>,\n     *      dimension: {width: number, height: number}\n     * }} add data for series label\n     * @private\n     */\n    _makeSeriesDataForSeriesLabel: function(seriesData, dimension) {\n        return tui.util.extend({\n            values: this.data.values,\n            formattedValues: this.data.formattedValues,\n            formatFunctions: this.data.formatFunctions,\n            dimension: dimension\n        }, seriesData);\n    },\n\n    /**\n     * Render bounds\n     * @param {HTMLElement} el series element\n     * @param {{top: number, left: number}} position series position\n     * @private\n     */\n    _renderPosition: function(el, position) {\n        var hiddenWidth = renderUtil.isOldBrowser() ? chartConst.HIDDEN_WIDTH : 0;\n        renderUtil.renderPosition(el, {\n            top: position.top - (hiddenWidth * 2),\n            left: position.left - hiddenWidth\n        });\n    },\n\n    /**\n     * To make percent value.\n     * @param {{values: array, scale: {min: number, max: number}}} data series data\n     * @param {string} stacked stacked option\n     * @returns {array.&lt;array.&lt;number>>} percent values\n     * @private\n     */\n    _makePercentValues: function(data, stacked) {\n        var result;\n        if (stacked === chartConst.STACKED_NORMAL_TYPE) {\n            result = this._makeNormalStackedPercentValues(data);\n        } else if (stacked === chartConst.STACKED_PERCENT_TYPE) {\n            result = this._makePercentStackedPercentValues(data);\n        } else {\n            result = this._makeNormalPercentValues(data);\n        }\n\n        return result;\n    },\n\n    /**\n     * To make percent values about normal stacked option.\n     * @param {{values: array, scale: {min: number, max: number}}} data series data\n     * @returns {array} percent values about normal stacked option.\n     * @private\n     */\n    _makeNormalStackedPercentValues: function(data) {\n        var min = data.scale.min,\n            max = data.scale.max,\n            distance = max - min,\n            percentValues = tui.util.map(data.values, function(values) {\n                var plusValues = tui.util.filter(values, function(value) {\n                        return value > 0;\n                    }),\n                    sum = tui.util.sum(plusValues),\n                    groupPercent = (sum - min) / distance;\n                return tui.util.map(values, function(value) {\n                    return value === 0 ? 0 : groupPercent * (value / sum);\n                });\n            });\n        return percentValues;\n    },\n\n    /**\n     * To make percent values about percent stacked option.\n     * @param {{values: array, scale: {min: number, max: number}}} data series data\n     * @returns {array} percent values about percent stacked option\n     * @private\n     */\n    _makePercentStackedPercentValues: function(data) {\n        var percentValues = tui.util.map(data.values, function(values) {\n            var plusValues = tui.util.filter(values, function(value) {\n                    return value > 0;\n                }),\n                sum = tui.util.sum(plusValues);\n            return tui.util.map(values, function(value) {\n                return value === 0 ? 0 : value / sum;\n            });\n        });\n        return percentValues;\n    },\n\n    /**\n     * To make normal percent value.\n     * @param {{values: array, scale: {min: number, max: number}}} data series data\n     * @returns {array.&lt;array.&lt;number>>} percent values\n     * @private\n     */\n    _makeNormalPercentValues: function(data) {\n        var min = data.scale.min,\n            max = data.scale.max,\n            distance = max - min,\n            isLineTypeChart = predicate.isLineTypeChart(this.chartType),\n            flag = 1,\n            subValue = 0,\n            percentValues;\n\n        if (!isLineTypeChart &amp;&amp; min &lt; 0 &amp;&amp; max &lt;= 0) {\n            flag = -1;\n            subValue = max;\n            distance = min - max;\n        } else if (isLineTypeChart || min >= 0) {\n            subValue = min;\n        }\n\n        percentValues = tui.util.map(data.values, function(values) {\n            return tui.util.map(values, function(value) {\n                return (value - subValue) * flag / distance;\n            });\n        });\n\n        return percentValues;\n    },\n\n    /**\n     * Get scale distance from zero point.\n     * @param {number} size chart size (width or height)\n     * @param {{min: number, max: number}} scale scale\n     * @returns {{toMax: number, toMin: number}} pixel distance\n     */\n    getScaleDistanceFromZeroPoint: function(size, scale) {\n        var min = scale.min,\n            max = scale.max,\n            distance = max - min,\n            toMax = 0,\n            toMin = 0;\n\n        if (min &lt; 0 &amp;&amp; max > 0) {\n            toMax = (distance + min) / distance * size;\n            toMin = (distance - max) / distance * size;\n        }\n\n        return {\n            toMax: toMax,\n            toMin: toMin\n        };\n    },\n\n    /**\n     * To make label bound.\n     * @param {number} clientX clientX\n     * @param {number} clientY clientY\n     * @returns {{left: number, top: number}} bound\n     * @private\n     */\n    _makeLabelBound: function(clientX, clientY) {\n        return {\n            left: clientX - this.bound.position.left,\n            top: clientY - this.bound.position.top\n        };\n    },\n\n    /**\n     * Find label element.\n     * @param {HTMLElement} elTarget target element\n     * @returns {HTMLElement} label element\n     * @private\n     */\n    _findLabelElement: function(elTarget) {\n        var elLabel = null;\n\n        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_SERIES_LABEL)) {\n            elLabel = elTarget;\n        } else {\n            elLabel = dom.findParentByClass(elTarget, chartConst.CLASS_NAME_SERIES_LABEL);\n        }\n\n        return elLabel;\n    },\n\n    /**\n     * To call showAnimation function of graphRenderer.\n     * @param {{groupIndex: number, index: number}} data data\n     */\n    onShowAnimation: function(data) {\n        if (!this.graphRenderer.showAnimation) {\n            return;\n        }\n        this.graphRenderer.showAnimation(data);\n    },\n\n    /**\n     * To call hideAnimation function of graphRenderer.\n     * @param {{groupIndex: number, index: number}} data data\n     */\n    onHideAnimation: function(data) {\n        if (!this.graphRenderer.hideAnimation) {\n            return;\n        }\n        this.graphRenderer.hideAnimation(data);\n    },\n\n    /**\n     * To call showGroupAnimation function of graphRenderer.\n     * @param {number} index index\n     */\n    onShowGroupAnimation: function(index) {\n        if (!this.graphRenderer.showGroupAnimation) {\n            return;\n        }\n        this.graphRenderer.showGroupAnimation(index);\n    },\n\n    /**\n     * To call hideGroupAnimation function of graphRenderer.\n     * @param {number} index index\n     */\n    onHideGroupAnimation: function(index) {\n        if (!this.graphRenderer.hideGroupAnimation) {\n            return;\n        }\n        this.graphRenderer.hideGroupAnimation(index);\n    },\n\n    /**\n     * Animate component.\n     */\n    animateComponent: function() {\n        if (this.graphRenderer.animate) {\n            this.graphRenderer.animate(tui.util.bind(this.animateShowingAboutSeriesLabelArea, this));\n        }\n    },\n\n    /**\n     * To make html about series label.\n     * @param {{left: number, top: number}} position position\n     * @param {string} value value\n     * @param {number} groupIndex group index\n     * @param {number} index index\n     * @returns {string} html string\n     */\n    makeSeriesLabelHtml: function(position, value, groupIndex, index) {\n        var cssObj = tui.util.extend(position, this.theme.label);\n        return seriesTemplate.tplSeriesLabel({\n            cssText: seriesTemplate.tplCssText(cssObj),\n            value: value,\n            groupIndex: groupIndex,\n            index: index\n        });\n    },\n\n    /**\n     * Show series label area.\n     */\n    showSeriesLabelArea: function() {\n        if (renderUtil.isOldBrowser()) {\n            this.elSeriesLabelArea.style.filter = 'alpha(opacity=' + 100 + ')';\n        } else {\n            this.elSeriesLabelArea.style.opacity = 1;\n        }\n        dom.addClass(this.elSeriesLabelArea, 'show');\n    },\n\n    /**\n     * Animate showing about series label area.\n     */\n    animateShowingAboutSeriesLabelArea: function() {\n        if ((!this.options.showLabel &amp;&amp; !this.legendAlign) || !this.elSeriesLabelArea) {\n            return;\n        }\n\n        dom.addClass(this.elSeriesLabelArea, 'show');\n\n        (new tui.component.Effects.Fade({\n            element: this.elSeriesLabelArea,\n            duration: 300\n        })).action({\n            start: 0,\n            end: 1,\n            complete: function() {}\n        });\n    },\n\n    /**\n     * To make exportation data for series type userEvent.\n     * @param {object} seriesData series data\n     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} export data\n     * @private\n     */\n    _makeExportationSeriesData: function(seriesData) {\n        var legendIndex = seriesData.indexes.index,\n            legendData = this.data.joinLegendLabels[legendIndex];\n        return {\n            chartType: legendData.chartType,\n            legend: legendData.label,\n            legendIndex: legendIndex,\n            index: seriesData.indexes.groupIndex\n        };\n    },\n\n    /**\n     * To call selectSeries callback of userEvent.\n     * @param {object} seriesData series data\n     */\n    onSelectSeries: function(seriesData) {\n        this.userEvent.fire('selectSeries', this._makeExportationSeriesData(seriesData));\n        if (this.options.hasSelection) {\n            this.graphRenderer.selectSeries(seriesData.indexes);\n        }\n    },\n\n    /**\n     * To call unselectSeries callback of userEvent.\n     * @param {object} seriesData series data.\n     */\n    onUnselectSeries: function(seriesData) {\n        this.userEvent.fire('unselectSeries', seriesData.indexes);\n        if (this.options.hasSelection) {\n            this.graphRenderer.unselectSeries(seriesData.indexes);\n        }\n    }\n});\n\nmodule.exports = Series;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"