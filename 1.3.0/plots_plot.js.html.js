ne.util.defineNamespace("fedoc.content", {});
fedoc.content["plots_plot.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Plot component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar dom = require('../helpers/domHandler'),\n    calculator = require('../helpers/calculator'),\n    renderUtil = require('../helpers/renderUtil'),\n    plotTemplate = require('./plotTemplate');\n\nvar Plot = tui.util.defineClass(/** @lends Plot.prototype */ {\n    /**\n     * Plot component.\n     * @constructs Plot\n     * @param {object} params parameters\n     *      @param {number} params.vTickCount vertical tick count\n     *      @param {number} params.hTickCount horizontal tick count\n     *      @param {object} params.bound axis bound\n     *      @param {object} params.theme axis theme\n     */\n    init: function(params) {\n        tui.util.extend(this, params);\n        /**\n         * Plot view className\n         * @type {string}\n         */\n        this.className = 'tui-chart-plot-area';\n    },\n\n    /**\n     * To render plot area.\n     * @param {HTMLElement} elPlotArea plot area element\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound plot bound\n     * @param {object} data rendering data\n     * @private\n     */\n    _renderPlotArea: function(elPlotArea, bound, data) {\n        this.bound = bound;\n        this.data = data;\n\n        renderUtil.renderDimension(elPlotArea, bound.dimension);\n        renderUtil.renderPosition(elPlotArea, bound.position);\n        this._renderLines(elPlotArea, bound.dimension);\n    },\n\n    /**\n     * To render plot component.\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound plot bound\n     * @param {object} data rendering data\n     * @returns {HTMLElement} plot element\n     */\n    render: function(bound, data) {\n        var el = dom.create('DIV', this.className);\n        this._renderPlotArea(el, bound, data);\n        this.elPlotArea = el;\n        return el;\n    },\n\n    /**\n     * To resize plot component.\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound plot bound\n     * @param {object} data rendering data\n     */\n    resize: function(bound, data) {\n        this.elPlotArea.innerHTML = '';\n        this._renderPlotArea(this.elPlotArea, bound, data);\n    },\n\n    /**\n     * Render plot lines.\n     * @param {HTMLElement} el element\n     * @param {{width: number, height: number}} dimension plot area dimension\n     * @private\n     */\n    _renderLines: function(el, dimension) {\n        var hPositions = this._makeHorizontalPixelPositions(dimension.width),\n            vPositions = this._makeVerticalPixelPositions(dimension.height),\n            theme = this.theme,\n            lineHtml = '';\n\n        lineHtml += this._makeLineHtml({\n            positions: hPositions,\n            size: dimension.height,\n            className: 'vertical',\n            positionType: 'left',\n            sizeType: 'height',\n            lineColor: theme.lineColor\n        });\n        lineHtml += this._makeLineHtml({\n            positions: vPositions,\n            size: dimension.width,\n            className: 'horizontal',\n            positionType: 'bottom',\n            sizeType: 'width',\n            lineColor: theme.lineColor\n        });\n\n        el.innerHTML = lineHtml;\n\n        renderUtil.renderBackground(el, theme.background);\n    },\n\n    /**\n     * To make html of plot line.\n     * @param {object} params parameters\n     *      @param {array.&lt;object>} params.positions positions\n     *      @param {number} params.size width or height\n     *      @param {string} params.className line className\n     *      @param {string} params.positionType position type (left or bottom)\n     *      @param {string} params.sizeType size type (size or height)\n     *      @param {string} params.lineColor line color\n     * @returns {string} html\n     * @private\n     */\n    _makeLineHtml: function(params) {\n        var template = plotTemplate.tplPlotLine,\n            lineHtml = tui.util.map(params.positions, function(position) {\n                var cssTexts = [\n                        renderUtil.concatStr(params.positionType, ':', position, 'px'),\n                        renderUtil.concatStr(params.sizeType, ':', params.size, 'px')\n                    ], data;\n\n                if (params.lineColor) {\n                    cssTexts.push(renderUtil.concatStr('background-color:', params.lineColor));\n                }\n\n                data = {className: params.className, cssText: cssTexts.join(';')};\n                return template(data);\n            }, this).join('');\n        return lineHtml;\n    },\n\n    /**\n     * To make pixel value of vertical positions\n     * @param {number} height plot height\n     * @returns {array.&lt;number>} positions\n     * @private\n     */\n    _makeVerticalPixelPositions: function(height) {\n        var positions = calculator.makeTickPixelPositions(height, this.data.vTickCount);\n        positions.shift();\n        return positions;\n    },\n\n    /**\n     * To make pixel value of horizontal positions.\n     * @param {number} width plot width\n     * @returns {array.&lt;number>} positions\n     * @private\n     */\n    _makeHorizontalPixelPositions: function(width) {\n        var positions = calculator.makeTickPixelPositions(width, this.data.hTickCount);\n        positions.shift();\n        return positions;\n    }\n});\n\nmodule.exports = Plot;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"