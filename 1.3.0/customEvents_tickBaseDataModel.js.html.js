ne.util.defineNamespace("fedoc.content", {});
fedoc.content["customEvents_tickBaseDataModel.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview TickBaseDataModel is tick base data model.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar predicate = require('../helpers/predicate');\n\nvar TickBaseDataModel = tui.util.defineClass(/** @lends TickBaseDataModel.prototype */ {\n    /**\n     * TickBaseDataModel is tick base data model.\n     * @param {{width: number, height: number}} dimension dimension\n     * @param {number} tickCount tick count\n     * @param {string} chartType chart type\n     * @param {boolan} isVertical whether vertical or not\n     * @constructs TickBaseDataModel\n     */\n    init: function(dimension, tickCount, chartType, isVertical) {\n        this.data = this._makeData(dimension, tickCount, chartType, isVertical);\n    },\n\n    /**\n     * To make tick base data about line type chart.\n     * @param {number} width width\n     * @param {number} tickCount tick count\n     * @returns {array} tick base data\n     * @private\n     */\n    _makeLineTypeData: function(width, tickCount) {\n        var tickInterval = width / (tickCount - 1),\n            halfInterval = tickInterval / 2;\n        return tui.util.map(tui.util.range(0, tickCount), function(index) {\n            return {\n                min: index * tickInterval - halfInterval,\n                max: index * tickInterval + halfInterval\n            };\n        });\n    },\n\n    /**\n     * To make tick base data about non line type chart.\n     * @param {number} size width or height\n     * @param {number} tickCount tick count\n     * @returns {array} tick base data\n     * @private\n     */\n    _makeNormalData: function(size, tickCount) {\n        var len = tickCount - 1,\n            tickInterval = size / len,\n            prev = 0;\n        return tui.util.map(tui.util.range(0, len), function(index) {\n            var max = tui.util.min([size, (index + 1) * tickInterval]),\n                scale = {\n                    min: prev,\n                    max: max\n                };\n            prev = max;\n            return scale;\n        });\n    },\n\n    /**\n     * To make tick base data for custom event.\n     * @param {{width: number, height: number}} dimension dimension\n     * @param {number} tickCount tick count\n     * @param {string} chartType chart type\n     * @param {boolan} isVertical whether vertical or not\n     * @returns {array.&lt;object>} tick base data\n     * @private\n     */\n    _makeData: function(dimension, tickCount, chartType, isVertical) {\n        var sizeType = isVertical ? 'width' : 'height',\n            data;\n        if (predicate.isLineTypeChart(chartType)) {\n            data = this._makeLineTypeData(dimension[sizeType], tickCount);\n        } else {\n            data = this._makeNormalData(dimension[sizeType], tickCount);\n        }\n\n        return data;\n    },\n\n    /**\n     * Find index.\n     * @param {number} pointValue mouse position point value\n     * @returns {number} group index\n     */\n    findIndex: function(pointValue) {\n        var foundIndex = -1;\n        tui.util.forEachArray(this.data, function(scale, index) {\n            if (scale.min &lt; pointValue &amp;&amp; scale.max >= pointValue) {\n                foundIndex = index;\n                return false;\n            }\n        });\n\n        return foundIndex;\n    },\n\n    /**\n     * Get tick base data length.\n     * @returns {number} length\n     */\n    getLength: function() {\n        return this.data.length;\n    },\n\n    /**\n     * To make range of tooltip position.\n     * @param {number} index index\n     * @param {string} chartType chart type\n     * @returns {{start: number, end: number}} range type value\n     * @private\n     */\n    makeRange: function(index, chartType) {\n        var scale = this.data[index],\n            range, center;\n        if (predicate.isLineTypeChart(chartType)) {\n            center = parseInt(scale.max - (scale.max - scale.min) / 2, 10);\n            range = {\n                start: center,\n                end: center\n            };\n        } else {\n            range = {\n                start: scale.min,\n                end: scale.max\n            };\n        }\n\n        return range;\n    }\n});\n\nmodule.exports = TickBaseDataModel;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"