ne.util.defineNamespace("fedoc.content", {});
fedoc.content["helpers_renderUtil.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Util for rendering.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar dom = require('./domHandler'),\n    chartConst = require('./../const');\n\nvar browser = tui.util.browser,\n    isOldBrowser = browser.msie &amp;&amp; browser.version &lt;= 8;\n\n/**\n * Util for rendering.\n * @module renderUtil\n */\nvar renderUtil = {\n    /**\n     * Concat string.\n     * @memberOf module:renderUtil\n     * @params {...string} target strings\n     * @returns {string} concat string\n     */\n    concatStr: function() {\n        return String.prototype.concat.apply('', arguments);\n    },\n\n    /**\n     * To make cssText for font.\n     * @memberOf module:renderUtil\n     * @param {{fontSize: number, fontFamily: string, color: string}} theme font theme\n     * @returns {string} cssText\n     */\n    makeFontCssText: function(theme) {\n        var cssTexts = [];\n\n        if (!theme) {\n            return '';\n        }\n\n        if (theme.fontSize) {\n            cssTexts.push(this.concatStr('font-size:', theme.fontSize, 'px'));\n        }\n\n        if (theme.fontFamily) {\n            cssTexts.push(this.concatStr('font-family:', theme.fontFamily));\n        }\n\n        if (theme.color) {\n            cssTexts.push(this.concatStr('color:', theme.color));\n        }\n\n        return cssTexts.join(';');\n    },\n\n    checkEl: null,\n    /**\n     * Create element for size check.\n     * @memberOf module:renderUtil\n     * @returns {HTMLElement} element\n     * @private\n     */\n    _createSizeCheckEl: function() {\n        var elDiv, elSpan;\n        if (this.checkEl) {\n            return this.checkEl;\n        }\n\n        elDiv = dom.create('DIV', 'tui-chart-size-check-element');\n        elSpan = dom.create('SPAN');\n\n        elDiv.appendChild(elSpan);\n        this.checkEl = elDiv;\n        return elDiv;\n    },\n\n    /**\n     * Get rendered label size (width or height).\n     * @memberOf module:renderUtil\n     * @param {string} label label\n     * @param {object} theme theme\n     * @param {string} offsetType offset type (offsetWidth or offsetHeight)\n     * @returns {number} size\n     * @private\n     */\n    _getRenderedLabelSize: function(label, theme, offsetType) {\n        var elDiv, elSpan, labelSize;\n\n        if (tui.util.isUndefined(label) || label === '') {\n            return 0;\n        }\n\n        elDiv = this._createSizeCheckEl();\n        elSpan = elDiv.firstChild;\n\n        theme = theme || {};\n        elSpan.innerHTML = label;\n        elSpan.style.fontSize = (theme.fontSize || chartConst.DEFAULT_LABEL_FONT_SIZE) + 'px';\n\n        if (theme.fontFamily) {\n            elSpan.style.padding = 0;\n            elSpan.style.fontFamily = theme.fontFamily;\n        }\n\n        document.body.appendChild(elDiv);\n        labelSize = elSpan[offsetType];\n        document.body.removeChild(elDiv);\n        return labelSize;\n    },\n\n    /**\n     * Get rendered label width.\n     * @memberOf module:renderUtil\n     * @param {string} label label\n     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme\n     * @returns {number} width\n     */\n    getRenderedLabelWidth: function(label, theme) {\n        var labelWidth = this._getRenderedLabelSize(label, theme, 'offsetWidth');\n        return labelWidth;\n    },\n\n    /**\n     * Get rendered label height.\n     * @memberOf module:renderUtil\n     * @param {string} label label\n     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme\n     * @returns {number} height\n     */\n    getRenderedLabelHeight: function(label, theme) {\n        var labelHeight = this._getRenderedLabelSize(label, theme, 'offsetHeight');\n        return labelHeight;\n    },\n\n    /**\n     * Get Rendered Labels Max Size(width or height).\n     * @memberOf module:boundsMaker\n     * @param {string[]} labels labels\n     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme\n     * @param {function} iteratee iteratee\n     * @returns {number} max size (width or height)\n     * @private\n     */\n    _getRenderedLabelsMaxSize: function(labels, theme, iteratee) {\n        var sizes = tui.util.map(labels, function(label) {\n                return iteratee(label, theme);\n            }, this),\n            maxSize = tui.util.max(sizes);\n        return maxSize;\n    },\n\n    /**\n     * Get rendered labels max width.\n     * @memberOf module:boundsMaker\n     * @param {string[]} labels labels\n     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme\n     * @returns {number} max width\n     * @private\n     */\n    getRenderedLabelsMaxWidth: function(labels, theme) {\n        var iteratee = tui.util.bind(this.getRenderedLabelWidth, this),\n            maxWidth = this._getRenderedLabelsMaxSize(labels, theme, iteratee);\n        return maxWidth;\n    },\n\n    /**\n     * Get rendered labels max height.\n     * @memberOf module:boundsMaker\n     * @param {string[]} labels labels\n     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme\n     * @returns {number} max height\n     */\n    getRenderedLabelsMaxHeight: function(labels, theme) {\n        var iteratee = tui.util.bind(this.getRenderedLabelHeight, this),\n            maxHeight = this._getRenderedLabelsMaxSize(labels, theme, iteratee);\n        return maxHeight;\n    },\n\n    /**\n     * Render dimension.\n     * @memberOf module:renderUtil\n     * @param {HTMLElement} el target element\n     * @param {{width: number, height: number}} dimension dimension\n     */\n    renderDimension: function(el, dimension) {\n        el.style.cssText = [\n            this.concatStr('width:', dimension.width, 'px'),\n            this.concatStr('height:', dimension.height, 'px')\n        ].join(';');\n    },\n\n    /**\n     * Render position(top, right).\n     * @memberOf module:renderUtil\n     * @param {HTMLElement} el target element\n     * @param {{top: number, left: number, right: number}} position position\n     */\n    renderPosition: function(el, position) {\n        if (tui.util.isUndefined(position)) {\n            return;\n        }\n\n        if (position.top) {\n            el.style.top = position.top + 'px';\n        }\n\n        if (position.left) {\n            el.style.left = position.left + 'px';\n        }\n\n        if (position.right) {\n            el.style.right = position.right + 'px';\n        }\n    },\n\n    /**\n     * Render background.\n     * @memberOf module:renderUtil\n     * @param {HTMLElement} el target element\n     * @param {string} background background option\n     */\n    renderBackground: function(el, background) {\n        if (!background) {\n            return;\n        }\n\n        el.style.background = background;\n    },\n\n    /**\n     * Render font family.\n     * @memberOf module:renderUtil\n     * @param {HTMLElement} el target element\n     * @param {string} fontFamily font family option\n     */\n    renderFontFamily: function(el, fontFamily) {\n        if (!fontFamily) {\n            return;\n        }\n\n        el.style.fontFamily = fontFamily;\n    },\n\n    /**\n     * Render title.\n     * @memberOf module:renderUtil\n     * @param {string} title title\n     * @param {{fontSize: number, color: string, background: string}} theme title theme\n     * @param {string} className css class name\n     * @returns {HTMLElement} title element\n     */\n    renderTitle: function(title, theme, className) {\n        var elTitle, cssText;\n\n        if (!title) {\n            return null;\n        }\n\n        elTitle = dom.create('DIV', className);\n        elTitle.innerHTML = title;\n\n        cssText = renderUtil.makeFontCssText(theme);\n\n        if (theme.background) {\n            cssText += ';' + this.concatStr('background:', theme.background);\n        }\n\n        elTitle.style.cssText = cssText;\n\n        return elTitle;\n    },\n\n    /**\n     * To expand dimension.\n     * @param {{width: number, height: number}} dimension series dimension\n     * @returns {{width: number, height: number}} expended dimension\n     */\n    expandBound: function(bound) {\n        var dimension = bound.dimension,\n            position = bound.position;\n        return {\n            dimension: {\n                width: dimension.width + chartConst.SERIES_EXPAND_SIZE * 2,\n                height: dimension.height + chartConst.SERIES_EXPAND_SIZE\n            },\n            position: {\n                left: position.left - chartConst.SERIES_EXPAND_SIZE,\n                top: position.top\n            }\n        };\n    },\n\n    makeCustomEventName: function(prefix, str, suffix) {\n        return prefix + tui.util.properCase(str) + tui.util.properCase(suffix);\n    },\n\n    /**\n     * Whether IE8 or not.\n     * @memberOf module:renderUtil\n     * @returns {boolean} result boolean\n     */\n    isOldBrowser: function() {\n        return isOldBrowser;\n    }\n};\n\nmodule.exports = renderUtil;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"