ne.util.defineNamespace("fedoc.content", {});
fedoc.content["helpers_dataConverter.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Data converter.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar concat = Array.prototype.concat;\n\n/**\n * Data converter.\n * @module dataConverter\n */\nvar dataConverter = {\n    /**\n     * Convert user data.\n     * @memberOf module:dataConverter\n     * @param {array.&lt;array>} userData user data\n     * @param {object} chartOptions chart option\n     * @param {string} chartType chart type\n     * @param {array.&lt;string>} seriesChartTypes chart types\n     * @returns {{\n     *      labels: array.&lt;string>,\n     *      values: array.&lt;number>,\n     *      legendLabels: array.&lt;string>,\n     *      formatFunctions: array.&lt;function>,\n     *      formattedValues: array.&lt;string>\n     * }} converted data\n     */\n    convert: function(userData, chartOptions, chartType, seriesChartTypes) {\n        var labels = userData.categories,\n            seriesData = userData.series,\n            values = this._pickValues(seriesData),\n            joinValues = this._joinValues(values, seriesChartTypes),\n            legendLabels = this._pickLegendLabels(seriesData),\n            joinLegendLabels = this._joinLegendLabels(legendLabels, chartType, seriesChartTypes),\n            format = chartOptions &amp;&amp; chartOptions.format || '',\n            formatFunctions = this._findFormatFunctions(format),\n            formattedValues = format ? this._formatValues(values, formatFunctions) : values,\n            joinFormattedValues = this._joinValues(formattedValues, seriesChartTypes);\n        return {\n            labels: labels,\n            values: values,\n            joinValues: joinValues,\n            legendLabels: legendLabels,\n            joinLegendLabels: joinLegendLabels,\n            formatFunctions: formatFunctions,\n            formattedValues: formattedValues,\n            joinFormattedValues: joinFormattedValues\n        };\n    },\n\n    /**\n     * Separate label.\n     * @memberOf module:dataConverter\n     * @param {array.&lt;array.&lt;array>>} userData user data\n     * @returns {{labels: (array.&lt;string>), sourceData: array.&lt;array.&lt;array>>}} result data\n     * @private\n     */\n    _separateLabel: function(userData) {\n        var labels = userData[0].pop();\n        return {\n            labels: labels,\n            sourceData: userData\n        };\n    },\n\n    /**\n     * Pick value.\n     * @memberOf module:dataConverter\n     * @param {{name: string, data: (array.&lt;number> | number)}} items items\n     * @returns {array} picked value\n     * @private\n     */\n    _pickValue: function(items) {\n        return tui.util.map([].concat(items.data), parseFloat);\n    },\n\n    /**\n     * Pick values from axis data.\n     * @memberOf module:dataConverter\n     * @param {array.&lt;array>} seriesData series data\n     * @returns {string[]} values\n     */\n    _pickValues: function(seriesData) {\n        var values, result;\n        if (tui.util.isArray(seriesData)) {\n            values = tui.util.map(seriesData, this._pickValue, this);\n            result = tui.util.pivot(values);\n        } else {\n            result = {};\n            tui.util.forEach(seriesData, function(groupValues, type) {\n                values = tui.util.map(groupValues, this._pickValue, this);\n                result[type] = tui.util.pivot(values);\n            }, this);\n        }\n        return result;\n    },\n\n    /**\n     * Join values.\n     * @memberOf module:dataConverter\n     * @param {array.&lt;array>} groupValues values\n     * @param {array.&lt;string>} seriesChartTypes chart types\n     * @returns {array.&lt;number>} join values\n     * @private\n     */\n    _joinValues: function(groupValues, seriesChartTypes) {\n        var joinValues;\n\n        if (!seriesChartTypes) {\n            return groupValues;\n        }\n\n        joinValues = tui.util.map(groupValues, function(values) {\n            return values;\n        }, this);\n\n        joinValues = [];\n        tui.util.forEachArray(seriesChartTypes, function(_chartType) {\n            tui.util.forEach(groupValues[_chartType], function(values, index) {\n                if (!joinValues[index]) {\n                    joinValues[index] = [];\n                }\n                joinValues[index] = joinValues[index].concat(values);\n            });\n        });\n\n        return joinValues;\n    },\n\n    /**\n     * Pick legend label.\n     * @memberOf module:dataConverter\n     * @param {object} item item\n     * @returns {string} label\n     * @private\n     */\n    _pickLegendLabel: function(item) {\n        return item.name;\n    },\n\n    /**\n     * Pick legend labels from axis data.\n     * @memberOf module:dataConverter\n     * @param {array.&lt;array>} seriesData series data\n     * @returns {string[]} labels\n     */\n    _pickLegendLabels: function(seriesData) {\n        var result;\n        if (tui.util.isArray(seriesData)) {\n            result = tui.util.map(seriesData, this._pickLegendLabel, this);\n        } else {\n            result = {};\n            tui.util.forEach(seriesData, function(groupValues, type) {\n                result[type] = tui.util.map(groupValues, this._pickLegendLabel, this);\n            }, this);\n        }\n        return result;\n    },\n\n    /**\n     * Join legend labels.\n     * @memberOf module:dataConverter\n     * @param {array} legendLabels legend labels\n     * @param {string} chartType chart type\n     * @param {array.&lt;string>} seriesChartTypes chart types\n     * @returns {array} labels\n     * @private\n     */\n    _joinLegendLabels: function(legendLabels, chartType, seriesChartTypes) {\n        var joinLabels;\n        if (!seriesChartTypes || !seriesChartTypes.length) {\n            joinLabels = tui.util.map(legendLabels, function(label) {\n                return {\n                    chartType: chartType,\n                    label: label\n                };\n            });\n        } else {\n            joinLabels = [];\n            tui.util.forEachArray(seriesChartTypes, function(_chartType) {\n                var labels = tui.util.map(legendLabels[_chartType], function(label) {\n                    return {\n                        chartType: _chartType,\n                        label: label\n                    };\n                });\n                joinLabels = joinLabels.concat(labels);\n            });\n        }\n        return joinLabels;\n    },\n\n    /**\n     * To format group values.\n     * @memberOf module:dataConverter\n     * @param {array.&lt;array>} groupValues group values\n     * @param {function[]} formatFunctions format functions\n     * @returns {string[]} formatted values\n     * @private\n     */\n    _formatGroupValues: function(groupValues, formatFunctions) {\n        return tui.util.map(groupValues, function(values) {\n            return tui.util.map(values, function(value) {\n                var fns = [value].concat(formatFunctions);\n                return tui.util.reduce(fns, function(stored, fn) {\n                    return fn(stored);\n                });\n            });\n        });\n    },\n\n    /**\n     * To format converted values.\n     * @memberOf module:dataConverter\n     * @param {array.&lt;array>} chartValues chart values\n     * @param {function[]} formatFunctions format functions\n     * @returns {string[]} formatted values\n     * @private\n     */\n    _formatValues: function(chartValues, formatFunctions) {\n        var result;\n        if (tui.util.isArray(chartValues)) {\n            result = this._formatGroupValues(chartValues, formatFunctions);\n        } else {\n            result = {};\n            tui.util.forEach(chartValues, function(groupValues, chartType) {\n                result[chartType] = this._formatGroupValues(groupValues, formatFunctions);\n            }, this);\n        }\n        return result;\n    },\n\n    /**\n     * Pick max length under point.\n     * @memberOf module:dataConverter\n     * @param {string[]} values chart values\n     * @returns {number} max length under point\n     * @private\n     */\n    _pickMaxLenUnderPoint: function(values) {\n        var max = 0;\n\n        tui.util.forEachArray(values, function(value) {\n            var len = tui.util.lengthAfterPoint(value);\n            if (len > max) {\n                max = len;\n            }\n        }, this);\n\n        return max;\n    },\n\n    /**\n     * Whether zero fill format or not.\n     * @memberOf module:dataConverter\n     * @param {string} format format\n     * @returns {boolean} result boolean\n     * @private\n     */\n    _isZeroFill: function(format) {\n        return format.length > 2 &amp;&amp; format.charAt(0) === '0';\n    },\n\n    /**\n     * Whether decimal format or not.\n     * @memberOf module:dataConverter\n     * @param {string} format format\n     * @returns {boolean} result boolean\n     * @private\n     */\n    _isDecimal: function(format) {\n        var indexOf = format.indexOf('.');\n        return indexOf > -1 &amp;&amp; indexOf &lt; format.length - 1;\n    },\n\n    /**\n     * Whether comma format or not.\n     * @memberOf module:dataConverter\n     * @param {string} format format\n     * @returns {boolean} result boolean\n     * @private\n     */\n    _isComma: function(format) {\n        return format.indexOf(',') === format.split('.')[0].length - 4;\n    },\n\n    /**\n     * Format zero fill.\n     * @memberOf module:dataConverter\n     * @param {number} len length of result\n     * @param {string} value target value\n     * @returns {string} formatted value\n     * @private\n     */\n    _formatZeroFill: function(len, value) {\n        var zero = '0',\n            isMinus = value &lt; 0;\n\n        value = Math.abs(value) + '';\n\n        if (value.length >= len) {\n            return value;\n        }\n\n        while (value.length &lt; len) {\n            value = zero + value;\n        }\n\n        return (isMinus ? '-' : '') + value;\n    },\n\n    /**\n     * Format Decimal.\n     * @memberOf module:dataConverter\n     * @param {number} len length of under decimal point\n     * @param {string} value target value\n     * @returns {string} formatted value\n     * @private\n     */\n    _formatDecimal: function(len, value) {\n        var pow;\n\n        if (len === 0) {\n            return Math.round(value, 10);\n        }\n\n        pow = Math.pow(10, len);\n        value = Math.round(value * pow) / pow;\n        value = parseFloat(value).toFixed(len);\n        return value;\n    },\n\n    /**\n     * Format Comma.\n     * @memberOf module:dataConverter\n     * @param {string} value target value\n     * @returns {string} formatted value\n     * @private\n     */\n    _formatComma: function(value) {\n        var comma = ',',\n            underPointValue = '',\n            values, lastIndex;\n\n        value += '';\n\n        if (value.indexOf('.') > -1) {\n            values = value.split('.');\n            value = values[0];\n            underPointValue = '.' + values[1];\n        }\n\n        if (value.length &lt; 4) {\n            return value + underPointValue;\n        }\n\n        values = (value).split('').reverse();\n        lastIndex = values.length - 1;\n        values = tui.util.map(values, function(char, index) {\n            var result = [char];\n            if (index &lt; lastIndex &amp;&amp; (index + 1) % 3 === 0) {\n                result.push(comma);\n            }\n            return result;\n        });\n\n        return concat.apply([], values).reverse().join('') + underPointValue;\n    },\n\n    /**\n     * Find format functions.\n     * @memberOf module:dataConverter\n     * @param {string} format format\n     * @param {string[]} values chart values\n     * @returns {function[]} functions\n     */\n    _findFormatFunctions: function(format) {\n        var funcs = [],\n            len;\n\n        if (!format) {\n            return [];\n        }\n\n        if (this._isDecimal(format)) {\n            len = this._pickMaxLenUnderPoint([format]);\n            funcs = [tui.util.bind(this._formatDecimal, this, len)];\n        } else if (this._isZeroFill(format)) {\n            len = format.length;\n            funcs = [tui.util.bind(this._formatZeroFill, this, len)];\n            return funcs;\n        }\n\n        if (this._isComma(format)) {\n            funcs.push(this._formatComma);\n        }\n\n        return funcs;\n    }\n};\n\nmodule.exports = dataConverter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"