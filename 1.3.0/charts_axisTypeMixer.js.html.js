ne.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_axisTypeMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview axisTypeMixer is mixer of axis type chart(bar, column, line, area).\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar predicate = require('../helpers/predicate'),\n    renderUtil = require('../helpers/renderUtil'),\n    Axis = require('../axes/axis'),\n    Plot = require('../plots/plot'),\n    Legend = require('../legends/legend'),\n    GroupTypeCustomEvent = require('../customEvents/groupTypeCustomEvent'),\n    PointTypeCustomEvent = require('../customEvents/pointTypeCustomEvent'),\n    Tooltip = require('../tooltips/tooltip'),\n    GroupTooltip = require('../tooltips/groupTooltip');\n\n/**\n * axisTypeMixer is base class of axis type chart(bar, column, line, area).\n * @mixin\n */\nvar axisTypeMixer = {\n    /**\n     * Add axis components.\n     * @param {array.&lt;string>} axisNames axis names\n     * @param {boolean} aligned whether aligned or not\n     * @private\n     */\n    _addAxisComponents: function(axisNames, aligned) {\n        tui.util.forEach(axisNames, function(name) {\n            var axisParams = {\n                aligned: aligned\n            };\n            if (name === 'yrAxis') {\n                axisParams.componentType = 'yAxis';\n                axisParams.index = 1;\n            }\n            this._addComponent(name, Axis, axisParams);\n        }, this);\n    },\n\n    /**\n     * Add series components\n     * @param {array&lt;object>} serieses serieses\n     * @param {object} options options\n     * @param {boolean} aligned whether aligned or not\n     * @private\n     */\n    _addSeriesComponents: function(serieses, options, aligned) {\n        var seriesBaseParams = {\n            libType: options.libType,\n            chartType: options.chartType,\n            parentChartType: options.parentChartType,\n            aligned: aligned,\n            hasGroupTooltip: this.hasGroupTooltip,\n            userEvent: this.userEvent,\n            componentType: 'series'\n        };\n\n        tui.util.forEach(serieses, function(series) {\n            var seriesParams = tui.util.extend(seriesBaseParams, series.data);\n            this._addComponent(series.name, series.SeriesClass, seriesParams);\n        }, this);\n    },\n\n    /**\n     * Add tooltip component\n     * @param {object} convertedData convertedData\n     * @param {object} options options\n     * @private\n     */\n    _addTooltipComponent: function(convertedData, options) {\n        if (this.hasGroupTooltip) {\n            this._addComponent('tooltip', GroupTooltip, {\n                labels: convertedData.labels,\n                joinFormattedValues: convertedData.joinFormattedValues,\n                joinLegendLabels: convertedData.joinLegendLabels,\n                isVertical: this.isVertical,\n                userEvent: this.userEvent\n            });\n        } else {\n            this._addComponent('tooltip', Tooltip, {\n                values: convertedData.values,\n                formattedValues: convertedData.formattedValues,\n                labels: convertedData.labels,\n                legendLabels: convertedData.legendLabels,\n                joinLegendLabels: convertedData.joinLegendLabels,\n                chartType: options.chartType,\n                isVertical: this.isVertical,\n                userEvent: this.userEvent\n            });\n        }\n    },\n\n    /**\n     * Add legend component.\n     * @param {object} convertedData convertedData\n     * @param {array.&lt;string>} seriesChartTypes series chart types\n     * @param {string} chartType chartType\n     * @param {object} legendOptions legend options\n     * @private\n     */\n    _addLegendComponent: function(convertedData, seriesChartTypes, chartType, legendOptions) {\n        if (!legendOptions || !legendOptions.hidden) {\n            this._addComponent('legend', Legend, {\n                joinLegendLabels: convertedData.joinLegendLabels,\n                legendLabels: convertedData.legendLabels,\n                seriesChartTypes: seriesChartTypes,\n                chartType: chartType,\n                userEvent: this.userEvent\n            });\n        }\n    },\n\n    /**\n     * Add components for axis type chart.\n     * @param {object} params parameters\n     *      @param {object} params.convertedData converted data\n     *      @param {object} params.axes axes data\n     *      @param {object} params.plotData plot data\n     *      @param {function} params.serieses serieses\n     * @private\n     */\n    _addComponentsForAxisType: function(params) {\n        var convertedData = params.convertedData,\n            options = this.options,\n            aligned = !!params.aligned;\n\n        this._addComponent('plot', Plot);\n        this._addAxisComponents(params.axes, aligned);\n        this._addLegendComponent(convertedData, params.seriesChartTypes, params.chartType, this.options.legend);\n        this._addSeriesComponents(params.serieses, options, aligned);\n        this._addTooltipComponent(convertedData, options);\n    },\n\n    /**\n     * Get scales.\n     * @param {{yAxis: object, xAxis: object}} axesData axes data\n     * @param {array.&lt;string>} chartTypes chart types\n     * @returns {array.&lt;{min: number, max: number}>} scales\n     * @param {boolean} isVertical whether vertical or not\n     * @private\n     */\n    _getScales: function(axesData, chartTypes, isVertical) {\n        var scales = {},\n            yAxisScale = axesData.yAxis.scale;\n\n        scales[chartTypes[0]] = isVertical ? yAxisScale : axesData.xAxis.scale;\n\n        if (chartTypes.length > 1) {\n            scales[chartTypes[1]] = axesData.yrAxis ? axesData.yrAxis.scale : yAxisScale;\n        }\n\n        return scales;\n    },\n\n    /**\n     * To make series data for rendering.\n     * @param {{yAxis: object, xAxis: object}} axesData axes data\n     * @param {array.&lt;string>} chartTypes chart types\n     * @param {boolean} isVertical whether vertical or not\n     * @returns {object} series data\n     * @private\n     */\n    _makeSeriesDataForRendering: function(axesData, chartTypes, isVertical) {\n        var scales = this._getScales(axesData, chartTypes, isVertical),\n            aligned = axesData.xAxis.aligned,\n            seriesData = {};\n\n        tui.util.forEachArray(chartTypes, function(chartType) {\n            var key = chartTypes.length > 1 ? chartType + 'Series' : 'series';\n            seriesData[key] = {\n                scale: scales[chartType],\n                aligned: aligned\n            };\n        });\n        return seriesData;\n    },\n\n    /**\n     * To make rendering data for axis type chart.\n     * @param {object} bounds chart bounds\n     * @param {object} convertedData convertedData\n     * @param {object} options options\n     * @return {object} data for rendering\n     * @private\n     * @override\n     */\n    _makeRenderingData: function(bounds, convertedData, options) {\n        var axesData = this._makeAxesData(convertedData, bounds, options),\n            optionChartTypes = this.chartTypes || [this.chartType],\n            seriesData = this._makeSeriesDataForRendering(axesData, optionChartTypes, this.isVertical);\n\n        return tui.util.extend({\n            plot: {\n                vTickCount: axesData.yAxis.validTickCount,\n                hTickCount: axesData.xAxis.validTickCount\n            },\n            customEvent: {\n                tickCount: this.isVertical ? axesData.xAxis.tickCount : axesData.yAxis.tickCount\n            },\n            tooltip: {\n                chartDimension: bounds.chart.dimension\n            }\n        }, seriesData, axesData);\n    },\n\n    /**\n     * Add grouped event handler layer.\n     * @param {{yAxis: obejct, xAxis: object}} axesData axes data\n     * @param {string} chartType chart type\n     * @param {boolean} isVertical whether vertical or not\n     * @private\n     * @override\n     */\n    _addCustomEventComponentForGroupTooltip: function() {\n        this._addComponent('customEvent', GroupTypeCustomEvent, {\n            chartType: this.chartType,\n            isVertical: this.isVertical\n        });\n    },\n\n    /**\n     * Add custom event component for normal tooltip.\n     * @private\n     */\n    _addCustomEventComponentForNormalTooltip: function() {\n        this._addComponent('customEvent', PointTypeCustomEvent, {\n            chartType: this.chartType,\n            isVertical: this.isVertical\n        });\n    },\n\n    /**\n     * Add custom event component.\n     * @private\n     */\n    _addCustomEventComponent: function() {\n        if (this.hasGroupTooltip) {\n            this._addCustomEventComponentForGroupTooltip();\n        } else {\n            this._addCustomEventComponentForNormalTooltip();\n        }\n    },\n\n    /**\n     * Attach coordinate event.\n     * @private\n     */\n    _attachCustomEventForGroupTooltip: function() {\n        var customEvent = this.componentMap.customEvent,\n            tooltip = this.componentMap.tooltip,\n            serieses = tui.util.filter(this.componentMap, function(component) {\n                return component.componentType === 'series';\n            });\n        customEvent.on('showGroupTooltip', tooltip.onShow, tooltip);\n        customEvent.on('hideGroupTooltip', tooltip.onHide, tooltip);\n\n        tui.util.forEach(serieses, function(series) {\n            if (series.onShowGroupTooltipLine) {\n                tooltip.on('showGroupTooltipLine', series.onShowGroupTooltipLine, series);\n                tooltip.on('hideGroupTooltipLine', series.onHideGroupTooltipLine, series);\n            }\n            tooltip.on('showGroupAnimation', series.onShowGroupAnimation, series);\n            tooltip.on('hideGroupAnimation', series.onHideGroupAnimation, series);\n        }, this);\n    },\n\n    /**\n     * To attach custom event for normal tooltip.\n     * @private\n     */\n    _attachCustomEventForNormalTooltip: function() {\n        var customEvent = this.componentMap.customEvent,\n            tooltip = this.componentMap.tooltip,\n            serieses = tui.util.filter(this.componentMap, function(component) {\n                return component.componentType === 'series';\n            });\n\n        customEvent.on('showTooltip', tooltip.onShow, tooltip);\n        customEvent.on('hideTooltip', tooltip.onHide, tooltip);\n\n        tui.util.forEach(serieses, function(series) {\n            if (series.onShowAnimation) {\n                tooltip.on(renderUtil.makeCustomEventName('show', series.chartType, 'animation'), series.onShowAnimation, series);\n                tooltip.on(renderUtil.makeCustomEventName('hide', series.chartType, 'animation'), series.onHideAnimation, series);\n            }\n        }, this);\n    },\n\n    /**\n     * To attach custom event for series selection.\n     * @private\n     */\n    _attachCustomEventForSeriesSelection: function() {\n        var customEvent = this.componentMap.customEvent,\n            serieses = tui.util.filter(this.componentMap, function(component) {\n                return component.componentType === 'series';\n            });\n        tui.util.forEach(serieses, function(series) {\n            customEvent.on(renderUtil.makeCustomEventName('select', series.chartType, 'series'), series.onSelectSeries, series);\n            customEvent.on(renderUtil.makeCustomEventName('unselect', series.chartType, 'series'), series.onUnselectSeries, series);\n        }, this);\n    },\n\n    /**\n     * Attach custom event.\n     * @private\n     * @override\n     */\n    _attachCustomEvent: function() {\n        if (this.hasGroupTooltip) {\n            this._attachCustomEventForGroupTooltip();\n        } else {\n            this._attachCustomEventForNormalTooltip();\n        }\n\n        this._attachCustomEventForSeriesSelection();\n    },\n\n    /**\n     * Mix in.\n     * @param {function} func target function\n     * @ignore\n     */\n    mixin: function(func) {\n        tui.util.extend(func.prototype, this);\n    }\n};\n\nmodule.exports = axisTypeMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"