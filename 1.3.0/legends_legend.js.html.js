ne.util.defineNamespace("fedoc.content", {});
fedoc.content["legends_legend.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Legend component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    dom = require('../helpers/domHandler'),\n    eventListener = require('../helpers/eventListener'),\n    renderUtil = require('../helpers/renderUtil'),\n    defaultTheme = require('../themes/defaultTheme'),\n    legendTemplate = require('./../legends/legendTemplate');\n\nvar concat = Array.prototype.concat;\n\nvar Legend = tui.util.defineClass(/** @lends Legend.prototype */ {\n    /**\n     * Legend component.\n     * @constructs Legend\n     * @param {object} params parameters\n     *      @param {number} params.legendLabels legend labels\n     *      @param {object} params.bound axis bound\n     *      @param {object} params.theme axis theme\n     */\n    init: function(params) {\n        tui.util.extend(this, params);\n        /**\n         * Legend view className\n         */\n        this.className = 'tui-chart-legend-area';\n    },\n\n    /**\n     * To render legend area.\n     * @param {HTMLElement} elLegnedArea legend area element\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound lengend bound\n     * @private\n     */\n    _renderLegendArea: function(elLegnedArea, bound) {\n        var legendData;\n        this.bound = bound;\n        this.legendData = legendData = this._makeLegendData();\n        elLegnedArea.innerHTML = this._makeLegendHtml(legendData);\n        renderUtil.renderPosition(elLegnedArea, bound.position);\n        this._renderLabelTheme(elLegnedArea, this.theme.label);\n    },\n\n    /**\n     * To render legend component.\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound lengend bound\n     * @returns {HTMLElement} legend element\n     */\n    render: function(bound) {\n        var el = dom.create('DIV', this.className);\n        this._renderLegendArea(el, bound);\n        this._attachEvent(el);\n        this.elLegendArea = el;\n        return el;\n    },\n\n    /**\n     * To resize legend component.\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound lengend bound\n     */\n    resize: function(bound) {\n        this._renderLegendArea(this.elLegendArea, bound);\n    },\n\n    /**\n     * Set theme for legend labels\n     * @param {array.&lt;object>} labels labels\n     * @param {object} theme legend theme\n     * @returns {array.&lt;object>} labels\n     * @private\n     */\n    _setThemeForLabels: function(labels, theme) {\n        var result;\n        result = tui.util.map(labels, function(item, index) {\n            var itemTheme = {\n                color: theme.colors[index]\n            };\n\n            if (theme.singleColors) {\n                itemTheme.singleColor = theme.singleColors[index];\n            }\n            if (theme.borderColor) {\n                itemTheme.borderColor = theme.borderColor;\n            }\n            item.theme = itemTheme;\n            item.index = index;\n            return item;\n        }, this);\n\n        return result;\n    },\n\n    /**\n     * To make legend labels.\n     * @returns {array.&lt;object>} legend labels.\n     * @private\n     */\n    _makeLegendData: function() {\n        var joinLegendLabels = this.joinLegendLabels,\n            theme = this.theme,\n            defaultLegendTheme = {\n                colors: defaultTheme.series.colors\n            },\n            startIndex, result;\n\n        if (!this.seriesChartTypes) {\n            result = this._setThemeForLabels(joinLegendLabels, theme);\n        } else {\n            startIndex = 0;\n            result = concat.apply([], tui.util.map(this.seriesChartTypes, function(chartType) {\n                var chartTheme = theme[chartType] || defaultLegendTheme,\n                    endIndex = startIndex + this.legendLabels[chartType].length,\n                    data = this._setThemeForLabels(joinLegendLabels.slice(startIndex, endIndex), chartTheme);\n                startIndex = endIndex;\n                return data;\n            }, this));\n        }\n        return result;\n    },\n\n    /**\n     * To make legend html.\n     * @param {array} legendData legend data\n     * @returns {string} legend html\n     * @private\n     */\n    _makeLegendHtml: function(legendData) {\n        var template = legendTemplate.tplLegend,\n            labelHeight = renderUtil.getRenderedLabelHeight(legendData[0].label, legendData[0].theme),\n            height = labelHeight + (chartConst.LABEL_PADDING_TOP * 2),\n            baseMarginTop = parseInt((height - chartConst.LEGEND_RECT_WIDTH) / 2, 10) - 1,\n            html = tui.util.map(legendData, function(legendInfo, index) {\n                var borderCssText = legendInfo.borderColor ? renderUtil.concatStr(';border:1px solid ', legendInfo.borderColor) : '',\n                    rectMargin, marginTop, data;\n                if (legendInfo.chartType === 'line') {\n                    marginTop = baseMarginTop + chartConst.LINE_MARGIN_TOP;\n                } else {\n                    marginTop = baseMarginTop;\n                }\n                rectMargin = renderUtil.concatStr(';margin-top:', marginTop, 'px');\n\n                data = {\n                    cssText: renderUtil.concatStr('background-color:', legendInfo.theme.singleColor || legendInfo.theme.color, borderCssText, rectMargin),\n                    height: height,\n                    labelHeight: labelHeight,\n                    chartType: legendInfo.chartType || 'rect',\n                    label: legendInfo.label,\n                    index: index\n                };\n                return template(data);\n            }, this).join('');\n        return html;\n    },\n\n    /**\n     * Render css style of label area.\n     * @param {HTMLElement} el label area element\n     * @param {{fontSize:number, fontFamily: string, color: string}} theme label theme\n     * @private\n     */\n    _renderLabelTheme: function(el, theme) {\n        var cssText = renderUtil.makeFontCssText(theme);\n        el.style.cssText += ';' + cssText;\n    },\n\n    /**\n     * Find legend element.\n     * @param {HTMLElement} elTarget target element\n     * @returns {HTMLElement} legend element\n     * @private\n     */\n    _findLegendElement: function(elTarget) {\n        var elLegend;\n\n        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_LEGEND)) {\n            elLegend = elTarget;\n        } else {\n            elLegend = dom.findParentByClass(elTarget, chartConst.CLASS_NAME_LEGEND);\n        }\n\n        return elLegend;\n    },\n\n    /**\n     * Select legend.\n     * @param {number} index index\n     * @private\n     */\n    _selectLegend: function(index) {\n        var data = this.legendData[index];\n        this.userEvent.fire('selectLegend', {\n            legend: data.label,\n            chartType: data.chartType,\n            index: data.index\n        });\n    },\n\n    /**\n     * On click event handler.\n     * @param {MouseEvent} e mouse event\n     * @private\n     */\n    _onClick: function(e) {\n        var elTarget = e.target || e.srcElement,\n            elLegend = this._findLegendElement(elTarget),\n            index;\n\n        if (!elLegend) {\n            return;\n        }\n\n        index = parseInt(elLegend.getAttribute('data-index'), 10);\n        this._selectLegend(index);\n    },\n\n    /**\n     * Attach browser event.\n     * @param {HTMLElement} el target element\n     * @private\n     */\n    _attachEvent: function(el) {\n        eventListener.bindEvent('click', el, tui.util.bind(this._onClick, this));\n    }\n});\n\nmodule.exports = Legend;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"