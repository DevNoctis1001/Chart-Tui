ne.util.defineNamespace("fedoc.content", {});
fedoc.content["series_columnChartSeries.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Column chart series component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar Series = require('./series'),\n    BarTypeSeriesBase = require('./barTypeSeriesBase'),\n    chartConst = require('../const'),\n    renderUtil = require('../helpers/renderUtil');\n\nvar ColumnChartSeries = tui.util.defineClass(Series, /** @lends ColumnChartSeries.prototype */ {\n    /**\n     * Column chart series component.\n     * @constructs ColumnChartSeries\n     * @extends Series\n     * @param {object} params parameters\n     *      @param {object} params.model series model\n     *      @param {object} params.options series options\n     *      @param {object} params.theme series theme\n     */\n    init: function() {\n        Series.apply(this, arguments);\n    },\n\n    /**\n     * To make start end tops.\n     * @param {number} endTop end top\n     * @param {number} endHeight end height\n     * @param {number} value value\n     * @param {boolean} isMinus whether minus or not\n     * @returns {{startTop: number, endTop: number}} start end tops\n     * @private\n     */\n    _makeStartEndTops: function(endTop, endHeight, value) {\n        var startTop;\n        if (value &lt; 0) {\n            startTop = endTop;\n        } else {\n            startTop = endTop;\n            endTop -= endHeight;\n        }\n\n        return {\n            startTop: startTop,\n            endTop: endTop\n        };\n    },\n\n    /**\n     * To make bound of column chart.\n     * @param {object} params parameters\n     *      @param {{left: number, width: number}} params.baseBound base bound\n     *      @param {number} params.startTop start top\n     *      @param {number} params.endTop end top\n     *      @param {number} params.endHeight end height\n     * @returns {{\n     *      start: {left: number, top: number, width: number, height: number},\n     *      end: {left: number, top: number, width: number, height: number}\n     * }} column chart bound\n     * @private\n     */\n    _makeColumnChartBound: function(params) {\n        return {\n            start: tui.util.extend({\n                top: params.startTop,\n                height: 0\n            }, params.baseBound),\n            end: tui.util.extend({\n                top: params.endTop,\n                height: params.endHeight\n            }, params.baseBound)\n        };\n    },\n\n    /**\n     * To make normal column chart bound.\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      groupValues: array.&lt;array.&lt;number>>,\n     *      groupSize: number, barSize: number, step: number,\n     *      distanceToMin: number, isMinus: boolean\n     * }} baseInfo base info\n     * @param {number} value value\n     * @param {number} paddingLeft padding left\n     * @param {number} index index\n     * @returns {{\n     *      start: {left: number, top: number, width: number, height: number},\n     *      end: {left: number, top: number, width: number, height: number}\n     * }} column chart bound\n     * @private\n     */\n    _makeNormalColumnChartBound: function(baseInfo, value, paddingLeft, index) {\n        var endHeight, endTop, startEndTops, bound;\n\n        endHeight = Math.abs(value * baseInfo.dimension.height);\n        endTop = baseInfo.isMinus ? 0 : baseInfo.dimension.height - baseInfo.distanceToMin;\n        startEndTops = this._makeStartEndTops(endTop, endHeight, value);\n        bound = this._makeColumnChartBound(tui.util.extend({\n            baseBound: {\n                left: paddingLeft + (baseInfo.step * index) + chartConst.SERIES_EXPAND_SIZE,\n                width: baseInfo.barSize\n            },\n            endHeight: endHeight\n        }, startEndTops));\n        return bound;\n    },\n\n    /**\n     * To make bounds of normal column chart.\n     * @param {{width: number, height:number}} dimension column chart dimension\n     * @returns {array.&lt;array.&lt;object>>} bounds\n     * @private\n     */\n    _makeNormalColumnChartBounds: function(dimension) {\n        var baseInfo = this.makeBaseInfoForNormalChartBounds(dimension, 'height', 'width'),\n            bounds;\n\n        bounds = tui.util.map(baseInfo.groupValues, function(values, groupIndex) {\n            var paddingLeft = (baseInfo.groupSize * groupIndex) + baseInfo.additionPadding;\n            return tui.util.map(values, function (value, index) {\n                return this._makeNormalColumnChartBound(baseInfo, value, paddingLeft, index);\n            }, this);\n        }, this);\n\n        return bounds;\n    },\n\n    /**\n     * To make bounds of stacked column chart.\n     * @param {{width: number, height:number}} dimension column chart dimension\n     * @returns {array.&lt;array.&lt;object>>} bounds\n     * @private\n     */\n    _makeStackedColumnChartBounds: function(dimension) {\n        var groupValues, groupWidth, barWidth,\n            optionWidth, additionPadding, bounds;\n\n        groupValues = this.percentValues;\n        groupWidth = (dimension.width / groupValues.length);\n        barWidth = groupWidth / 2;\n        optionWidth = this._makeOptionSize(barWidth, this.options.barWidth);\n        additionPadding = this._makeAdditionPadding(barWidth, optionWidth, 1);\n        barWidth = optionWidth || barWidth;\n        bounds = tui.util.map(groupValues, function(values, groupIndex) {\n            var paddingLeft = (groupWidth * groupIndex) + additionPadding + chartConst.SERIES_EXPAND_SIZE,\n                top = 0;\n            return tui.util.map(values, function (value) {\n                var endHeight, baseBound, bound;\n                if (value &lt; 0) {\n                    return null;\n                }\n\n                endHeight = value * dimension.height;\n                baseBound = {\n                    left: paddingLeft,\n                    width: barWidth\n                };\n                bound = this._makeColumnChartBound({\n                    baseBound: baseBound,\n                    startTop: dimension.height,\n                    endTop: dimension.height - endHeight - top,\n                    endHeight: endHeight\n                });\n\n                top += endHeight;\n                return bound;\n            }, this);\n        }, this);\n        return bounds;\n    },\n\n    /**\n     * To make bounds of column chart.\n     * @param {{width: number, height:number}} dimension column chart dimension\n     * @returns {array.&lt;array.&lt;object>>} bounds\n     * @private\n     */\n    _makeBounds: function(dimension) {\n        if (!this.options.stacked) {\n            return this._makeNormalColumnChartBounds(dimension);\n        } else {\n            return this._makeStackedColumnChartBounds(dimension);\n        }\n    },\n\n    /**\n     * To make series rendering position\n     * @param {obeject} params parameters\n     *      @param {number} params.value value\n     *      @param {{left: number, top: number, width:number, width:number, height: number}} params.bound bound\n     *      @param {string} params.formattedValue formatted value\n     *      @param {number} params.labelHeight label height\n     * @returns {{left: number, top: number}} rendering position\n     */\n    makeSeriesRenderingPosition: function(params) {\n        var labelWidth = renderUtil.getRenderedLabelWidth(params.formattedValue, this.theme.label),\n            bound = params.bound,\n            top = bound.top,\n            left = bound.left + (bound.width - labelWidth) / 2;\n\n        if (params.value >= 0) {\n            top -= params.labelHeight + chartConst.SERIES_LABEL_PADDING;\n        } else {\n            top += bound.height + chartConst.SERIES_LABEL_PADDING;\n        }\n\n        return {\n            left: left,\n            top: top\n        };\n    },\n\n    /**\n     * To make sum label html.\n     * @param {object} params parameters\n     *      @param {array.&lt;number>} params.values values\n     *      @param {array.&lt;function>} params.formatFunctions formatting functions\n     *      @param {{left: number, top: number}} params.bound bound\n     *      @param {number} params.labelHeight label height\n     * @returns {string} sum label html\n     */\n    makeSumLabelHtml: function(params) {\n        var sum = this.makeSumValues(params.values, params.formatFunctions),\n            bound = params.bound,\n            labelWidth = renderUtil.getRenderedLabelWidth(sum, this.theme.label),\n            left = bound.left + ((bound.width - labelWidth + chartConst.TEXT_PADDING) / 2),\n            top = bound.top - params.labelHeight - chartConst.SERIES_LABEL_PADDING;\n\n        return this.makeSeriesLabelHtml({\n            left: left,\n            top: top\n        }, sum, -1, -1);\n    }\n});\n\nBarTypeSeriesBase.mixin(ColumnChartSeries);\n\nmodule.exports = ColumnChartSeries;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"