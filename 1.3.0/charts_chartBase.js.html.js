ne.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_chartBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview ChartBase\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil'),\n    dataConverter = require('../helpers/dataConverter'),\n    boundsMaker = require('../helpers/boundsMaker'),\n    UserEventListener = require('../helpers/userEventListener');\n\nvar ChartBase = tui.util.defineClass(/** @lends ChartBase.prototype */ {\n    /**\n     * Chart base.\n     * @constructs ChartBase\n     * @param {object} params parameters\n     *      @param {object} params.bounds chart bounds\n     *      @param {object} params.theme chart theme\n     *      @param {{yAxis: obejct, xAxis: object}} axesData axes data\n     *      @param {object} params.options chart options\n     *      @param {boolean} param.isVertical whether vertical or not\n     */\n    init: function(params) {\n        /**\n         * converted data\n         * @type {object}\n         */\n        this.convertedData = this._makeConvertedData(params);\n\n        /**\n         * component array\n         * @type {array}\n         */\n        this.components = [];\n\n        /**\n         * component instance map\n         * @type {object}\n         */\n        this.componentMap = {};\n\n        /**\n         * theme\n         * @type {object}\n         */\n        this.theme = params.theme;\n\n        /**\n         * options\n         * @type {object}\n         */\n        this.options = params.options;\n\n        /**\n         * whether chart has axes or not\n         * @type {boolean}\n         */\n        this.hasAxes = params.hasAxes;\n\n        /**\n         * whether vertical or not\n         * @type {boolean}\n         */\n        this.isVertical = !!params.isVertical;\n\n        /**\n         * whether chart has group tooltip or not\n         * @type {*|boolean}\n         */\n        this.hasGroupTooltip = params.options.tooltip &amp;&amp; params.options.tooltip.grouped;\n\n        /**\n         * user event listener\n         * @type {object}\n         */\n        this.userEvent = new UserEventListener();\n\n        this.chartType = this.options.chartType;\n\n        this._addCustomEventComponent();\n    },\n\n    /**\n     * To make converted data.\n     * @param {object} params parameters\n     *      @params {object} userData user data\n     *      @params {{chart: object, chartType: string}} options chart options\n     *      @params {array} seriesChartTypes series chart types\n     * @returns {object} converted data\n     * @private\n     */\n    _makeConvertedData: function(params) {\n        var options = params.options,\n            convertedData = dataConverter.convert(params.userData, options.chart, options.chartType, params.seriesChartTypes);\n        return convertedData;\n    },\n\n    /**\n     *\n     * @private\n     * @abastract\n     */\n    _addCustomEventComponent: function() {},\n\n    /**\n     * To add component.\n     * The component refers to a component of the chart.\n     * The component types are axis, legend, plot, series and customEvent.\n     * Chart Component Description : https://i-msdn.sec.s-msft.com/dynimg/IC267997.gif\n     * @param {string} name component name\n     * @param {function} Component component function\n     * @param {object} params parameters\n     * @private\n     */\n    _addComponent: function(name, Component, params) {\n        var commonParams = {},\n            options, index, theme, component;\n\n        params = params || {};\n\n        options = params.options || this.options[params &amp;&amp; params.componentType || name];\n        theme = params.theme || this.theme[params &amp;&amp; params.componentType || name];\n        index = params &amp;&amp; params.index || 0;\n\n        commonParams.theme = tui.util.isArray(theme) ? theme[index] : theme;\n        commonParams.options = tui.util.isArray(options) ? options[index] : options || {};\n\n        params = tui.util.extend(params, commonParams);\n\n        component = new Component(params);\n\n        this.components.push({\n            name: name,\n            componentType: params.componentType,\n            instance: component\n        });\n        this.componentMap[name] = component;\n    },\n\n    /**\n     * To make bounds.\n     * @param {object} boundsParams parameters for making bounds\n     * @returns {object} chart bounds\n     * @private\n     */\n    _makeBounds: function(boundsParams) {\n        return boundsMaker.make(tui.util.extend({\n            convertedData: this.convertedData,\n            theme: this.theme,\n            options: this.options,\n            hasAxes: this.hasAxes,\n            isVertical: this.isVertical\n        }, boundsParams));\n    },\n\n    /**\n     * To make rendering data for axis type chart.\n     * @param {object} bounds chart bounds\n     * @param {object} convertedData convertedData\n     * @param {object} options options\n     * @private\n     * @abstract\n     */\n    _makeRenderingData: function() {},\n\n    /**\n     * Attach custom evnet.\n     * @private\n     * @abstract\n     */\n    _attachCustomEvent: function() {},\n\n    /**\n     * Render chart.\n     * @param {object} boundsParams parameters for making bounds\n     * @returns {HTMLElement} chart element\n     */\n    render: function(boundsParams) {\n        var el = dom.create('DIV', this.className),\n            bounds, renderingData;\n\n        if (boundsParams) {\n            this._makeBounds = tui.util.bind(this._makeBounds, this, boundsParams);\n        }\n\n        dom.addClass(el, 'tui-chart');\n        bounds = this._makeBounds();\n        renderingData = this._makeRenderingData(bounds, this.convertedData, this.options);\n\n        this._renderTitle(el);\n        renderUtil.renderDimension(el, bounds.chart.dimension);\n        renderUtil.renderBackground(el, this.theme.chart.background);\n        renderUtil.renderFontFamily(el, this.theme.chart.fontFamily);\n        this._renderComponents(el, this.components, bounds, renderingData);\n        this._sendSeriesData();\n        this._attachCustomEvent();\n        this.elChart = el;\n\n        return el;\n    },\n\n    /**\n     * Render title.\n     * @param {HTMLElement} el target element\n     * @private\n     */\n    _renderTitle: function(el) {\n        var chartOptions = this.options.chart || {},\n            elTitle = renderUtil.renderTitle(chartOptions.title, this.theme.title, 'tui-chart-title');\n        dom.append(el, elTitle);\n    },\n\n    /**\n     * Find bound about component\n     * @param {object} bounds components bounds\n     * @param {string} name component name\n     * @param {string} componentType component type\n     * @returns {{\n     *      dimension: {width: number, height: number},\n     *      position: {left: number, top: number}\n     * }} found bound\n     * @private\n     */\n    _findBound: function(bounds, name, componentType) {\n        return bounds[name] || (componentType &amp;&amp; bounds[componentType]);\n    },\n\n    /**\n     * Render components.\n     * @param {HTMLElement} container container element\n     * @param {array.&lt;object>} components components\n     * @param {array.&lt;object>} bounds bounds\n     * @param {object} renderingData data for rendering\n     * @private\n     */\n    _renderComponents: function(container, components, bounds, renderingData) {\n        var elements;\n        elements = tui.util.map(components, function(component) {\n            var name = component.name,\n                bound = this._findBound(bounds, name, component.componentType),\n                data = renderingData[name],\n                elComponent;\n            if (!bound) {\n                return null;\n            }\n\n            elComponent = component.instance.render(bound, data);\n\n            return elComponent;\n        }, this);\n        dom.append(container, elements);\n    },\n\n    /**\n     * Send series data to custom event component.\n     * @private\n     */\n    _sendSeriesData: function() {\n        var seriesInfos, chartTypes;\n\n        if (!this.componentMap.customEvent) {\n            return;\n        }\n\n        chartTypes = this.chartTypes || [this.chartType];\n        seriesInfos = tui.util.map(chartTypes, function(chartType) {\n            var key = chartTypes.length === 1 ? 'series' : chartType + 'Series';\n            return {\n                chartType: chartType,\n                data: this.componentMap[key].getSeriesData()\n            };\n        }, this);\n        this.componentMap.customEvent.initCustomEventData(seriesInfos);\n    },\n\n    /**\n     * To make event name for animation.\n     * @param {string} chartType chart type\n     * @param {string} prefix prefix\n     * @returns {string} event name\n     * @private\n     */\n    _makeAnimationEventName: function(chartType, prefix) {\n        return prefix + chartType.substring(0, 1).toUpperCase() + chartType.substring(1) + 'Animation';\n    },\n\n    /**\n     * Animate chart.\n     */\n    animateChart: function() {\n        tui.util.forEachArray(this.components, function(component) {\n            if (component.instance.animateComponent) {\n                component.instance.animateComponent();\n            }\n        });\n    },\n\n    /**\n     * To register of user event.\n     * @param {string} eventName event name\n     * @param {function} func event callback\n     */\n    on: function(eventName, func) {\n        this.userEvent.register(eventName, func);\n    },\n\n    /**\n     * Update dimension.\n     * @param {{width: number, height: number}} dimension dimension\n     * @returns {boolean} whether changed or not\n     * @private\n     */\n    _updateDimension: function(dimension) {\n        var changed = false;\n        if (dimension.width) {\n            this.options.chart.width = dimension.width;\n            changed = true;\n        }\n\n        if (dimension.height) {\n            this.options.chart.height = dimension.height;\n            changed = true;\n        }\n\n        return changed;\n    },\n\n    /**\n     * Resize components.\n     * @param {array.&lt;{name: string, instance: object}>} components components\n     * @param {array.&lt;object>} bounds bounds\n     * @param {object} renderingData data for rendering\n     * @private\n     */\n    _resizeComponents: function(components, bounds, renderingData) {\n        tui.util.forEachArray(components, function(component) {\n            var name = component.name,\n                bound = this._findBound(bounds, name, component.componentType),\n                data = renderingData[name];\n\n            if (!component.instance.resize) {\n                return;\n            }\n\n            component.instance.resize(bound, data);\n        }, this);\n    },\n\n    /**\n     * Public API for resizable.\n     * @param {{width: number, height: number}} dimension dimension\n     */\n    resize: function(dimension) {\n        var changed, bounds, renderingData;\n\n        if (!dimension) {\n            return;\n        }\n\n        changed = this._updateDimension(dimension);\n\n        if (!changed) {\n            return;\n        }\n\n        bounds = this._makeBounds();\n\n        renderingData = this._makeRenderingData(bounds, this.convertedData, this.options);\n        renderUtil.renderDimension(this.elChart, bounds.chart.dimension);\n        this._resizeComponents(this.components, bounds, renderingData);\n        this._sendSeriesData();\n    },\n\n    /**\n     * Set tooltip align option.\n     * @param {string} align align\n     */\n    setTooltipAlign: function(align) {\n        this.componentMap.tooltip.setAlign(align);\n    },\n\n    /**\n     * Set position option.\n     * @param {{left: number, top: number}} position moving position\n     */\n    setTooltipPosition: function(position) {\n        this.componentMap.tooltip.setPosition(position);\n    },\n\n    /**\n     * Reset tooltip align option.\n     */\n    resetTooltipAlign: function() {\n        this.componentMap.tooltip.resetAlign();\n    },\n\n    /**\n     * Reset tooltip position.\n     */\n    resetTooltipPosition: function() {\n        this.componentMap.tooltip.resetPosition();\n    }\n});\n\nmodule.exports = ChartBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"