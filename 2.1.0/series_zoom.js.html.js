tui.util.defineNamespace("fedoc.content", {});
fedoc.content["series_zoom.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Zoom component.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar seriesTemplate = require('./seriesTemplate'),\n    chartConst = require('../const'),\n    dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil'),\n    eventListener = require('../helpers/eventListener');\n\nvar Zoom = tui.util.defineClass(/** @lends Zoom.prototype */{\n    /**\n     * Zoom component.\n     * @param {object} params parameters\n     *      @param {BoundsMaker} params.boundsMaker bounds maker\n     * @constructs Zoom\n     */\n    init: function(params) {\n        this.className = 'tui-chart-zoom-area';\n\n        /**\n         * Bounds maker\n         * @type {BoundsMaker}\n         */\n        this.boundsMaker = params.boundsMaker;\n\n        /**\n         * Magnification.\n         * @type {number}\n         */\n        this.magn = 1;\n\n        /**\n         * Stacked wheelDelta.\n         * @type {number}\n         */\n        this.stackedWheelDelta = 0;\n    },\n\n    /**\n     * Render.\n     * @returns {HTMLElement} zoom container\n     */\n    render: function() {\n        var container = dom.create('DIV', this.className);\n\n        container.innerHTML += seriesTemplate.ZOOM_BUTTONS;\n        renderUtil.renderPosition(container, this.boundsMaker.getPosition('series'));\n        this._attachEvent(container);\n\n        return container;\n    },\n\n    /**\n     * Find button element.\n     * @param {HTMLElement} target target element.\n     * @returns {?HTMLElement} button element\n     * @private\n     */\n    _findBtnElement: function(target) {\n        var btnClassName = 'tui-chart-zoom-btn',\n            btnElement = target;\n\n        if (!dom.hasClass(target, btnClassName)) {\n            btnElement = dom.findParentByClass(target, btnClassName);\n        }\n\n        return btnElement;\n    },\n\n    /**\n     * Zoom\n     * @param {number} magn magnification\n     * @param {?{left: number, top: number}} position mouse position\n     * @private\n     */\n    _zoom: function(magn, position) {\n        var changedMagn = Math.min(Math.max(1, this.magn * magn), chartConst.MAX_ZOOM_MAGN);\n\n        if (changedMagn !== this.magn) {\n            this.magn = changedMagn;\n            this.fire('zoom', this.magn, position);\n        }\n    },\n\n    /**\n     * On click.\n     * @param {MouseEvent} e mouse event\n     * @returns {?boolean} prevent default for ie\n     * @private\n     */\n    _onClick: function(e) {\n        var target = e.target || e.srcElement,\n            btnElement = this._findBtnElement(target),\n            magn;\n\n        if (btnElement) {\n            magn = parseFloat(btnElement.getAttribute('data-magn'));\n            this._zoom(magn);\n        }\n\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n\n        return false;\n    },\n\n    /**\n     * Attach event.\n     * @param {HTMLElement} target target element\n     * @private\n     */\n    _attachEvent: function(target) {\n        eventListener.on(target, 'click', this._onClick, this);\n    },\n\n    /**\n     * Calculate magnification from wheelDelta.\n     * @param {number} wheelDelta wheelDelta\n     * @returns {number} magnification\n     * @private\n     */\n    _calculateMagn: function(wheelDelta) {\n        var tick = parseInt(wheelDelta / chartConst.WHEEL_TICK, 10),\n            magn;\n\n        if (tick > 0) {\n            magn = Math.pow(2, tick);\n        } else {\n            magn = Math.pow(0.5, Math.abs(tick));\n        }\n\n        return magn;\n    },\n\n    /**\n     * On wheel.\n     * @param {number} wheelDelta wheelDelta\n     * @param {{left: number, top: number}} position mouse position\n     */\n    onWheel: function(wheelDelta, position) {\n        var magn;\n\n        if (Math.abs(wheelDelta) &lt; chartConst.WHEEL_TICK) {\n            this.stackedWheelDelta += wheelDelta;\n        } else {\n            this.stackedWheelDelta = wheelDelta;\n        }\n\n        if (Math.abs(this.stackedWheelDelta) &lt; chartConst.WHEEL_TICK) {\n            return;\n        }\n\n        magn = this._calculateMagn(this.stackedWheelDelta);\n\n        this._zoom(magn, position);\n\n        this.stackedWheelDelta = this.stackedWheelDelta % chartConst.WHEEL_TICK;\n    }\n});\n\ntui.util.CustomEvents.mixin(Zoom);\n\nmodule.exports = Zoom;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"