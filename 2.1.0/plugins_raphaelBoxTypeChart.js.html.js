tui.util.defineNamespace("fedoc.content", {});
fedoc.content["plugins_raphaelBoxTypeChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview RaphaelBoxTypeChart is graph renderer for box type chart(heatmap chart, treemap chart).\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\nvar raphaelRenderUtil = require('./raphaelRenderUtil');\n\nvar raphael = window.Raphael;\n\nvar ANIMATION_DURATION = 100;\n\n/**\n * @classdesc RaphaelBoxTypeChart is graph renderer for box type chart(heatmap chart, treemap chart).\n * @class RaphaelBarChart\n */\nvar RaphaelBoxTypeChart = tui.util.defineClass(/** @lends RaphaelBoxTypeChart.prototype */ {\n    /**\n     * Render function of bar chart\n     * @param {HTMLElement} container container element\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      colorModel: object,\n     *      theme: object\n *      }} seriesData - data for graph rendering\n     * @returns {object}\n     */\n    render: function(container, seriesData) {\n        var dimension = seriesData.dimension;\n\n        this.paper = raphael(container, dimension.width, dimension.height);\n        this.theme = seriesData.theme;\n        this.boxesSet = this._renderBoxes(seriesData);\n\n        return this.paper;\n    },\n\n    /**\n     * Render boxes.\n     * @param {{gropudBounds: Array, seriesDataModel: SeriesDataModel}} seriesData - series data for rendering graph\n     * @returns {Array.&lt;Array.&lt;{rect: object, color: string}>>}\n     * @private\n     */\n    _renderBoxes: function(seriesData) {\n        var paper = this.paper;\n        var groupBounds = seriesData.groupBounds;\n        var seriesDataModel = seriesData.seriesDataModel;\n        var colorModel = seriesData.colorModel;\n        var borderColor = this.theme.borderColor || 'none';\n\n        return seriesDataModel.map(function(seriesGroup, groupIndex) {\n            return seriesGroup.map(function(seriesItem, index) {\n                var bound = groupBounds[groupIndex][index].end;\n                var color = colorModel.getColor(seriesItem.ratio);\n                var rect = raphaelRenderUtil.renderRect(paper, bound, {\n                    fill: color,\n                    stroke: borderColor\n                });\n\n                return {\n                    rect: rect,\n                    color: color\n                };\n            }, true);\n        });\n    },\n\n    /**\n     * Animate changing color of box.\n     * @param {{groupIndex: number, index:number}} indexes - index info\n     * @param {string} [color] - fill color\n     * @private\n     */\n    _animateChangingColor: function(indexes, color) {\n        var box = this.boxesSet[indexes.groupIndex][indexes.index];\n\n        color = color || box.color;\n\n        box.rect.animate({\n            fill: color\n        }, ANIMATION_DURATION);\n    },\n\n    /**\n     * Show animation.\n     * @param {{groupIndex: number, index:number}} indexes - index info\n     */\n    showAnimation: function(indexes) {\n        this._animateChangingColor(indexes, this.theme.overColor);\n    },\n\n    /**\n     * Hide animation.\n     * @param {{groupIndex: number, index:number}} indexes - index info\n     */\n    hideAnimation: function(indexes) {\n        this._animateChangingColor(indexes);\n    }\n});\n\nmodule.exports = RaphaelBoxTypeChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"