tui.util.defineNamespace("fedoc.content", {});
fedoc.content["chart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview chart.js is entry point of Toast UI Chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n'use strict';\n\nvar chartConst = require('./const');\nvar chartFactory = require('./factories/chartFactory');\nvar pluginFactory = require('./factories/pluginFactory');\nvar themeFactory = require('./factories/themeFactory');\nvar mapFactory = require('./factories/mapFactory');\n\nvar _createChart;\n\nrequire('./polyfill');\nrequire('./code-snippet-util');\nrequire('./registerCharts');\nrequire('./registerThemes');\n\n/**\n * Raw series datum.\n * @typedef {{name: ?string, data: Array.&lt;number>, stack: ?string}} rawSeriesDatum\n */\n\n/**\n * Raw series data.\n * @typedef {Array.&lt;rawSeriesDatum>} rawSeriesData\n */\n\n/**\n * Raw data.\n * @typedef {{\n *      categories: ?Array.&lt;string>,\n *      series: (rawSeriesData|{line: ?rawSeriesData, column: ?rawSeriesData})\n * }} rawData\n */\n\n/**\n * NHN Entertainment Toast UI Chart.\n * @namespace tui.chart\n */\ntui.util.defineNamespace('tui.chart');\n\n/**\n * Create chart.\n * @param {HTMLElement} container container\n * @param {rawData} rawData - raw data\n * @param {{\n *   chart: {\n *     width: number,\n *     height: number,\n *     title: string,\n *     format: string\n *   },\n *   yAxis: {\n *     title: string,\n *     min: number\n *   },\n *   xAxis: {\n *     title: string,\n *     min: number\n *   },\n *   tooltip: {\n *     suffix: string,\n *     template: function\n *   },\n *   theme: string\n * }} options - chart options\n * @returns {object} chart instance.\n * @private\n * @ignore\n */\n_createChart = function(container, rawData, options) {\n    var themeName, theme, chart;\n\n    rawData = JSON.parse(JSON.stringify(rawData));\n    options = options ? tui.util.deepCopy(options) : {};\n    themeName = options.theme || chartConst.DEFAULT_THEME_NAME;\n    theme = themeFactory.get(themeName);\n\n    chart = chartFactory.get(options.chartType, rawData, theme, options);\n    container.appendChild(chart.render());\n    chart.animateChart();\n\n    return chart;\n};\n\n/**\n * Bar chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;string>} rawData.categories - categories\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {string} options.yAxis.align - align option for center y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *          @param {number} options.xAxis.min - minimum value for x axis\n *          @param {number} options.xAxis.max - maximum value for x axis\n *      @param {object} options.series - options for series component\n *          @param {string} options.series.stackType - type of stack\n *          @param {boolean} options.series.showLabel - whether show label or not\n *          @param {number} options.series.barWidth - bar width\n *          @param {boolean} options.series.allowSelect - whether allow select or not\n *          @param {boolean} options.series.diverging - whether diverging or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *          @param {boolean} options.tooltip.grouped - whether group tooltip or not\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {object} options.plot - options for plot component\n *          @param {boolean} options.plot.showLine - whether show line or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} bar chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       categories: ['cate1', 'cate2', 'cate3'],\n *       series: [\n *         {\n *           name: 'Legend1',\n *           data: [20, 30, 50]\n *         },\n *         {\n *           name: 'Legend2',\n *           data: [40, 40, 60]\n *         },\n *         {\n *           name: 'Legend3',\n *           data: [60, 50, 10]\n *         },\n *         {\n *           name: 'Legend4',\n *           data: [80, 10, 70]\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Bar Chart'\n *       },\n *       yAxis: {\n *         title: 'Y Axis'\n *       },\n *       xAxis: {\n *         title: 'X Axis'\n *       }\n *     };\n * tui.chart.barChart(container, rawData, options);\n */\ntui.chart.barChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_BAR;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Column chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;string>} rawData.categories - categories\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {number} options.yAxis.min - minimum value for y axis\n *          @param {number} options.yAxis.max - maximum value for y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *          @param {number} options.xAxis.labelInterval - label interval for x axis\n *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)\n *      @param {object} options.series - options for series component\n *          @param {string} options.series.stackType - type of stack\n *          @param {boolean} options.series.showLabel - whether show label or not\n *          @param {number} options.series.barWidth - bar width\n *          @param {boolean} options.series.allowSelect - whether allow select or not\n *          @param {boolean} options.series.diverging - whether diverging or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *          @param {boolean} options.tooltip.grouped - whether group tooltip or not\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {object} options.plot - options for plot component\n *          @param {boolean} options.plot.showLine - whether show line or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} column chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       categories: ['cate1', 'cate2', 'cate3'],\n *       series: [\n *         {\n *           name: 'Legend1',\n *           data: [20, 30, 50]\n *         },\n *         {\n *           name: 'Legend2',\n *           data: [40, 40, 60]\n *         },\n *         {\n *           name: 'Legend3',\n *           data: [60, 50, 10]\n *         },\n *         {\n *           name: 'Legend4',\n *           data: [80, 10, 70]\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Column Chart'\n *       },\n *       yAxis: {\n *         title: 'Y Axis'\n *       },\n *       xAxis: {\n *         title: 'X Axis'\n *       }\n *     };\n * tui.chart.columnChart(container, rawData, options);\n */\ntui.chart.columnChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_COLUMN;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Line chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;string>} rawData.categories - categories\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {number} options.yAxis.min - minimum value for y axis\n *          @param {number} options.yAxis.max - maximum value for y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *          @param {number} options.xAxis.labelInterval - label interval for x axis\n *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)\n *      @param {object} options.series - options for series component\n *          @param {boolean} options.series.showDot - whether show dot or not\n *          @param {boolean} options.series.showLabel - whether show label or not\n *          @param {boolean} options.series.allowSelect - whether allow select or not\n *          @param {boolean} options.series.spline - whether spline or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *          @param {boolean} options.tooltip.grouped - whether group tooltip or not\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {object} options.plot - options for plot component\n *          @param {boolean} options.plot.showLine - whether show line or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} bar chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       categories: ['cate1', 'cate2', 'cate3'],\n *       series: [\n *         {\n *           name: 'Legend1',\n *           data: [20, 30, 50]\n *         },\n *         {\n *           name: 'Legend2',\n *           data: [40, 40, 60]\n *         },\n *         {\n *           name: 'Legend3',\n *           data: [60, 50, 10]\n *         },\n *         {\n *           name: 'Legend4',\n *           data: [80, 10, 70]\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Line Chart'\n *       },\n *       yAxis: {\n *         title: 'Y Axis'\n *       },\n *       xAxis: {\n *         title: 'X Axis'\n *       },\n *       series: {\n *         showDot: true\n *       }\n *     };\n * tui.chart.lineChart(container, rawData, options);\n */\ntui.chart.lineChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_LINE;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Area chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;string>} rawData.categories - categories\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {number} options.yAxis.min - minimum value for y axis\n *          @param {number} options.yAxis.max - maximum value for y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *          @param {number} options.xAxis.labelInterval - label interval for x axis\n *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)\n *      @param {object} options.series - options for series component\n *          @param {boolean} options.series.showDot - whether show dot or not\n *          @param {boolean} options.series.showLabel - whether show label or not\n *          @param {boolean} options.series.allowSelect - whether allow select or not\n *          @param {boolean} options.series.spline - whether spline or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *          @param {boolean} options.tooltip.grouped - whether group tooltip or not\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {object} options.plot - options for plot component\n *          @param {boolean} options.plot.showLine - whether show line or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} bar chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       categories: ['cate1', 'cate2', 'cate3'],\n *       series: [\n *         {\n *           name: 'Legend1',\n *           data: [20, 30, 50]\n *         },\n *         {\n *           name: 'Legend2',\n *           data: [40, 40, 60]\n *         },\n *         {\n *           name: 'Legend3',\n *           data: [60, 50, 10]\n *         },\n *         {\n *           name: 'Legend4',\n *           data: [80, 10, 70]\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Area Chart'\n *       },\n *       yAxis: {\n *         title: 'Y Axis'\n *       },\n *       xAxis: {\n *         title: 'X Axis'\n *       }\n *     };\n * tui.chart.areaChart(container, rawData, options);\n */\ntui.chart.areaChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_AREA;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Bubble chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;string>} rawData.categories - categories\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {number} options.yAxis.min - minimum value for y axis\n *          @param {number} options.yAxis.max - maximum value for y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *          @param {number} options.xAxis.labelInterval - label interval for x axis\n *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)\n *          @param {number} options.xAxis.min - minimum value for y axis\n *          @param {number} options.xAxis.max - maximum value for y axis\n *      @param {object} options.series - options for series component\n *          @param {boolean} options.series.showLabel - whether show label or not\n *          @param {boolean} options.series.allowSelect - whether allow select or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {object} options.circleLegend - options for circleLegend\n *          @param {boolean} options.circleLegend.visible - whether visible or not (default: true)\n *      @param {object} options.plot - options for plot component\n *          @param {boolean} options.plot.showLine - whether show line or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} bubble chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       series: [\n *         {\n *           name: 'Legend1',\n *           data: [{\n *              x: 10,\n *              y: 20,\n *              r: 15,\n *              label: 'Lable1'\n *           }, {\n *              x: 20,\n *              y: 40,\n *              r: 10,\n *              label: 'Lable2'\n *           }]\n *         },\n *         {\n *           name: 'Legend2',\n *           data: [{\n *              x: 40,\n *              y: 10,\n *              r: 5,\n *              label: 'Lable3'\n *           }, {\n *              x: 30,\n *              y: 40,\n *              r: 8,\n *              label: 'Lable4'\n *           }]\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Bubble Chart'\n *       },\n *       yAxis: {\n *         title: 'Y Axis'\n *       },\n *       xAxis: {\n *         title: 'X Axis'\n *       }\n *     };\n * tui.chart.bubbleChart(container, rawData, options);\n */\ntui.chart.bubbleChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_BUBBLE;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Scatter chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;string>} rawData.categories - categories\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {number} options.yAxis.min - minimum value for y axis\n *          @param {number} options.yAxis.max - maximum value for y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *          @param {number} options.xAxis.min - minimum value for y axis\n *          @param {number} options.xAxis.max - maximum value for y axis\n *      @param {object} options.series - options for series component\n *          @param {boolean} options.series.showLabel - whether show label or not\n *          @param {boolean} options.series.allowSelect - whether allow select or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {object} options.plot - options for plot component\n *          @param {boolean} options.plot.showLine - whether show line or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} scatter chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       series: [\n *         {\n *           name: 'Legend1',\n *           data: [{\n *              x: 10,\n *              y: 20\n *           }, {\n *              x: 20,\n *              y: 40\n *           }]\n *         },\n *         {\n *           name: 'Legend2',\n *           data: [{\n *              x: 40,\n *              y: 10\n *           }, {\n *              x: 30,\n *              y: 40\n *           }]\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Scatter Chart'\n *       },\n *       yAxis: {\n *         title: 'Y Axis'\n *       },\n *       xAxis: {\n *         title: 'X Axis'\n *       }\n *     };\n * tui.chart.scatterChart(container, rawData, options);\n */\ntui.chart.scatterChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_SCATTER;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Heatmap chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {{x: Array.&lt;string | number>, y: Array.&lt;string | number>}} rawData.categories - categories\n *      @param {Array.&lt;Array.&lt;number>>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *      @param {object} options.series - options for series component\n *          @param {boolean} options.series.showLabel - whether show label or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} scatter chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       categories: {\n *           x: [10, 20, 30, 40, 50],\n *           y: [1, 2, 3, 4, 5, 6]\n *       },\n *       series: [\n *           [10, 20, 30, 40, 50],\n *           [1, 4, 6, 7, 8],\n *           [20, 4, 5, 70, 8],\n *           [100, 40, 30, 80, 30],\n *           [20, 10, 60, 90, 20],\n *           [50, 40, 30, 20, 10]\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Heatmap Chart'\n *       },\n *       yAxis: {\n *         title: 'Y Axis'\n *       },\n *       xAxis: {\n *         title: 'X Axis'\n *       }\n *     };\n * tui.chart.heatmapChart(container, rawData, options);\n */\ntui.chart.heatmapChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_HEATMAP;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Combo chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;string>} rawData.categories - categories\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object|Array} options.yAxis - options for y axis component\n *          @param {string} options.yAxis.title - title for y axis\n *          @param {number} options.yAxis.min - minimum value for y axis\n *          @param {number} options.yAxis.max - maximum value for y axis\n *          @param {boolean} options.yAxis.rotateTitle - whether rotate title or not (default: true)\n *      @param {object} options.xAxis - options for x axis component\n *          @param {string} options.xAxis.title - title for x axis\n *          @param {number} options.xAxis.labelInterval - label interval for x axis\n *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)\n *      @param {object} options.series - options for series component\n *          @param {?object} options.series.column - options for column series component\n *              @param {string} options.series.column.stackType - type of stack\n *              @param {boolean} options.series.column.showLabel - whether show label or not\n *              @param {number} options.series.column.barWidth - bar width\n *              @param {boolean} options.series.column.allowSelect - whether allow select or not\n *          @param {?object} options.series.line - options for line series component\n *              @param {boolean} options.series.line.showDot - whether show dot or not\n *              @param {boolean} options.series.line.showLabel - whether show label or not\n *              @param {boolean} options.series.line.allowSelect - whether allow select or not\n *              @param {boolean} options.series.line.spline - whether spline or not\n *          @param {?object} options.series.pie - options for pie series component\n *              @param {boolean} options.series.pie.showLabel - whether show label or not\n *              @param {number} options.series.pie.radiusRatio - ratio of radius for pie graph\n *              @param {boolean} options.series.pie.allowSelect - whether allow select or not\n *              @param {boolean} options.series.pie.startAngle - start angle\n *              @param {boolean} options.series.pie.endAngle - end angle\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {object} options.tooltip.column - options for column tooltip\n *              @param {string} options.tooltip.column.suffix - suffix for tooltip\n *              @param {function} [options.tooltip.column.template] template of tooltip\n *              @param {string} options.tooltip.column.align - align option for tooltip\n *              @param {object} options.tooltip.column.position - relative position\n *                  @param {number} options.tooltip.column.position.left - position left\n *                  @param {number} options.tooltip.column.position.top - position top\n *          @param {boolean} options.tooltip.grouped - whether group tooltip or not\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {object} options.plot - options for plot component\n *          @param {boolean} options.plot.showLine - whether show line or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} bar chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       categories: ['cate1', 'cate2', 'cate3'],\n *       series: {\n *         column: [\n *           {\n *             name: 'Legend1',\n *             data: [20, 30, 50]]\n *           },\n *           {\n *             name: 'Legend2',\n *             data: [40, 40, 60]\n *           },\n *           {\n *             name: 'Legend3',\n *             data: [60, 50, 10]\n *           },\n *           {\n *             name: 'Legend4',\n *             data: [80, 10, 70]\n *           }\n *         },\n *         line: [\n *           {\n *             name: 'Legend5',\n *             data: [1, 2, 3]\n *           }\n *         ]\n *       }\n *     },\n *     options = {\n *       chart: {\n *         title: 'Combo Chart'\n *       },\n *       yAxis:[\n *         {\n *           title: 'Y Axis',\n *           chartType: 'line'\n *         },\n *         {\n *           title: 'Y Right Axis'\n *         }\n *       ],\n *       xAxis: {\n *         title: 'X Axis'\n *       },\n *       series: {\n *         showDot: true\n *       }\n *     };\n * tui.chart.comboChart(container, rawData, options);\n */\ntui.chart.comboChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_COMBO;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Pie chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData - raw data\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.series - options for series component\n *          @param {boolean} options.series.showLabel - whether show label or not\n *          @param {number} options.series.radiusRatio - ratio of radius for pie graph\n *          @param {boolean} options.series.allowSelect - whether allow select or not\n *          @param {boolean} options.series.startAngle - start angle\n *          @param {boolean} options.series.endAngle - end angle\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left|center|outer)\n *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)\n *          @param {boolean} options.legend.visible - whether visible or not (default: true)\n *      @param {string} options.theme - theme name\n *      @param {string} options.libType - type of graph library\n * @returns {object} bar chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       series: [\n *         {\n *           name: 'Legend1',\n *           data: 20\n *         },\n *         {\n *           name: 'Legend2',\n *           data: 40\n *         },\n *         {\n *           name: 'Legend3',\n *           data: 60\n *         },\n *         {\n *           name: 'Legend4',\n *           data: 80\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Pie Chart'\n *       }\n *     };\n * tui.chart.pieChart(container, rawData, options);\n */\ntui.chart.pieChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_PIE;\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Map chart creator.\n * @memberOf tui.chart\n * @param {HTMLElement} container - chart container\n * @param {rawData} rawData chart data\n *      @param {Array.&lt;Array>} rawData.series - series data\n * @param {object} options - chart options\n *      @param {object} options.chart - base options for chart\n *          @param {number} options.chart.width - chart width\n *          @param {number} options.chart.height - chart height\n *          @param {string} options.chart.title - chart title\n *          @param {string | function} options.chart.format - formatter for value\n *      @param {object} options.series - options for series component\n *          @param {boolean} options.series.showLabel - whether show label or not\n *      @param {object} options.tooltip - options for tooltip component\n *          @param {string} options.tooltip.suffix - suffix for tooltip\n *          @param {function} [options.tooltip.template] - template for tooltip\n *          @param {string} options.tooltip.align - align option for tooltip\n *          @param {object} options.tooltip.position - relative position\n *              @param {number} options.tooltip.position.left - position left\n *              @param {number} options.tooltip.position.top - position top\n *      @param {object} options.legend - options for legend component\n *          @param {string} options.legend.align - align option for legend (top|bottom|left|center|outer)\n *      @param {string} options.theme - theme name\n *      @param {string} options.map map type\n *      @param {string} options.libType - type of graph library\n * @returns {object} bar chart\n * @api\n * @example\n * var container = document.getElementById('container-id'),\n *     rawData = {\n *       series: [\n *         {\n *           code: 'KR',\n *           data: 100,\n *           labelCoordinate: {\n *             x: 0.6,\n *             y: 0.7\n *           }\n *         },\n *         {\n *           code: 'JP',\n *           data: 50\n *         }\n *       ]\n *     },\n *     options = {\n *       chart: {\n *         title: 'Map Chart'\n *       },\n *       map: 'world'\n *     };\n * tui.chart.mapChart(container, rawData, options);\n */\ntui.chart.mapChart = function(container, rawData, options) {\n    options = options || {};\n    options.chartType = chartConst.CHART_TYPE_MAP;\n    options.map = mapFactory.get(options.map);\n\n    return _createChart(container, rawData, options);\n};\n\n/**\n * Register theme.\n * @memberOf tui.chart\n * @param {string} themeName theme name\n * @param {object} theme application chart theme\n *      @param {object} theme.chart chart theme\n *          @param {string} theme.chart.fontFamily font family of chart\n *          @param {string} theme.chart.background background of chart\n *      @param {object} theme.title chart theme\n *          @param {number} theme.title.fontSize font size of chart title\n *          @param {string} theme.title.fontFamily font family of chart title\n *          @param {string} theme.title.color font color of chart title\n *          @param {string} theme.title.background background of chart title\n *      @param {object} theme.yAxis theme of vertical axis\n *          @param {object} theme.yAxis.title theme of vertical axis title\n *              @param {number} theme.yAxis.title.fontSize font size of vertical axis title\n *              @param {string} theme.yAxis.title.fontFamily font family of vertical axis title\n *              @param {string} theme.yAxis.title.color font color of vertical axis title\n *          @param {object} theme.yAxis.label theme of vertical axis label\n *              @param {number} theme.yAxis.label.fontSize font size of vertical axis label\n *              @param {string} theme.yAxis.label.fontFamily font family of vertical axis label\n *              @param {string} theme.yAxis.label.color font color of vertical axis label\n *          @param {string} theme.yAxis.tickColor color of vertical axis tick\n *      @param {object} theme.xAxis theme of horizontal axis\n *          @param {object} theme.xAxis.title theme of horizontal axis title\n *              @param {number} theme.xAxis.title.fontSize font size of horizontal axis title\n *              @param {string} theme.xAxis.title.fontFamily font family of horizontal axis title\n *              @param {string} theme.xAxis.title.color font color of horizontal axis title\n *          @param {object} theme.xAxis.label theme of horizontal axis label\n *              @param {number} theme.xAxis.label.fontSize font size of horizontal axis label\n *              @param {string} theme.xAxis.label.fontFamily font family of horizontal axis label\n *              @param {string} theme.xAxis.label.color font color of horizontal axis label\n *          @param {string} theme.xAxis.tickColor color of horizontal axis tick\n *      @param {object} theme.plot plot theme\n *          @param {string} theme.plot.lineColor plot line color\n *          @param {string} theme.plot.background plot background\n *      @param {object} theme.series series theme\n *          @param {Array.&lt;string>} theme.series.colors series colors\n *          @param {string} theme.series.borderColor series border color\n *          @param {string} theme.series.selectionColor series selection color\n *          @param {string} theme.series.startColor start color for map chart\n *          @param {string} theme.series.endColor end color for map chart\n *          @param {string} theme.series.overColor end color for map chart\n *      @param {object} theme.legend legend theme\n *          @param {object} theme.legend.label theme of legend label\n *              @param {number} theme.legend.label.fontSize font size of legend label\n *              @param {string} theme.legend.label.fontFamily font family of legend label\n *              @param {string} theme.legend.label.color font color of legend label\n * @api\n * @example\n * var theme = {\n *   yAxis: {\n *     tickColor: '#ccbd9a',\n *       title: {\n *         color: '#333333'\n *       },\n *       label: {\n *         color: '#6f491d'\n *       }\n *     },\n *     xAxis: {\n *       tickColor: '#ccbd9a',\n *       title: {\n *         color: '#333333'\n *       },\n *       label: {\n *         color: '#6f491d'\n *       }\n *     },\n *     plot: {\n *       lineColor: '#e5dbc4',\n *       background: '#f6f1e5'\n *     },\n *     series: {\n *       colors: ['#40abb4', '#e78a31', '#c1c452', '#795224', '#f5f5f5'],\n *       borderColor: '#8e6535',\n *       selectionColor: '#cccccc',\n *       startColor: '#efefef',\n *       endColor: 'blue',\n *       overColor: 'yellow'\n *     },\n *     legend: {\n *       label: {\n *         color: '#6f491d'\n *       }\n *     }\n *   };\n * tui.chart.registerTheme('newTheme', theme);\n */\ntui.chart.registerTheme = function(themeName, theme) {\n    themeFactory.register(themeName, theme);\n};\n\n/**\n * Register map.\n * @param {string} mapName map name\n * @param {Array.&lt;{code: string, name: string, path: string}>} data map data\n * @api\n * @example\n * var data = [\n *   {\n *     code: 'KR',\n *     name: 'South Korea',\n *     path: 'M835.13,346.53L837.55,350.71...',\n *     labelCoordinate: {\n *       x: 0.6,\n *       y: 0.7\n *     }\n *   },\n *   //...\n * ];\n * tui.chart.registerMap('newMap', data);\n */\ntui.chart.registerMap = function(mapName, data) {\n    mapFactory.register(mapName, data);\n};\n\n/**\n * Register graph plugin.\n * @memberOf tui.chart\n * @param {string} libType type of graph library\n * @param {object} plugin plugin to control library\n * @example\n * var pluginRaphael = {\n *   bar: function() {} // Render class\n * };\n * tui.chart.registerPlugin('raphael', pluginRaphael);\n */\ntui.chart.registerPlugin = function(libType, plugin) {\n    pluginFactory.register(libType, plugin);\n};\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"