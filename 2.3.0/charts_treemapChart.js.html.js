tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_treemapChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Treemap chart is graphical representation of hierarchical data by using rectangles.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase');\nvar ColorSpectrum = require('./colorSpectrum');\nvar Series = require('../series/treemapChartSeries');\nvar Tooltip = require('../tooltips/tooltip');\nvar Legend = require('../legends/spectrumLegend');\nvar axisDataMaker = require('../helpers/axisDataMaker');\nvar BoundsTypeCustomEvent = require('../customEvents/boundsTypeCustomEvent');\nvar chartConst = require('../const');\n\nvar TreemapChart = tui.util.defineClass(ChartBase, /** @lends TreemapChart.prototype */ {\n    /**\n     * className\n     * @type {string}\n     */\n    className: 'tui-treemap-chart',\n    /**\n     * Treemap chart is graphical representation of hierarchical data by using rectangles.\n     * @constructs TreemapChart\n     * @extends ChartBase\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(rawData, theme, options) {\n        options.series = options.series || {};\n        options.tooltip = options.tooltip || {};\n        options.tooltip.grouped = false;\n\n        ChartBase.call(this, {\n            rawData: rawData,\n            theme: theme,\n            options: options,\n            hasAxes: false,\n            isVertical: true\n        });\n\n        /**\n         * scale information like limit, step for rendering legend\n         * @type {{limit: {min: number, max: number}, step: number}}\n         */\n        this.lengedScale = null;\n\n        this._addComponents(options.chartType);\n    },\n\n    /**\n     * Add components.\n     * @private\n     */\n    _addComponents: function() {\n        var useColorValue = tui.util.pick(this.options, 'series', 'useColorValue');\n\n        this.componentManager.register('series', Series, {\n            chartBackground: this.theme.chart.background,\n            chartType: this.chartType,\n            userEvent: this.userEvent\n        });\n\n        this.componentManager.register('tooltip', Tooltip, tui.util.extend({\n            labelTheme: tui.util.pick(this.theme, 'series', 'label')\n        }, this._makeTooltipData()));\n\n        if (useColorValue) {\n            this.componentManager.register('legend', Legend, {\n                chartType: this.chartType,\n                userEvent: this.userEvent\n            });\n        }\n\n        this.componentManager.register('customEvent', BoundsTypeCustomEvent, {\n            chartType: this.chartType,\n            isVertical: this.isVertical\n        });\n    },\n\n    /**\n     * Get legend scale\n     * @returns {Object.&lt;string, AxisScaleMaker>}\n     * @private\n     */\n    _getLegendScale: function() {\n        if (!this.lengedScale) {\n            this.lengedScale = this._createAxisScaleMaker({}, 'legend', null, this.chartType, {\n                valueCount: chartConst.SPECTRUM_LEGEND_TICK_COUNT\n            });\n        }\n\n        return this.lengedScale;\n    },\n\n    /**\n     * Add data ratios to dataProcessor for rendering graph.\n     * @private\n     * @override\n     */\n    _addDataRatios: function() {\n        var limit = this._getLegendScale().getLimit();\n\n        this.dataProcessor.addDataRatiosForTreemapChart(limit, this.chartType);\n    },\n\n    /**\n     * Make rendering data for delivery to each component.\n     * @returns {object}\n     * @private\n     * @override\n     */\n    _makeRenderingData: function() {\n        var data = {};\n        var seriesTheme = this.theme.series;\n        var useColorValue = tui.util.pick(this.options, 'series', 'useColorValue');\n        var colorSpectrum = useColorValue ? (new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor)) : null;\n\n        data.legend = {\n            colorSpectrum: colorSpectrum,\n            axesData: axisDataMaker.makeValueAxisData({\n                dataProcessor: this.dataProcessor,\n                chartType: this.chartType,\n                axisScaleMaker: this._getLegendScale(),\n                isVertical: true\n            })\n        };\n        data.series = {\n            colorSpectrum: colorSpectrum\n        };\n\n        return data;\n    },\n\n    /**\n     * Attach custom event.\n     * @private\n     * @override\n     */\n    _attachCustomEvent: function() {\n        var series = this.componentManager.get('series');\n        var customEvent = this.componentManager.get('customEvent');\n        var tooltip = this.componentManager.get('tooltip');\n        var legend = this.componentManager.get('legend');\n\n        ChartBase.prototype._attachCustomEvent.call(this);\n\n        customEvent.on('selectTreemapSeries', series.onSelectSeries, series);\n        customEvent.on('showTooltip', tooltip.onShow, tooltip);\n        customEvent.on('hideTooltip', tooltip.onHide, tooltip);\n\n        tooltip.on('showTreemapAnimation', series.onShowAnimation, series);\n        tooltip.on('hideTreemapAnimation', series.onHideAnimation, series);\n\n        series.on('afterZoom', customEvent.onAfterZoom, customEvent);\n\n        if (legend) {\n            customEvent.on('showTooltip', series.onShowTooltip, series);\n            customEvent.on('hideTooltip', legend.onHideWedge, legend);\n\n            series.on('showWedge', legend.onShowWedge, legend);\n        }\n    },\n\n    /**\n     * On zoom.\n     * @param {number} index - index of target seriesItem\n     */\n    onZoom: function(index) {\n        this._renderComponents({\n            'series': {\n                index: index\n            }\n        }, 'zoom');\n        this._sendSeriesData();\n    }\n});\n\nmodule.exports = TreemapChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"