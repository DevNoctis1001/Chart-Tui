tui.util.defineNamespace("fedoc.content", {});
fedoc.content["tooltips_singleTooltipMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview singleTooltipMixer is single tooltip mixer of map chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    predicate = require('../helpers/predicate'),\n    dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil');\n\n/**\n * singleTooltipMixer is single tooltip mixer of map chart.\n * @mixin\n */\nvar singleTooltipMixer = {\n\n    /**\n     * Fire custom event showAnimation.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @param {string} chartType chart type\n     * @private\n     */\n    _fireShowAnimation: function(indexes, chartType) {\n        var eventName = renderUtil.makeCustomEventName('show', chartType, 'animation');\n\n        this.fire(eventName, indexes);\n    },\n\n    /**\n     * Fire custom event hideAnimation.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @param {string} chartType chart type\n     * @private\n     */\n    _fireHideAnimation: function(indexes, chartType) {\n        var eventName = renderUtil.makeCustomEventName('hide', chartType, 'animation');\n\n        this.fire(eventName, indexes);\n    },\n\n    /**\n     * Set data indexes.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @param {{groupIndex: number, index:number}} indexes indexes\n     * @private\n     */\n    _setIndexesCustomAttribute: function(elTooltip, indexes) {\n        elTooltip.setAttribute('data-groupIndex', indexes.groupIndex);\n        elTooltip.setAttribute('data-index', indexes.index);\n    },\n\n    /**\n     * Get data indexes\n     * @param {HTMLElement} elTooltip tooltip element\n     * @returns {{groupIndex: number, index: number}} indexes\n     * @private\n     */\n    _getIndexesCustomAttribute: function(elTooltip) {\n        var groupIndex = elTooltip.getAttribute('data-groupIndex');\n        var index = elTooltip.getAttribute('data-index');\n        var indexes = null;\n\n        if (!tui.util.isNull(groupIndex) &amp;&amp; !tui.util.isNull(index)) {\n            indexes = {\n                groupIndex: parseInt(groupIndex, 10),\n                index: parseInt(index, 10)\n            };\n        }\n\n        return indexes;\n    },\n\n    /**\n     * Set showed custom attribute.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @param {boolean} status whether showed or not\n     * @private\n     */\n    _setShowedCustomAttribute: function(elTooltip, status) {\n        elTooltip.setAttribute('data-showed', status);\n    },\n\n    /**\n     * Whether showed tooltip or not.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @returns {boolean} whether showed tooltip or not\n     * @private\n     */\n    _isShowedTooltip: function(elTooltip) {\n        var isShowed = elTooltip.getAttribute('data-showed');\n\n        return isShowed === 'true' || isShowed === true; // ie7에서는 boolean형태의 true를 반환함\n    },\n\n    /**\n     * Make left position of not bar chart.\n     * @param {number} baseLeft base left\n     * @param {string} alignOption align option\n     * @param {number} minusWidth minus width\n     * @param {number} lineGap line gap\n     * @returns {number} left position value\n     * @private\n     */\n    _makeLeftPositionOfNotBarChart: function(baseLeft, alignOption, minusWidth, lineGap) {\n        var left = baseLeft;\n\n        if (alignOption.indexOf('left') > -1) {\n            left -= minusWidth + lineGap;\n        } else if (alignOption.indexOf('center') > -1) {\n            left -= minusWidth / 2;\n        } else {\n            left += lineGap;\n        }\n\n        return left;\n    },\n\n    /**\n     * Make top position of not bar chart.\n     * @param {number} baseTop base top\n     * @param {string} alignOption align option\n     * @param {number} tooltipHeight tooltip height\n     * @param {number} lineGap line gap\n     * @returns {number} top position value\n     * @private\n     */\n    _makeTopPositionOfNotBarChart: function(baseTop, alignOption, tooltipHeight, lineGap) {\n        var top = baseTop;\n\n        if (alignOption.indexOf('bottom') > -1) {\n            top += tooltipHeight + lineGap;\n        } else if (alignOption.indexOf('middle') > -1) {\n            top += tooltipHeight / 2;\n        } else {\n            top -= chartConst.TOOLTIP_GAP;\n        }\n\n        return top;\n    },\n\n    /**\n     * Make tooltip position for not bar chart.\n     * @param {object} params parameters\n     *      @param {{bound: object}} params.data graph information\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.alignOption position option (ex: 'left top')\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _makeTooltipPositionForNotBarChart: function(params) {\n        var bound = params.bound,\n            positionOption = params.positionOption,\n            minusWidth = params.dimension.width - (bound.width || 0),\n            lineGap = bound.width ? 0 : chartConst.TOOLTIP_GAP,\n            alignOption = params.alignOption || '',\n            tooltipHeight = params.dimension.height,\n            baseLeft = bound.left + positionOption.left,\n            baseTop = bound.top - tooltipHeight + positionOption.top;\n\n        return {\n            left: this._makeLeftPositionOfNotBarChart(baseLeft, alignOption, minusWidth, lineGap),\n            top: this._makeTopPositionOfNotBarChart(baseTop, alignOption, tooltipHeight, lineGap)\n        };\n    },\n\n    /**\n     * Make tooltip position to event position.\n     * @param {object} params parameters\n     *      @param {{left: number, top: number}} params.bound bound\n     *      @param {{left: number, top: number}} params.mousePosition mouse position\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _makeTooltipPositionToMousePosition: function(params) {\n        params.bound = params.bound || {};\n        tui.util.extend(params.bound, params.mousePosition);\n\n        return this._makeTooltipPositionForNotBarChart(params);\n    },\n\n    /**\n     * Make left position for bar chart.\n     * @param {number} baseLeft base left\n     * @param {string} alignOption align option\n     * @param {number} tooltipWidth tooltip width\n     * @returns {number} left position value\n     * @private\n     */\n    _makeLeftPositionForBarChart: function(baseLeft, alignOption, tooltipWidth) {\n        var left = baseLeft;\n\n        if (alignOption.indexOf('left') > -1) {\n            left -= tooltipWidth;\n        } else if (alignOption.indexOf('center') > -1) {\n            left -= tooltipWidth / 2;\n        } else {\n            left += chartConst.TOOLTIP_GAP;\n        }\n\n        return left;\n    },\n\n    /**\n     * Make top position for bar chart.\n     * @param {number} baseTop base top\n     * @param {string} alignOption align option\n     * @param {number} minusHeight minus width\n     * @returns {number} top position value\n     * @private\n     */\n    _makeTopPositionForBarChart: function(baseTop, alignOption, minusHeight) {\n        var top = baseTop;\n\n        if (alignOption.indexOf('top') > -1) {\n            top -= minusHeight;\n        } else if (alignOption.indexOf('middle') > -1) {\n            top -= minusHeight / 2;\n        }\n\n        return top;\n    },\n\n    /**\n     * Make tooltip position for bar chart.\n     * @param {object} params parameters\n     *      @param {{bound: object}} params.data graph information\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.alignOption position option (ex: 'left top')\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _makeTooltipPositionForBarChart: function(params) {\n        var bound = params.bound,\n            positionOption = params.positionOption,\n            minusHeight = params.dimension.height - (bound.height || 0),\n            alignOption = params.alignOption || '',\n            tooltipWidth = params.dimension.width,\n            baseLeft = bound.left + bound.width + positionOption.left,\n            baseTop = bound.top + positionOption.top;\n\n        return {\n            left: this._makeLeftPositionForBarChart(baseLeft, alignOption, tooltipWidth),\n            top: this._makeTopPositionForBarChart(baseTop, alignOption, minusHeight)\n        };\n    },\n\n    /**\n     * Make tooltip position for treemap chart.\n     * @param {object} params parameters\n     *      @param {{bound: object}} params.data - graph information\n     *      @param {{width: number, height: number}} params.dimension - tooltip dimension\n     * @returns {{left: number, top: number}}\n     * @private\n     */\n    _makeTooltipPositionForTreemapChart: function(params) {\n        var bound = params.bound;\n        var positionOption = params.positionOption;\n        var labelHeight = renderUtil.getRenderedLabelHeight(chartConst.MAX_HEIGHT_WORLD, this.labelTheme);\n\n        return {\n            left: bound.left + ((bound.width - params.dimension.width) / 2) + positionOption.left,\n            top: bound.top + ((bound.height - labelHeight) / 2) - params.dimension.height + positionOption.top\n        };\n    },\n\n    /**\n     * Adjust position.\n     * @param {{width: number, height: number}} tooltipDimension tooltip dimension\n     * @param {{left: number, top: number}} position position\n     * @returns {{left: number, top: number}} adjusted position\n     * @private\n     */\n    _adjustPosition: function(tooltipDimension, position) {\n        var chartDimension = this.boundsMaker.getDimension('chart'),\n            areaPosition = this.boundsMaker.getPosition('tooltip');\n\n        position.left = Math.max(position.left, -areaPosition.left);\n        position.left = Math.min(position.left, chartDimension.width - areaPosition.left - tooltipDimension.width);\n        position.top = Math.max(position.top, -areaPosition.top);\n        position.top = Math.min(position.top, chartDimension.height - areaPosition.top - tooltipDimension.height);\n\n        return position;\n    },\n\n    /**\n     * Make tooltip position.\n     * @param {object} params parameters\n     *      @param {{left: number, top: number, width: number, height: number}} params.bound graph bound\n     *      @param {string} params.chartType chart type\n     *      @param {boolean} params.allowNegativeTooltip whether allow negative tooltip or not\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.alignOption position option (ex: 'left top')\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _makeTooltipPosition: function(params) {\n        var position = {},\n            sizeType, positionType, addPadding;\n\n        if (params.mousePosition) {\n            position = this._makeTooltipPositionToMousePosition(params);\n        } else {\n            if (predicate.isBarChart(params.chartType)) {\n                position = this._makeTooltipPositionForBarChart(params);\n                sizeType = 'width';\n                positionType = 'left';\n                addPadding = 1;\n            } else if (predicate.isTreemapChart(params.chartType)) {\n                position = this._makeTooltipPositionForTreemapChart(params);\n            } else {\n                position = this._makeTooltipPositionForNotBarChart(params);\n                sizeType = 'height';\n                positionType = 'top';\n                addPadding = -1;\n            }\n\n            if (params.allowNegativeTooltip) {\n                position = this._moveToSymmetry(position, {\n                    bound: params.bound,\n                    indexes: params.indexes,\n                    dimension: params.dimension,\n                    chartType: params.chartType,\n                    sizeType: sizeType,\n                    positionType: positionType,\n                    addPadding: addPadding\n                });\n            }\n\n            position = this._adjustPosition(params.dimension, position);\n        }\n\n        return position;\n    },\n\n    /**\n     * Move to symmetry.\n     * @param {{left: number, top: number}} position tooltip position\n     * @param {object} params parameters\n     *      @param {{left: number, top: number, width: number, height: number}} params.bound graph bound\n     *      @param {string} params.id tooltip id\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.sizeType size type (width or height)\n     *      @param {string} params.positionType position type (left or top)\n     *      @param {number} params.addPadding add padding\n     * @returns {{left: number, top: number}} moved position\n     * @private\n     */\n    _moveToSymmetry: function(position, params) {\n        var bound = params.bound;\n        var sizeType = params.sizeType;\n        var positionType = params.positionType;\n        var seriesName = params.seriesName || params.chartType;\n        var value = this.dataProcessor.getValue(params.indexes.groupIndex, params.indexes.index, seriesName);\n        var tooltipSizeHalf, barPosition, barSizeHalf, movedPositionValue;\n\n        if (value &lt; 0) {\n            tooltipSizeHalf = params.dimension[sizeType] / 2;\n            barPosition = bound[positionType];\n            barSizeHalf = bound[sizeType] / 2;\n            movedPositionValue = (barPosition + barSizeHalf - tooltipSizeHalf) * 2 - position[positionType];\n            position[positionType] = movedPositionValue;\n        }\n\n        return position;\n    },\n\n    /**\n     * Whether changed indexes or not.\n     * @param {{groupIndex: number, index: number}} prevIndexes prev indexes\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @returns {boolean} whether changed or not\n     * @private\n     */\n    _isChangedIndexes: function(prevIndexes, indexes) {\n        return !!prevIndexes &amp;&amp; (prevIndexes.groupIndex !== indexes.groupIndex || prevIndexes.index !== indexes.index);\n    },\n\n    /**\n     * Show tooltip.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @param {{indexes: {groupIndex: number, index: number}, bound: object}} params tooltip data\n     * @param {{left: number, top: number}} prevPosition prev position\n     * @private\n     */\n    _showTooltip: function(elTooltip, params, prevPosition) {\n        var indexes = params.indexes;\n        var prevIndexes = this._getIndexesCustomAttribute(elTooltip);\n        var offset = this.options.offset || {};\n        var positionOption = {};\n        var prevChartType, position;\n\n        if (this._isChangedIndexes(prevIndexes, indexes)) {\n            prevChartType = elTooltip.getAttribute('data-chart-type');\n            this._fireHideAnimation(prevIndexes, prevChartType);\n        }\n\n        elTooltip.innerHTML = this._makeSingleTooltipHtml(params.seriesName || params.chartType, indexes);\n\n        elTooltip.setAttribute('data-chart-type', params.chartType);\n        this._setIndexesCustomAttribute(elTooltip, indexes);\n        this._setShowedCustomAttribute(elTooltip, true);\n\n        this._fireBeforeShowTooltip(indexes);\n\n        dom.addClass(elTooltip, 'show');\n\n        positionOption.left = offset.x || 0;\n        positionOption.top = offset.y || 0;\n\n        position = this._makeTooltipPosition(tui.util.extend({\n            dimension: this.getTooltipDimension(elTooltip),\n            positionOption: positionOption,\n            alignOption: this.options.align || ''\n        }, params));\n\n        this._moveToPosition(elTooltip, position, prevPosition);\n        this._fireShowAnimation(indexes, params.chartType);\n        this._fireAfterShowTooltip(indexes, {\n            element: elTooltip,\n            position: position\n        });\n    },\n\n    /**\n     * To call beforeShowTooltip callback of userEvent.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @private\n     */\n    _fireBeforeShowTooltip: function(indexes) {\n        var params = this._makeShowTooltipParams(indexes);\n\n        this.userEvent.fire('beforeShowTooltip', params);\n    },\n\n    /**\n     * To call afterShowTooltip callback of userEvent.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @param {object} additionParams addition parameters\n     * @private\n     */\n    _fireAfterShowTooltip: function(indexes, additionParams) {\n        var params = this._makeShowTooltipParams(indexes, additionParams);\n\n        this.userEvent.fire('afterShowTooltip', params);\n    },\n\n    /**\n     * Execute hiding tooltip.\n     * @param {HTMLElement} tooltipElement tooltip element\n     * @private\n     */\n    _executeHidingTooltip: function(tooltipElement) {\n        dom.removeClass(tooltipElement, 'show');\n        tooltipElement.removeAttribute('data-groupIndex');\n        tooltipElement.removeAttribute('data-index');\n        tooltipElement.style.cssText = '';\n    },\n\n    /**\n     * Hide tooltip.\n     * @param {HTMLElement} tooltipElement tooltip element\n     * @private\n     */\n    _hideTooltip: function(tooltipElement) {\n        var self = this;\n        var indexes = this._getIndexesCustomAttribute(tooltipElement);\n        var chartType = tooltipElement.getAttribute('data-chart-type');\n\n        if (predicate.isMousePositionChart(chartType)) {\n            this._executeHidingTooltip(tooltipElement);\n        } else if (chartType) {\n            this._setShowedCustomAttribute(tooltipElement, false);\n            this._fireHideAnimation(indexes, chartType);\n\n            if (this._isChangedIndexes(this.prevIndexes, indexes)) {\n                delete this.prevIndexes;\n            }\n\n            setTimeout(function() {\n                if (self._isShowedTooltip(tooltipElement)) {\n                    return;\n                }\n\n                self._executeHidingTooltip(tooltipElement);\n            }, chartConst.HIDE_DELAY);\n        }\n    },\n\n    /**\n     * On show tooltip container.\n     */\n    onShowTooltipContainer: function() {\n        this.tooltipContainer.style.zIndex = chartConst.TOOLTIP_ZINDEX;\n    },\n\n    /**\n     * On hide tooltip container.\n     */\n    onHideTooltipContainer: function() {\n        this.tooltipContainer.style.zIndex = 0;\n    },\n\n    /**\n     * Mix in.\n     * @param {function} func target function\n     * @ignore\n     */\n    mixin: function(func) {\n        tui.util.extend(func.prototype, this);\n    }\n};\n\nmodule.exports = singleTooltipMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"