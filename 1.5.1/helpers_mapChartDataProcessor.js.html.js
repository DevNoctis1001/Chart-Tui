tui.util.defineNamespace("fedoc.content", {});
fedoc.content["helpers_mapChartDataProcessor.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Data processor for map chart.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar DataProcessor = require('./dataProcessor'),\n    renderUtil = require('./renderUtil');\n\n/**\n * Raw data.\n * @typedef {Array.&lt;{name: string, data: Array.&lt;number>}>} rawSeriesData\n */\n\n/**\n * @classdesc Data processor for map chart.\n * @class MapChartDataProcessor\n */\nvar MapChartDataProcessor = tui.util.defineClass(DataProcessor, /** @lends MapChartDataProcessor.prototype */{\n    /**\n     * Process raw data.\n     * @param {{series: Array.&lt;{code: string, name: ?string, data: number}>}} rawData raw data\n     * @param {{chart: {format: string}}} options options\n     */\n    process: function(rawData, options) {\n        var seriesData = rawData.series,\n            valueMap = this._makeValueMap(seriesData, options);\n\n        this.data = {\n            valueMap: valueMap\n        };\n    },\n\n    /**\n     * Make value map.\n     * @param {Array.&lt;{code: string, name: ?string, data: number}>} rawSeriesData raw series data\n     * @param {{chart: {format: string}}} options options\n     * @returns {{value: number, formattedValue: string, name: ?string}} value map\n     * @private\n     */\n    _makeValueMap: function(rawSeriesData, options) {\n        var valueMap = {},\n            format = options.chart &amp;&amp; options.chart.format || '',\n            formatFunctions = this._findFormatFunctions(format);\n\n        tui.util.forEachArray(rawSeriesData, function(datum) {\n            var result = {\n                value: datum.data,\n                formattedValue: renderUtil.formatValue(datum.data, formatFunctions)\n            };\n\n            if (datum.name) {\n                result.name = datum.name;\n            }\n\n            if (datum.labelCoordinate) {\n                result.labelCoordinate = datum.labelCoordinate;\n            }\n\n            valueMap[datum.code] = result;\n        });\n\n        return valueMap;\n    },\n\n    /**\n     * Get value map.\n     * @returns {number} value\n     */\n    getValueMap: function() {\n        return this.data.valueMap;\n    },\n\n    /**\n     * Get values.\n     * @returns {Array.&lt;number>} picked values.\n     */\n    getValues: function() {\n        return tui.util.pluck(this.data.valueMap, 'value');\n    },\n\n    /**\n     * Get valueMap datum.\n     * @param {string} code map code\n     * @returns {{code: string, name: string, formattedValue: number, labelCoordinate: {x: number, y: number}}} valueMap datum\n     */\n    getValueMapDatum: function(code) {\n        return this.data.valueMap[code];\n    },\n\n    /**\n     * Make percent value.\n     * @param {{min: number, max: number}} limit axis limit\n     */\n    registerPercentValues: function(limit) {\n        var min = limit.min,\n            max = limit.max - min;\n        tui.util.forEach(this.getValueMap(), function(map) {\n            map.percentValue = (map.value - min) / max;\n        }, this);\n    }\n});\n\nmodule.exports = MapChartDataProcessor;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"