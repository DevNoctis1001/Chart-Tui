tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_barTypeMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview barTypeMixer is mixer of bar type chart(bar, column).\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    rawDataHandler = require('../helpers/rawDataHandler'),\n    predicate = require('../helpers/predicate');\n\n/**\n * barTypeMixer is mixer of bar type chart(bar, column).\n * @mixin\n */\nvar barTypeMixer = {\n    /**\n     * Make minus values.\n     * @param {Array.&lt;number>} data number data\n     * @returns {Array} minus values\n     * @private\n     */\n    _makeMinusValues: function(data) {\n        return tui.util.map(data, function(value) {\n            return value &lt; 0 ? 0 : -value;\n        });\n    },\n\n    /**\n     * Make plus values.\n     * @param {Array.&lt;number>} data number data\n     * @returns {Array} plus values\n     * @private\n     */\n    _makePlusValues: function(data) {\n        return tui.util.map(data, function(value) {\n            return value &lt; 0 ? 0 : value;\n        });\n    },\n\n    /**\n     * Make normal diverging raw series data.\n     * @param {{data: Array.&lt;number>}} rawSeriesData raw series data\n     * @returns {{data: Array.&lt;number>}} changed raw series data\n     * @private\n     */\n    _makeNormalDivergingRawSeriesData: function(rawSeriesData) {\n        rawSeriesData.length = Math.min(rawSeriesData.length, 2);\n\n        rawSeriesData[0].data = this._makeMinusValues(rawSeriesData[0].data);\n\n        if (rawSeriesData[1]) {\n            rawSeriesData[1].data = this._makePlusValues(rawSeriesData[1].data);\n        }\n\n        return rawSeriesData;\n    },\n\n    /**\n     * Make stacked diverging raw series data.\n     * @param {{data: Array.&lt;number>, stack: string}} rawSeriesData raw series data\n     * @returns {{data: Array.&lt;number>}} changed raw series data\n     * @private\n     */\n    _makeStackedDivergingRawSeriesData: function(rawSeriesData) {\n        var self = this,\n            stacks = rawDataHandler.pickStacks(rawSeriesData),\n            result = [],\n            leftStack = stacks[0],\n            rightStack = stacks[1];\n\n        rawSeriesData = rawDataHandler.sortSeriesData(rawSeriesData, stacks);\n\n        tui.util.forEachArray(rawSeriesData, function(seriesDatum) {\n            var stack = seriesDatum.stack || chartConst.DEFAULT_STACK;\n            if (stack === leftStack) {\n                seriesDatum.data = self._makeMinusValues(seriesDatum.data);\n                result.push(seriesDatum);\n            } else if (stack === rightStack) {\n                seriesDatum.data = self._makePlusValues(seriesDatum.data);\n                result.push(seriesDatum);\n            }\n        });\n        return result;\n    },\n\n    /**\n     * Make raw series data for diverging.\n     * @param {{data: Array.&lt;number>, stack: string}} rawSeriesData raw series data\n     * @param {?string} stackedOption stacked option\n     * @returns {{data: Array.&lt;number>}} changed raw series data\n     * @private\n     */\n    _makeRawSeriesDataForDiverging: function(rawSeriesData, stackedOption) {\n        if (predicate.isValidStackedOption(stackedOption)) {\n            rawSeriesData = this._makeStackedDivergingRawSeriesData(rawSeriesData);\n        } else {\n            rawSeriesData = this._makeNormalDivergingRawSeriesData(rawSeriesData);\n        }\n\n        return rawSeriesData;\n    },\n\n    /**\n     * Sort raw series data from stacks.\n     * @param {Array.&lt;{data: Array.&lt;number>, stack: string}>} rawSeriesData raw series data\n     * @returns {Array.&lt;{data: Array.&lt;number>, stack: string}>}\n     * @private\n     */\n    _sortRawSeriesData: function(rawSeriesData) {\n        var stacks = rawDataHandler.pickStacks(rawSeriesData);\n\n        return rawDataHandler.sortSeriesData(rawSeriesData, stacks);\n    },\n\n    /**\n     * Mix in.\n     * @param {function} func target function\n     * @ignore\n     */\n    mixin: function(func) {\n        tui.util.extend(func.prototype, this);\n    }\n};\n\nmodule.exports = barTypeMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"