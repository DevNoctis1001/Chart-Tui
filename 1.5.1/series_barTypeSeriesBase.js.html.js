tui.util.defineNamespace("fedoc.content", {});
fedoc.content["series_barTypeSeriesBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Column chart series component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    predicate = require('../helpers/predicate'),\n    renderUtil = require('../helpers/renderUtil');\n\nvar BarTypeSeriesBase = tui.util.defineClass(/** @lends BarTypeSeriesBase.prototype */ {\n    /**\n     * Make series data.\n     * @returns {object} add data\n     * @private\n     * @override\n     */\n    _makeSeriesData: function() {\n        this.groupBounds = this._makeBounds(this.boundsMaker.getDimension('series'));\n\n        return {\n            groupBounds: this.groupBounds,\n            itemGroup: this.dataProcessor.getItemGroup()\n        };\n    },\n\n    /**\n     * Make bar gutter.\n     * @param {number} groupSize bar group size\n     * @param {number} itemCount group item count\n     * @returns {number} bar gutter\n     * @private\n     */\n    _makeBarGutter: function(groupSize, itemCount) {\n        var baseSize = groupSize / (itemCount + 1) / 2,\n            standardSize = 6,\n            gutter;\n\n        if (baseSize &lt;= 2) {\n            gutter = 0;\n        } else if (baseSize &lt;= standardSize) {\n            gutter = 2;\n        } else {\n            gutter = 4;\n        }\n        return gutter;\n    },\n\n    /**\n     * Make bar size.\n     * @param {number} groupSize bar group size\n     * @param {number} barGutter bar padding\n     * @param {number} itemCount group item count\n     * @returns {number} bar size (width or height)\n     * @private\n     */\n    _makeBarSize: function(groupSize, barGutter, itemCount) {\n        return (groupSize - (barGutter * (itemCount - 1))) / (itemCount + 1);\n    },\n\n    /**\n     * Make option size.\n     * @param {number} barSize bar size\n     * @param {?number} optionBarWidth barWidth option\n     * @returns {number} option size\n     * @private\n     */\n    _makeOptionSize: function(barSize, optionBarWidth) {\n        var optionsSize = 0;\n        if (optionBarWidth) {\n            optionsSize = tui.util.min([barSize, optionBarWidth]);\n        }\n        return optionsSize;\n    },\n\n    /**\n     * Calculate difference between optionSize and barSize.\n     * @param {number} barSize bar size\n     * @param {number} optionSize option size\n     * @param {number} itemCount item count\n     * @returns {number} addition padding\n     * @private\n     */\n    _calculateAdditionalPosition: function(barSize, optionSize, itemCount) {\n        var additionalPosition = 0;\n\n        if (optionSize &amp;&amp; optionSize &lt; barSize) {\n            additionalPosition = (barSize / 2) + ((barSize - optionSize) * itemCount / 2);\n        }\n\n        return additionalPosition;\n    },\n\n    /**\n     * Make base data for making bound.\n     * @param {number} baseGroupSize base group size\n     * @param {number} baseBarSize base bar size\n     * @returns {{\n     *      baseBarSize: number,\n     *      groupSize: number,\n     *      barSize: number,\n     *      step: number,\n     *      firstAdditionalPosition: number,\n     *      additionalPosition: number,\n     *      basePosition: number\n     * }}\n     * @private\n     */\n    _makeBaseDataForMakingBound: function(baseGroupSize, baseBarSize) {\n        var isStacked = predicate.isValidStackedOption(this.options.stacked),\n            itemGroup = this.dataProcessor.getItemGroup(),\n            groupSize = baseGroupSize / itemGroup.getGroupCount(this.chartType),\n            firstAdditionalPosition = 0,\n            itemCount, barGutter, barSize, optionSize, additionalPosition, basePosition;\n\n        if (!isStacked) {\n            itemCount = itemGroup.getFirstItems(this.chartType).getItemCount();\n        } else {\n            itemCount = this.options.diverging ? 1 : this.dataProcessor.getStackCount();\n        }\n\n        barGutter = this._makeBarGutter(groupSize, itemCount);\n        barSize = this._makeBarSize(groupSize, barGutter, itemCount);\n        optionSize = this._makeOptionSize(barSize, this.options.barWidth);\n        additionalPosition = this._calculateAdditionalPosition(barSize, optionSize, itemCount);\n        barSize = optionSize || barSize;\n        basePosition = this._getLimitDistanceFromZeroPoint(baseBarSize, this.data.limit).toMin;\n\n        if (predicate.isColumnChart(this.chartType)) {\n            basePosition = baseBarSize - basePosition;\n        }\n\n        if (!this.options.barWidth || barSize &lt; this.options.barWidth) {\n            firstAdditionalPosition = (barSize / 2) + additionalPosition;\n        }\n\n        return {\n            baseBarSize: baseBarSize,\n            groupSize: groupSize,\n            barSize: barSize,\n            step: barGutter + barSize,\n            firstAdditionalPosition: firstAdditionalPosition,\n            additionalPosition: additionalPosition,\n            basePosition: basePosition\n        };\n    },\n\n    /**\n     * Make html for series labels\n     * @param {number} groupIndex index of groups\n     * @param {number} labelHeight label height\n     * @param {Item} item item\n     * @param {number} index index of items\n     * @returns {string}\n     * @private\n     */\n    _makeSeriesLabelsHtml: function(groupIndex, labelHeight, item, index) {\n        var bound = this.seriesData.groupBounds[groupIndex][index].end,\n            position = this.makeSeriesRenderingPosition(bound, labelHeight, item.value, item.formattedEnd),\n            labelHtml = this._makeSeriesLabelHtml(position, item.formattedEnd, index);\n\n        if (item.isRange) {\n            position = this.makeSeriesRenderingPosition(bound, labelHeight, item.value, item.formattedStart, true);\n            labelHtml += this._makeSeriesLabelHtml(position, item.formattedStart, index);\n        }\n\n        return labelHtml;\n    },\n\n    /**\n     * Render normal series label.\n     * @param {HTMLElement} elSeriesLabelArea series label area element\n     * @private\n     */\n    _renderNormalSeriesLabel: function(elSeriesLabelArea) {\n        var self = this,\n            firstFormattedValue = this.dataProcessor.getFirstFormattedValue(this.chartType),\n            labelHeight = renderUtil.getRenderedLabelHeight(firstFormattedValue, this.theme.label),\n            itemGroup = this.dataProcessor.getItemGroup(),\n            html;\n\n        html = itemGroup.map(function(items, groupIndex) {\n            var makeSeriesLabelsHtml = tui.util.bind(self._makeSeriesLabelsHtml, self, groupIndex, labelHeight);\n\n            return items.map(makeSeriesLabelsHtml).join('');\n        }, this.chartType).join('');\n\n        elSeriesLabelArea.innerHTML = html;\n    },\n\n    /**\n     * Make sum values.\n     * @param {Array.&lt;number>} values values\n     * @returns {number} sum result.\n     */\n    _makeSumValues: function(values) {\n        var sum = tui.util.sum(values);\n\n        return renderUtil.formatValue(sum, this.dataProcessor.getFormatFunctions());\n    },\n\n    /**\n     * Make stacked label position.\n     * @param {{width: number, height: number, left: number, top: number}} bound element bound\n     * @param {string} formattedValue formatted value\n     * @param {number} labelHeight label height\n     * @returns {{left: number, top: number}} position\n     * @private\n     */\n    _makeStackedLabelPosition: function(bound, formattedValue, labelHeight) {\n        var labelWidth = renderUtil.getRenderedLabelWidth(formattedValue, this.theme.label),\n            left = bound.left + ((bound.width - labelWidth + chartConst.TEXT_PADDING) / 2),\n            top = bound.top + ((bound.height - labelHeight + chartConst.TEXT_PADDING) / 2);\n\n        return {\n            left: left,\n            top: top\n        };\n    },\n\n    /**\n     * Make stacked labels html.\n     * @param {object} params parameters\n     *      @param {number} params.groupIndex group index\n     *      @param {Array.&lt;object>} params.bounds bounds,\n     *      @param {number} params.labelHeight label height\n     * @returns {string} labels html\n     * @private\n     */\n    _makeStackedLabelsHtml: function(params) {\n        var self = this,\n            items = params.items,\n            labelHeight = params.labelHeight,\n            htmls, plusBound, minusBound, values;\n\n        htmls = items.map(function(item, index) {\n            var bound = params.bounds[index],\n                labelHtml = '',\n                boundEnd, position;\n\n            if (bound &amp;&amp; item) {\n                boundEnd = bound.end;\n                position = self._makeStackedLabelPosition(boundEnd, item.formattedValue, params.labelHeight);\n                labelHtml = self._makeSeriesLabelHtml(position, item.formattedValue, index);\n            }\n\n            if (item.value > 0) {\n                plusBound = boundEnd;\n            } else if (item.value &lt; 0) {\n                minusBound = boundEnd;\n            }\n\n            return labelHtml;\n        });\n\n        if (this.options.stacked === 'normal') {\n            values = items.pluck('value');\n            htmls.push(this._makePlusSumLabelHtml(values, plusBound, labelHeight));\n            htmls.push(this._makeMinusSumLabelHtml(values, minusBound, labelHeight));\n        }\n\n        return htmls.join('');\n    },\n\n    /**\n     * Render stacked series label.\n     * @param {HTMLElement} elSeriesLabelArea series label area element\n     * @private\n     */\n    _renderStackedSeriesLabel: function(elSeriesLabelArea) {\n        var self = this,\n            groupBounds = this.seriesData.groupBounds,\n            itemGroup = this.dataProcessor.getItemGroup(),\n            firstFormattedValue = this.dataProcessor.getFirstFormattedValue(this.chartType),\n            labelHeight = renderUtil.getRenderedLabelHeight(firstFormattedValue, this.theme.label),\n            html;\n\n        html = itemGroup.map(function(items, index) {\n            var labelsHtml = self._makeStackedLabelsHtml({\n                groupIndex: index,\n                items: items,\n                bounds: groupBounds[index],\n                labelHeight: labelHeight\n            });\n            return labelsHtml;\n        }, this.chartType).join('');\n\n        elSeriesLabelArea.innerHTML = html;\n    },\n\n    /**\n     * Render series label.\n     * @param {HTMLElement} elSeriesLabelArea series label area element\n     * @private\n     */\n    _renderSeriesLabel: function(elSeriesLabelArea) {\n        if (this.options.stacked) {\n            this._renderStackedSeriesLabel(elSeriesLabelArea);\n        } else {\n            this._renderNormalSeriesLabel(elSeriesLabelArea);\n        }\n    }\n});\n\nBarTypeSeriesBase.mixin = function(func) {\n    tui.util.extend(func.prototype, BarTypeSeriesBase.prototype);\n};\n\nmodule.exports = BarTypeSeriesBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"