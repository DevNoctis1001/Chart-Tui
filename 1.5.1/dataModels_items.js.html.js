tui.util.defineNamespace("fedoc.content", {});
fedoc.content["dataModels_items.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Items has items(Item instance).\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar Items = tui.util.defineClass(/** @lends Items.prototype */{\n    /**\n     * Items.\n     * @constructs Items\n     * @param {Items} items - items\n     */\n    init: function(items) {\n        /**\n         * items\n         * @type {Array.&lt;Item>}\n         */\n        this.items = items;\n\n        /**\n         * item vlaues.\n         * @type {Array.&lt;number>}\n         */\n        this.values = null;\n    },\n\n    /**\n     * Get item count.\n     * @returns {number}\n     */\n    getItemCount: function() {\n        return this.items.length;\n    },\n\n    /**\n     * Get item.\n     * @param {number} index - index of items\n     * @returns {Item}\n     */\n    getItem: function(index) {\n        return this.items[index];\n    },\n\n    /**\n     * Make values of item.\n     * @returns {Array.&lt;number>}\n     * @private\n     */\n    _makeValues: function() {\n        var values = [];\n\n        this.each(function(item) {\n            values.push(item.value);\n            if (!tui.util.isNull(item.start)) {\n                values.push(item.start);\n            }\n        });\n\n        return values;\n    },\n\n    /**\n     * Get\n     * @returns {Array}\n     */\n    getValues: function() {\n        if (!this.values) {\n            this.values = this._makeValues();\n        }\n\n        return this.values;\n    },\n\n    /**\n     * Make values map per stack.\n     * @returns {object}\n     * @private\n     */\n    _makeValuesMapPerStack: function() {\n        var valuesMap = {};\n\n        this.each(function(item) {\n            if (!valuesMap[item.stack]) {\n                valuesMap[item.stack] = [];\n            }\n            valuesMap[item.stack].push(item.value);\n        });\n\n        return valuesMap;\n    },\n\n    /**\n     * Make sum map per stack.\n     * @returns {object} sum map\n     * @private\n     */\n    _makeSumMapPerStack: function() {\n        var valuesMap = this.getValuesMapPerStack(),\n            sumMap = {};\n\n        tui.util.forEach(valuesMap, function(values, key) {\n            sumMap[key] = tui.util.sum(tui.util.map(values, function(value) {\n                return Math.abs(value);\n            }));\n        });\n\n        return sumMap;\n    },\n\n    /**\n     * Get values map per stack.\n     * @returns {*|Object}\n     */\n    getValuesMapPerStack: function() {\n        if (!this.valuesMap) {\n            this.valuesMap = this._makeValuesMapPerStack();\n        }\n\n        return this.valuesMap;\n    },\n\n    /**\n     * Add start to all item.\n     * @param {number} start start value\n     */\n    addStartToAllItem: function(start) {\n        this.each(function(item) {\n            item.addStart(start);\n        });\n    },\n\n    /**\n     * Add ratios when percent stacked.\n     * @param {number} baseRatio - base ratio\n     */\n    addRatiosWhenPercentStacked: function(baseRatio) {\n        var sumMap = this._makeSumMapPerStack();\n\n        this.each(function(item) {\n            var dividingNumber = sumMap[item.stack];\n\n            item.addRatio(dividingNumber, 0, baseRatio);\n        });\n    },\n\n    /**\n     * Add ratios when diverging stacked.\n     * @param {number} plusSum - sum of plus number\n     * @param {number} minusSum - sum of minus number\n     */\n    addRatiosWhenDivergingStacked: function(plusSum, minusSum) {\n        this.each(function(item) {\n            var dividingNumber = (item.value >= 0) ? plusSum : minusSum;\n\n            item.addRatio(dividingNumber, 0, 0.5);\n        });\n    },\n\n    /**\n     * Add ratios.\n     * @param {number} divNumber dividing number\n     * @param {number} subValue subtraction value\n     */\n    addRatios: function(divNumber, subValue) {\n        this.each(function(item) {\n            item.addRatio(divNumber, subValue);\n        });\n    },\n\n    /**\n     * Traverse items and executes iteratee function.\n     * @param {function} iteratee - iteratee function\n     */\n    each: function(iteratee) {\n        tui.util.forEachArray(this.items, iteratee);\n    },\n\n    /**\n     * Traverse items and returns to result of execution about iteratee function.\n     * @param {function} iteratee - iteratee function\n     * @returns {Array}\n     */\n    map: function(iteratee) {\n        return tui.util.map(this.items, iteratee);\n    },\n\n    /**\n     * Traverse items and returns to picked result at item.\n     * @param {string} key key for pick\n     * @returns {Array}\n     */\n    pluck: function(key) {\n        return tui.util.pluck(this.items, key);\n    }\n});\n\nmodule.exports = Items;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"