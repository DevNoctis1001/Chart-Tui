tui.util.defineNamespace("fedoc.content", {});
fedoc.content["tooltips_tooltip.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Tooltip component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar TooltipBase = require('./tooltipBase'),\n    singleTooltipMixer = require('./singleTooltipMixer'),\n    chartConst = require('../const'),\n    tooltipTemplate = require('./tooltipTemplate');\n\n/**\n * @classdesc Tooltip component.\n * @class Tooltip\n */\nvar Tooltip = tui.util.defineClass(TooltipBase, /** @lends Tooltip.prototype */ {\n    /**\n     * Tooltip component.\n     * @constructs Tooltip\n     * @param {object} params parameters\n     *      @param {BoundsMaker} params.boundsMaker bounds maker\n     *      @param {object} params.theme axis theme\n     */\n    init: function(params) {\n        TooltipBase.call(this, params);\n    },\n\n    /**\n     * Make tooltip html.\n     * @param {string} category category\n     * @param {{value: string, legend: string, chartType: string, suffix: ?string}} item item data\n     * @returns {string} tooltip html\n     * @private\n     */\n    _makeTooltipHtml: function(category, item) {\n        return tooltipTemplate.tplDefault(tui.util.extend({\n            category: category || ''\n        }, item));\n    },\n\n    /**\n     * Make single tooltip html.\n     * @param {string} chartType chart type\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @returns {string} tooltip html\n     * @private\n     */\n    _makeSingleTooltipHtml: function(chartType, indexes) {\n        var data = tui.util.pick(this.data, chartType, indexes.groupIndex, indexes.index);\n        return this.templateFunc(data.category, {\n            value: data.value,\n            legend: data.legend,\n            suffix: this.suffix\n        });\n    },\n\n    /**\n     * Set default align option of tooltip.\n     * @private\n     * @override\n     */\n    _setDefaultTooltipPositionOption: function() {\n        if (this.options.align) {\n            return;\n        }\n\n        if (this.isVertical) {\n            this.options.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;\n        } else {\n            this.options.align = chartConst.TOOLTIP_DEFAULT_HORIZONTAL_ALIGN_OPTION;\n        }\n    },\n\n    /**\n     * Make parameters for show tooltip user event.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @param {object} additionParams addition parameters\n     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} parameters for show tooltip\n     * @private\n     */\n    _makeShowTooltipParams: function(indexes, additionParams) {\n        var legendIndex = indexes.index,\n            legendData = this.dataProcessor.getLegendData(legendIndex),\n            params;\n\n        params = tui.util.extend({\n            chartType: legendData.chartType,\n            legend: legendData.label,\n            legendIndex: legendIndex,\n            index: indexes.groupIndex\n        }, additionParams);\n        return params;\n    },\n\n    /**\n     * Make tooltip data.\n     * @returns {Array.&lt;object>} tooltip data\n     * @override\n     */\n    _makeTooltipData: function() {\n        var self = this,\n            categories = this.dataProcessor.getCategories(),\n            itemGroup = this.dataProcessor.getItemGroup(),\n            orgLegendLabels = this.dataProcessor.getLegendLabels(),\n            legendLabels = {},\n            tooltipData = {};\n\n        if (tui.util.isArray(orgLegendLabels)) {\n            legendLabels[this.chartType] = orgLegendLabels;\n        } else {\n            legendLabels = orgLegendLabels;\n        }\n\n        itemGroup.each(function(items, groupIndex, chartType) {\n            var datum;\n\n            chartType = chartType || self.chartType;\n\n            if (!tooltipData[chartType]) {\n                tooltipData[chartType] = [];\n            }\n\n            datum = items.map(function(item, index) {\n                return {\n                    category: categories ? categories[groupIndex] : '',\n                    legend: legendLabels[chartType][index],\n                    value: item.formattedValue\n                };\n            });\n\n            tooltipData[chartType].push(datum);\n        });\n\n        return tooltipData;\n    }\n});\n\nsingleTooltipMixer.mixin(Tooltip);\nmodule.exports = Tooltip;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"