tui.util.defineNamespace("fedoc.content", {});
fedoc.content["tooltips_tooltipBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview TooltipBase is base class of tooltip components.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil');\n\nvar TooltipBase = tui.util.defineClass(/** @lends TooltipBase.prototype */ {\n    /**\n     * TooltipBase is base class of tooltip components.\n     * @constructs TooltipBase\n     * @param {object} params parameters\n     *      @param {array.&lt;number>} params.values converted values\n     *      @param {object} params.bound axis bound\n     *      @param {object} params.theme axis theme\n     */\n    init: function(params) {\n        tui.util.extend(this, params);\n        /**\n         * className\n         * @type {string}\n         */\n        this.className = 'tui-chart-tooltip-area';\n\n        /**\n         * Tooltip container.\n         * @type {HTMLElement}\n         */\n        this.tooltipContainer = null;\n\n        /**\n         * TooltipBase base data.\n         * @type {array.&lt;array.&lt;object>>}\n         */\n        this.data = this.makeTooltipData();\n\n        this.suffix = this.options.suffix ? '&amp;nbsp;' + this.options.suffix : '';\n\n        this.templateFunc = this.options.template || tui.util.bind(this._makeTooltipHtml, this);\n\n        this._setDefaultTooltipPositionOption();\n        this._saveOriginalPositionOptions();\n    },\n\n    /**\n     * Make tooltip html.\n     * @private\n     * @abstract\n     */\n    _makeTooltipHtml: function() {},\n\n    /**\n     * Set default align option of tooltip.\n     * @private\n     * @abstract\n     */\n    _setDefaultTooltipPositionOption: function() {},\n\n    /**\n     * Save position options.\n     * @private\n     */\n    _saveOriginalPositionOptions: function() {\n        this.orgPositionOptions = {\n            align: this.options.align,\n            position: this.options.position\n        };\n    },\n\n    /**\n     * Make tooltip data.\n     * @abstract\n     */\n    makeTooltipData: function() {},\n\n    /**\n     * Render tooltip component.\n     * @param {{position: object}} bound tooltip bound\n     * @param {?{seriesPosition: {left: number, top: number}}} data rendering data\n     * @returns {HTMLElement} tooltip element\n     */\n    render: function(bound, data) {\n        var el = dom.create('DIV', this.className);\n\n        renderUtil.renderPosition(el, bound.position);\n\n        this.bound = bound;\n        this.chartDimension = data.chartDimension;\n        this.tooltipContainer = el;\n\n        return el;\n    },\n\n    /**\n     * Rerender.\n     * @param {{position: object}} bound tooltip bound\n     * @param {?{seriesPosition: {left: number, top: number}}} data rendering data\n     */\n    rerender: function(bound, data) {\n        this.bound = bound;\n        tui.util.extend(this, data);\n        this.data = this.makeTooltipData();\n        if (this.positionModel) {\n            this.positionModel.updateBound(bound);\n        }\n    },\n\n    /**\n     * Resize tooltip component.\n     * @param {{position: object}} bound tooltip bound\n     * @param {{chartDimension: object}} data data for resize\n     * @override\n     */\n    resize: function(bound, data) {\n        this.bound = bound;\n        this.chartDimension = data.chartDimension;\n        renderUtil.renderPosition(this.tooltipContainer, bound.position);\n        if (this.positionModel) {\n            this.positionModel.updateBound(bound);\n        }\n    },\n\n    /**\n     * Get tooltip element.\n     * @returns {HTMLElement} tooltip element\n     * @private\n     */\n    _getTooltipElement: function() {\n        var tooltipElement;\n\n        if (!this.tooltipElement) {\n            this.tooltipElement = tooltipElement = dom.create('DIV', 'tui-chart-tooltip');\n            dom.append(this.tooltipContainer, tooltipElement);\n        }\n\n        return this.tooltipElement;\n    },\n\n    /**\n     * onShow is callback of custom event showTooltip for SeriesView.\n     * @param {object} params coordinate event parameters\n     */\n    onShow: function(params) {\n        var tooltipElement = this._getTooltipElement(),\n            prevPosition;\n\n        if (tooltipElement.offsetWidth) {\n            prevPosition = {\n                left: tooltipElement.offsetLeft,\n                top: tooltipElement.offsetTop\n            };\n        }\n\n        this.showTooltip(tooltipElement, params, prevPosition);\n    },\n\n    /**\n     * Get tooltip dimension\n     * @param {HTMLElement} tooltipElement tooltip element\n     * @returns {{width: number, height: number}} rendered tooltip dimension\n     */\n    getTooltipDimension: function(tooltipElement) {\n        return {\n            width: tooltipElement.offsetWidth,\n            height: tooltipElement.offsetHeight\n        };\n    },\n\n    /**\n     * Cancel hide tooltip.\n     * @private\n     */\n    _cancelHide: function() {\n        if (!this.activeHider) {\n            return;\n        }\n        clearInterval(this.activeHider.timerId);\n        this.activeHider.setOpacity(1);\n    },\n\n    /**\n     * Cancel slide tooltip.\n     * @private\n     */\n    _cancelSlide: function() {\n        if (!this.activeSliders) {\n            return;\n        }\n\n        tui.util.forEach(this.activeSliders, function(slider) {\n            clearInterval(slider.timerId);\n        });\n\n        this._completeSlide();\n    },\n\n    /**\n     * Move to Position.\n     * @param {HTMLElement} tooltipElement tooltip element\n     * @param {{left: number, top: number}} position position\n     * @param {{left: number, top: number}} prevPosition prev position\n     */\n    moveToPosition: function(tooltipElement, position, prevPosition) {\n        if (prevPosition) {\n            this._cancelHide();\n            this._cancelSlide();\n            this._slideTooltip(tooltipElement, prevPosition, position);\n        } else {\n            renderUtil.renderPosition(tooltipElement, position);\n        }\n    },\n\n    /**\n     * Get slider.\n     * @param {HTMLElement} element element\n     * @param {string} type slide type (horizontal or vertical)\n     * @returns {object} effect object\n     * @private\n     */\n    _getSlider: function(element, type) {\n        if (!this.slider) {\n            this.slider = {};\n        }\n\n        if (!this.slider[type]) {\n            this.slider[type] = new tui.component.Effects.Slide({\n                flow: type,\n                element: element,\n                duration: 100\n            });\n        }\n\n        return this.slider[type];\n    },\n\n    /**\n     * Complete slide tooltip.\n     * @private\n     */\n    _completeSlide: function() {\n        delete this.activeSliders;\n    },\n\n    /**\n     * Slide tooltip\n     * @param {HTMLElement} tooltipElement tooltip element\n     * @param {{left: number, top: number}} prevPosition prev position\n     * @param {{left: number, top: number}} position position\n     * @private\n     */\n    _slideTooltip: function(tooltipElement, prevPosition, position) {\n        var vSlider = this._getSlider(tooltipElement, 'vertical'),\n            hSlider = this._getSlider(tooltipElement, 'horizontal'),\n            moveTop = prevPosition.top - position.top,\n            moveLeft = prevPosition.left - position.left,\n            vDirection = moveTop > 0 ? 'forword' : 'backword',\n            hDirection = moveTop > 0 ? 'forword' : 'backword',\n            activeSliders = [],\n            complate = tui.util.bind(this._completeSlide, this);\n\n        if (moveTop) {\n            vSlider.setDistance(moveTop);\n            vSlider.action({\n                direction: vDirection,\n                start: prevPosition.top,\n                complete: complate\n            });\n            activeSliders.push(vSlider);\n        }\n\n        if (moveLeft) {\n            hSlider.setDistance(moveLeft);\n            hSlider.action({\n                direction: hDirection,\n                start: prevPosition.left,\n                complete: complate\n            });\n            activeSliders.push(vSlider);\n        }\n\n        if (activeSliders.length) {\n            this.activeSliders = activeSliders;\n        }\n    },\n\n    /**\n     * onHide is callback of custom event hideTooltip for SeriesView\n     * @param {number} index index\n     */\n    onHide: function(index) {\n        var tooltipElement = this._getTooltipElement();\n\n        this.hideTooltip(tooltipElement, index);\n    },\n\n    /**\n     * Get hider.\n     * @param {HTMLElement} element element\n     * @returns {object} effect object\n     * @private\n     */\n    _getHider: function(element) {\n        if (!this.hider) {\n            this.hider = new tui.component.Effects.Fade({\n                element: element,\n                duration: 100\n            });\n        }\n\n        return this.hider;\n    },\n\n    /**\n     * Hide animation.\n     * @param {HTMLElement} tooltipElement tooltip element\n     */\n    hideAnimation: function(tooltipElement) {\n        this.activeHider = this._getHider(tooltipElement);\n        this.activeHider.action({\n            start: 1,\n            end: 0,\n            complete: function() {\n                dom.removeClass(tooltipElement, 'show');\n                tooltipElement.style.cssText = '';\n            }\n        });\n    },\n\n    /**\n     * Set tooltip align option.\n     * @param {string} align align\n     */\n    setAlign: function(align) {\n        this.options.align = align;\n        if (this.positionModel) {\n            this.positionModel.updateOptions(this.options);\n        }\n    },\n\n    /**\n     * Set position option.\n     * @param {{left: number, top: number}} position moving position\n     */\n    setPosition: function(position) {\n        this.options.position = tui.util.extend({}, this.options.position, position);\n        if (this.positionModel) {\n            this.positionModel.updateOptions(this.options);\n        }\n    },\n\n    /**\n     * Reset tooltip align option.\n     */\n    resetAlign: function() {\n        var align = this.orgPositionOptions.align;\n\n        this.options.align = align;\n        if (this.positionModel) {\n            this.positionModel.updateOptions(this.options);\n        }\n    },\n\n    /**\n     * Reset tooltip position.\n     */\n    resetPosition: function() {\n        var position = this.orgPositionOptions.position;\n\n        this.options.position = position;\n        if (this.positionModel) {\n            this.positionModel.updateOptions(this.options);\n        }\n    }\n});\n\ntui.util.CustomEvents.mixin(TooltipBase);\n\nmodule.exports = TooltipBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"