tui.util.defineNamespace("fedoc.content", {});
fedoc.content["axes_axis.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Axis component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar dom = require('../helpers/domHandler'),\n    chartConst = require('../const'),\n    calculator = require('../helpers/calculator'),\n    renderUtil = require('../helpers/renderUtil'),\n    axisTemplate = require('./axisTemplate');\n\nvar Axis = tui.util.defineClass(/** @lends Axis.prototype */ {\n    /**\n     * Axis component.\n     * @constructs Axis\n     * @param {object} params parameters\n     *      @param {{\n     *          labels: array.&lt;string>,\n     *          tickCount: number,\n     *          isLabelAxis: boolean,\n     *          isVertical: boolean\n     *      }} params.data axis data\n     *      @param {object} params.bound axis bound\n     *      @param {object} params.theme axis theme\n     *      @param {object} params.options axis options\n     */\n    init: function(params) {\n        tui.util.extend(this, params);\n        /**\n         * Axis view className\n         */\n        this.className = 'tui-chart-axis-area';\n    },\n\n    /**\n     * Render axis area.\n     * @param {HTMLElement} axisContainer axis area element\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound axis bound\n     * @param {object} data rendering data\n     * @private\n     */\n    _renderAxisArea: function(axisContainer, bound, data) {\n        var theme = this.theme,\n            isVertical = !!data.isVertical,\n            isPositionRight = !!data.isPositionRight,\n            options = this.options,\n            dimension = bound.dimension,\n            size = isVertical ? dimension.height : dimension.width,\n            elTitleArea = this._renderTitleArea({\n                title: options.title,\n                theme: theme.title,\n                isVertical: isVertical,\n                isPositionRight: isPositionRight,\n                size: size\n            }),\n            elLabelArea = this._renderLabelArea(data, size, dimension.width, bound.degree),\n            elTickArea;\n\n        this.data = data;\n        this.bound = bound;\n\n        if (!isVertical || !data.aligned) {\n            elTickArea = this._renderTickArea(size);\n        }\n\n        renderUtil.renderDimension(axisContainer, dimension);\n        renderUtil.renderPosition(axisContainer, bound.position);\n        dom.addClass(axisContainer, isVertical ? 'vertical' : 'horizontal');\n        dom.addClass(axisContainer, isPositionRight ? 'right' : '');\n        dom.append(axisContainer, [elTitleArea, elTickArea, elLabelArea]);\n    },\n\n    /**\n     * Render axis component.\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound axis bound\n     * @param {object} data rendering data\n     * @returns {HTMLElement} axis area base element\n     */\n    render: function(bound, data) {\n        var el = dom.create('DIV', this.className);\n\n        this._renderAxisArea(el, bound, data);\n        this.axisContainer = el;\n        return el;\n    },\n\n    /**\n     * Rerender axis component.\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound axis bound\n     * @param {object} data rendering data\n     */\n    rerender: function(bound, data) {\n        this.axisContainer.innerHTML = '';\n        if (bound.dimension.width > 0) {\n            if (data.options) {\n                this.options = data.options;\n            }\n            this._renderAxisArea(this.axisContainer, bound, data);\n        }\n    },\n\n    /**\n     * Resize axis component.\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound axis bound\n     * @param {object} data rendering data\n     */\n    resize: function(bound, data) {\n        this.rerender(bound, data);\n    },\n\n    /**\n     * Render css style of title area\n     * @param {HTMLElement} elTitleArea title element\n     * @param {number} size (width or height)\n     * @param {boolean} isPositionRight whether right position or not?\n     * @private\n     */\n    _renderTitleAreaStyle: function(elTitleArea, size, isPositionRight) {\n        var cssTexts = [\n            renderUtil.concatStr('width:', size, 'px')\n        ];\n\n        if (isPositionRight) {\n            if (renderUtil.isIE7()) {\n                cssTexts.push(renderUtil.concatStr('right:', '0px'));\n            } else {\n                cssTexts.push(renderUtil.concatStr('right:', -size, 'px'));\n            }\n            cssTexts.push('top:0px');\n        } else {\n            cssTexts.push('left:0px');\n            if (!renderUtil.isOldBrowser()) {\n                cssTexts.push(renderUtil.concatStr('top:', size, 'px'));\n            }\n        }\n\n        elTitleArea.style.cssText += ';' + cssTexts.join(';');\n    },\n\n    /**\n     * Title area renderer\n     * @param {object} params parameters\n     *      @param {string} params.title axis title\n     *      @param {object} params.theme title theme\n     *      @param {boolean} params.isVertical whether vertical or not?\n     *      @param {boolean} params.isPositionRight whether right position or not?\n     *      @param {number} params.size (width or height)\n     * @returns {HTMLElement} title element\n     * @private\n     */\n    _renderTitleArea: function(params) {\n        var elTitleArea = renderUtil.renderTitle(params.title, params.theme, 'tui-chart-title-area');\n\n        if (elTitleArea &amp;&amp; params.isVertical) {\n            this._renderTitleAreaStyle(elTitleArea, params.size, params.isPositionRight);\n        }\n\n        return elTitleArea;\n    },\n\n    /**\n     * Redner tick area.\n     * @param {number} size size or height\n     * @returns {HTMLElement} tick area element\n     * @private\n     */\n    _renderTickArea: function(size) {\n        var data = this.data,\n            tickCount = data.tickCount,\n            tickColor = this.theme.tickColor,\n            positions = calculator.makeTickPixelPositions(size, tickCount),\n            elTickArea = dom.create('DIV', 'tui-chart-tick-area'),\n            posType = data.isVertical ? 'bottom' : 'left',\n            borderColorType = data.isVertical ? (data.isPositionRight ? 'borderLeftColor' : 'borderRightColor') : 'borderTopColor',\n            template = axisTemplate.tplAxisTick,\n            ticksHtml = tui.util.map(positions, function(position, index) {\n                var cssText;\n                if (data.aligned &amp;&amp; data.labels[index] === chartConst.EMPTY_AXIS_LABEL) {\n                    return '';\n                }\n                cssText = [\n                    renderUtil.concatStr('background-color:', tickColor),\n                    renderUtil.concatStr(posType, ': ', position, 'px')\n                ].join(';');\n                return template({cssText: cssText});\n            }, this).join('');\n\n        elTickArea.innerHTML = ticksHtml;\n        elTickArea.style[borderColorType] = tickColor;\n\n        return elTickArea;\n    },\n\n    /**\n     * Make cssText of vertical label.\n     * @param {number} axisWidth axis width\n     * @param {number} titleAreaWidth title area width\n     * @returns {string} cssText\n     * @private\n     */\n    _makeVerticalLabelCssText: function(axisWidth, titleAreaWidth) {\n        return ';width:' + (axisWidth - titleAreaWidth + chartConst.V_LABEL_RIGHT_PADDING) + 'px';\n    },\n\n    /**\n     * Render label area.\n     * @param {object} data rendering data\n     * @param {number} size label area size\n     * @param {number} axisWidth axis area width\n     * @param {number} degree rotation degree\n     * @returns {HTMLElement} label area element\n     * @private\n     */\n    _renderLabelArea: function(data, size, axisWidth, degree) {\n        var tickPixelPositions = calculator.makeTickPixelPositions(size, data.tickCount),\n            labelSize = tickPixelPositions[1] - tickPixelPositions[0],\n            posType = 'left',\n            cssTexts = this._makeLabelCssTexts({\n                isVertical: data.isVertical,\n                isLabelAxis: data.isLabelAxis,\n                labelSize: labelSize\n            }),\n            elLabelArea = dom.create('DIV', 'tui-chart-label-area'),\n            areaCssText = renderUtil.makeFontCssText(this.theme.label),\n            categories = data.labels,\n            labelsHtml, titleAreaWidth;\n\n        if (data.isVertical) {\n            posType = data.isLabelAxis ? 'top' : 'bottom';\n            titleAreaWidth = this._getRenderedTitleHeight() + chartConst.TITLE_AREA_WIDTH_PADDING;\n            areaCssText += this._makeVerticalLabelCssText(axisWidth, titleAreaWidth);\n        } else if (data.isLabelAxis &amp;&amp; this.options.rotation === false) {\n            categories = this.dataProcessor.getMultilineCategories();\n        }\n\n        tickPixelPositions.length = categories.length;\n        labelsHtml = this._makeLabelsHtml({\n            positions: tickPixelPositions,\n            labels: categories,\n            posType: posType,\n            cssTexts: cssTexts,\n            labelSize: labelSize,\n            degree: degree,\n            theme: this.theme.label\n        });\n\n        elLabelArea.innerHTML = labelsHtml;\n        elLabelArea.style.cssText = areaCssText;\n\n        this._changeLabelAreaPosition({\n            elLabelArea: elLabelArea,\n            isVertical: data.isVertical,\n            isLabelAxis: data.isLabelAxis,\n            theme: this.theme.label,\n            labelSize: labelSize,\n            aligned: data.aligned\n        });\n\n        return elLabelArea;\n    },\n\n    /**\n     * Get height of title area ;\n     * @returns {number} height\n     * @private\n     */\n    _getRenderedTitleHeight: function() {\n        var title = this.options.title,\n            theme = this.theme.title,\n            result = title ? renderUtil.getRenderedLabelHeight(title, theme) : 0;\n\n        return result;\n    },\n\n    /**\n     * Make cssTexts of label.\n     * @param {object} params parameter\n     *      @param {boolean} params.isVertical whether vertical or not\n     *      @param {boolean} params.isLabelAxis whether label axis or not\n     *      @param {number} params.labelSize label size (width or height)\n     * @returns {string[]} cssTexts\n     * @private\n     */\n    _makeLabelCssTexts: function(params) {\n        var cssTexts = [];\n\n        if (params.isVertical &amp;&amp; params.isLabelAxis) {\n            cssTexts.push(renderUtil.concatStr('height:', params.labelSize, 'px'));\n            cssTexts.push(renderUtil.concatStr('line-height:', params.labelSize, 'px'));\n        } else if (!params.isVertical) {\n            cssTexts.push(renderUtil.concatStr('width:', params.labelSize, 'px'));\n        }\n\n        return cssTexts;\n    },\n\n    /**\n     * Calculate rotation moving position.\n     * @param {object} params parameters\n     *      @param {number} params.degree rotation degree\n     *      @param {number} params.labelHeight label height\n     *      @param {number} params.left normal left\n     *      @param {number} params.moveLeft move left\n     *      @param {number} params.top top\n     * @returns {{top:number, left: number}} position\n     * @private\n     */\n    _calculateRotationMovingPosition: function(params) {\n        var moveLeft = params.moveLeft;\n\n        if (params.degree === chartConst.ANGLE_85) {\n            moveLeft += calculator.calculateAdjacent(chartConst.ANGLE_90 - params.degree, params.labelHeight / 2);\n        }\n\n        return {\n            top: params.top,\n            left: params.left - moveLeft\n        };\n    },\n\n    /**\n     * Calculate rotation moving position for ie8.\n     * @param {object} params parameters\n     *      @param {number} params.degree rotation degree\n     *      @param {number} params.labelWidth label width\n     *      @param {number} params.labelHeight label height\n     *      @param {number} params.left normal left\n     *      @param {(string | number)} params.label label\n     *      @param {object} theme label theme\n     * @returns {{top:number, left: number}} position\n     * @private\n     */\n    _calculateRotationMovingPositionForIE8: function(params) {\n        var labelWidth = renderUtil.getRenderedLabelWidth(params.label, params.theme),\n            smallAreaWidth = calculator.calculateAdjacent(chartConst.ANGLE_90 - params.degree, params.labelHeight / 2),\n            newLabelWidth = (calculator.calculateAdjacent(params.degree, labelWidth / 2) + smallAreaWidth) * 2,\n            collectLeft = labelWidth - newLabelWidth,\n            moveLeft = (params.labelWidth / 2) - (smallAreaWidth * 2);\n\n        if (params.degree === chartConst.ANGLE_85) {\n            moveLeft += smallAreaWidth;\n        }\n\n        return {\n            top: chartConst.XAXIS_LABEL_TOP_MARGIN,\n            left: params.left + collectLeft - moveLeft\n        };\n    },\n\n    /**\n     * Make cssText for rotation moving.\n     * @param {object} params parameters\n     *      @param {number} params.degree rotation degree\n     *      @param {number} params.labelWidth label width\n     *      @param {number} params.labelHeight label height\n     *      @param {number} params.left normal left\n     *      @param {number} params.moveLeft move left\n     *      @param {number} params.top top\n     *      @param {(string | number)} params.label label\n     *      @param {object} theme label theme\n     * @returns {string} cssText\n     * @private\n     */\n    _makeCssTextForRotationMoving: function(params) {\n        var position;\n\n        if (renderUtil.isOldBrowser()) {\n            position = this._calculateRotationMovingPositionForIE8(params);\n        } else {\n            position = this._calculateRotationMovingPosition(params);\n        }\n\n        return renderUtil.concatStr('left:', position.left, 'px', ';top:', position.top, 'px');\n    },\n\n    /**\n     * Make html of rotation labels.\n     * @param {object} params parameters\n     *      @param {array.&lt;object>} params.positions label position array\n     *      @param {string[]} params.labels label array\n     *      @param {string} params.posType position type (left or bottom)\n     *      @param {string[]} params.cssTexts css array\n     * @returns {string} labels html\n     * @private\n     */\n    _makeRotationLabelsHtml: function(params) {\n        var template = axisTemplate.tplAxisLabel,\n            labelHeight = renderUtil.getRenderedLabelHeight(params.labels[0], params.theme),\n            labelCssText = params.cssTexts.length ? params.cssTexts.join(';') + ';' : '',\n            addClass = ' tui-chart-xaxis-rotation tui-chart-xaxis-rotation' + params.degree,\n            halfWidth = params.labelSize / 2,\n            moveLeft = calculator.calculateAdjacent(params.degree, halfWidth),\n            top = calculator.calculateOpposite(params.degree, halfWidth) + chartConst.XAXIS_LABEL_TOP_MARGIN,\n            labelsHtml = tui.util.map(params.positions, function(position, index) {\n                var label = params.labels[index],\n                    rotationCssText = this._makeCssTextForRotationMoving({\n                        degree: params.degree,\n                        labelHeight: labelHeight,\n                        labelWidth: params.labelSize,\n                        top: top,\n                        left: position,\n                        moveLeft: moveLeft,\n                        label: label,\n                        theme: params.theme\n                    });\n\n                return template({\n                    addClass: addClass,\n                    cssText: labelCssText + rotationCssText,\n                    label: label\n                });\n            }, this).join('');\n\n        return labelsHtml;\n    },\n\n    /**\n     * Make html of normal labels.\n     * @param {object} params parameters\n     *      @param {array.&lt;object>} params.positions label position array\n     *      @param {string[]} params.labels label array\n     *      @param {string} params.posType position type (left or bottom)\n     *      @param {string[]} params.cssTexts css array\n     * @returns {string} labels html\n     * @private\n     */\n    _makeNormalLabelsHtml: function(params) {\n        var template = axisTemplate.tplAxisLabel,\n            labelCssText = params.cssTexts.length ? params.cssTexts.join(';') + ';' : '',\n            labelsHtml = tui.util.map(params.positions, function(position, index) {\n                var addCssText = renderUtil.concatStr(params.posType, ':', position, 'px');\n                return template({\n                    addClass: '',\n                    cssText: labelCssText + addCssText,\n                    label: params.labels[index]\n                });\n            }, this).join('');\n\n        return labelsHtml;\n    },\n\n    /**\n     * Make html of labels.\n     * @param {object} params parameters\n     *      @param {array.&lt;object>} params.positions label position array\n     *      @param {string[]} params.labels label array\n     *      @param {string} params.posType position type (left or bottom)\n     *      @param {string[]} params.cssTexts css array\n     * @returns {string} labels html\n     * @private\n     */\n    _makeLabelsHtml: function(params) {\n        var labelsHtml;\n\n        if (params.degree) {\n            labelsHtml = this._makeRotationLabelsHtml(params);\n        } else {\n            labelsHtml = this._makeNormalLabelsHtml(params);\n        }\n\n        return labelsHtml;\n    },\n\n    /**\n     * Change position of label area.\n     * @param {object} params parameter\n     *      @param {HTMLElement} params.elLabelArea label area element\n     *      @param {boolean} params.isVertical whether vertical or not\n     *      @param {boolean} params.isLabelAxis whether label axis or not\n     *      @param {{fontSize: number, fontFamily: string, color: string}} params.theme label theme\n     *      @param {number} params.labelSize label size (width or height)\n     * @private\n     */\n    _changeLabelAreaPosition: function(params) {\n        var labelHeight;\n\n        if (params.isLabelAxis &amp;&amp; !params.aligned) {\n            return;\n        }\n\n        if (params.isVertical) {\n            labelHeight = renderUtil.getRenderedLabelHeight('ABC', params.theme);\n            params.elLabelArea.style.top = renderUtil.concatStr(parseInt(labelHeight / 2, 10), 'px');\n        } else {\n            params.elLabelArea.style.left = renderUtil.concatStr('-', parseInt(params.labelSize / 2, 10), 'px');\n        }\n    }\n});\n\nmodule.exports = Axis;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"