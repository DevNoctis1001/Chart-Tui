tui.util.defineNamespace("fedoc.content", {});
fedoc.content["series_barTypeSeriesBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Column chart series component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    renderUtil = require('../helpers/renderUtil');\n\nvar BarTypeSeriesBase = tui.util.defineClass(/** @lends BarTypeSeriesBase.prototype */ {\n    /**\n     * Make series data.\n     * @returns {object} add data\n     * @private\n     * @override\n     */\n    _makeSeriesData: function() {\n        this.groupBounds = this._makeBounds(this.boundsMaker.getDimension('series'));\n\n        return {\n            groupBounds: this.groupBounds,\n            groupValues: this._getPercentValues()\n        };\n    },\n\n    /**\n     * Make bar gutter.\n     * @param {number} groupSize bar group size\n     * @param {number} itemCount group item count\n     * @returns {number} bar gutter\n     * @private\n     */\n    _makeBarGutter: function(groupSize, itemCount) {\n        var baseSize = groupSize / (itemCount + 1) / 2,\n            gutter;\n\n        if (baseSize &lt;= 2) {\n            gutter = 0;\n        } else if (baseSize &lt;= 6) {\n            gutter = 2;\n        } else {\n            gutter = 4;\n        }\n        return gutter;\n    },\n\n    /**\n     * Make bar size.\n     * @param {number} groupSize bar group size\n     * @param {number} barGutter bar padding\n     * @param {number} itemCount group item count\n     * @returns {number} bar size (width or height)\n     * @private\n     */\n    _makeBarSize: function(groupSize, barGutter, itemCount) {\n        return (groupSize - (barGutter * (itemCount - 1))) / (itemCount + 1);\n    },\n\n    /**\n     * Make option size.\n     * @param {number} barSize bar size\n     * @param {?number} optionBarWidth barWidth option\n     * @returns {number} option size\n     * @private\n     */\n    _makeOptionSize: function(barSize, optionBarWidth) {\n        var optionsSize = 0;\n        if (optionBarWidth) {\n            optionsSize = tui.util.min([barSize, optionBarWidth]);\n        }\n        return optionsSize;\n    },\n\n    /**\n     * Make addition padding.\n     * @param {number} barSize bar size\n     * @param {number} optionSize option size\n     * @param {number} itemCount item count\n     * @returns {number} addition padding\n     * @private\n     */\n    _makeAdditionPadding: function(barSize, optionSize, itemCount) {\n        var padding = 0;\n\n        if (optionSize &amp;&amp; optionSize &lt; barSize) {\n            padding = (barSize - optionSize) * itemCount / 2;\n        }\n\n        return (barSize / 2) + padding;\n    },\n\n    /**\n     * Make base info for normal chart bounds.\n     * @param {{width: number, height: number}} dimension series dimension\n     * @param {string} sizeType size type (width or height)\n     * @param {string} anotherSizeType another size type (width or height)\n     * @returns {{\n     *      dimension: {width: number, height: number},\n     *      groupValues: Array.&lt;Array.&lt;number>>,\n     *      groupSize: number, barSize: number, step: number,\n     *      distanceToMin: number, isMinus: boolean\n     * }} base info\n     * @private\n     */\n    _makeBaseInfoForNormalChartBounds: function(dimension, sizeType, anotherSizeType) {\n        var groupValues = this._getPercentValues(),\n            groupSize = dimension[anotherSizeType] / groupValues.length,\n            itemCount = groupValues[0] &amp;&amp; groupValues[0].length || 0,\n            barGutter = this._makeBarGutter(groupSize, itemCount),\n            barSize = this._makeBarSize(groupSize, barGutter, itemCount),\n            optionSize = this._makeOptionSize(barSize, this.options.barWidth),\n            additionPadding = this._makeAdditionPadding(barSize, optionSize, itemCount),\n            limitDistance = this._getLimitDistanceFromZeroPoint(dimension[sizeType], this.data.limit);\n\n        barSize = optionSize || barSize;\n\n        return {\n            dimension: dimension,\n            groupSize: groupSize,\n            barSize: barSize,\n            additionPadding: additionPadding,\n            step: barSize + barGutter,\n            distance: limitDistance,\n            isMinus: this.data.limit.min &lt; 0 &amp;&amp; this.data.limit.max &lt;= 0\n        };\n    },\n\n    /**\n     * Make normal bounds.\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      groupValues: Array.&lt;Array.&lt;number>>,\n     *      groupSize: number, barSize: number, step: number,\n     *      distanceToMin: number, isMinus: boolean\n     * }} baseInfo base info\n     * @param {function} iteratee iteratee\n     * @returns {Array} bounds\n     * @private\n     */\n    _makeNormalBounds: function(baseInfo, iteratee) {\n        return tui.util.map(this._getPercentValues(), function(values, groupIndex) {\n            var padding = (baseInfo.groupSize * groupIndex) + baseInfo.additionPadding;\n            return tui.util.map(values, function (value, index) {\n                return iteratee(baseInfo, value, padding, index);\n            }, this);\n        }, this);\n    },\n\n    /**\n     * Make base info for stacked chart bounds.\n     * @param {{width: number, height: number}} dimension dimension\n     * @param {string} sizeType size type (width or height)\n     * @returns {{groupSize: (number), baseBound: object, additionPadding: number, dimensionSize: number, positionType: string, baseEndPosition: number}} base info\n     * @private\n     */\n    _makeBaseInfoForStackedChartBounds: function(dimension, sizeType) {\n        var limitDistance = this._getLimitDistanceFromZeroPoint(dimension[sizeType], this.data.limit),\n            baseBound = {},\n            groupSize, barWidth, optionWidth, additionPadding,\n            anotherSizeType, positionTop, baseEndPosition;\n\n        if (sizeType === 'height') {\n            anotherSizeType = 'width';\n            positionTop = 'left';\n            baseEndPosition = -chartConst.SERIES_EXPAND_SIZE;\n        } else {\n            anotherSizeType = 'height';\n            positionTop = 'top';\n            baseEndPosition = chartConst.SERIES_EXPAND_SIZE;\n        }\n\n        groupSize = (dimension[anotherSizeType] / this._getPercentValues().length);\n        barWidth = groupSize / 2;\n        optionWidth = this._makeOptionSize(barWidth, this.options.barWidth);\n        additionPadding = this._makeAdditionPadding(barWidth, optionWidth, 1);\n        baseBound[anotherSizeType] = optionWidth || barWidth;\n\n        return {\n            groupSize: groupSize,\n            baseBound: baseBound,\n            additionPadding: additionPadding + chartConst.SERIES_EXPAND_SIZE,\n            dimensionSize: dimension[sizeType],\n            positionType: positionTop,\n            baseEndPosition: baseEndPosition,\n            distance: limitDistance\n        };\n    },\n\n    /**\n     * Make bounds of stacked column chart.\n     * @param {{width: number, height:number}} dimension column chart dimension\n     * @param {{groupSize: (number), baseBound: object, additionPadding: number, dimensionSize: number, positionType: string, baseEndPosition: number}} baseInfo base info\n     * @param {function} makeBoundFunc make bound function\n     * @returns {Array.&lt;Array.&lt;object>>} bounds\n     * @private\n     */\n    _makeStackedBounds: function(dimension, baseInfo, makeBoundFunc) {\n        var bounds = tui.util.map(this._getPercentValues(), function(values, groupIndex) {\n            var padding = (baseInfo.groupSize * groupIndex) + baseInfo.additionPadding,\n                endPlusPosition = baseInfo.baseEndPosition,\n                endMinusPosition = baseInfo.baseEndPosition;\n\n            return tui.util.map(values, function (value) {\n                var bound = null,\n                    endSize = Math.abs(value * baseInfo.dimensionSize);\n                baseInfo.baseBound[baseInfo.positionType] = padding;\n\n                if (value >= 0) {\n                    bound = makeBoundFunc(baseInfo.baseBound, endSize, endPlusPosition);\n                    endPlusPosition += endSize;\n                } else {\n                    endMinusPosition -= endSize;\n                    bound = makeBoundFunc(baseInfo.baseBound, endSize, endMinusPosition);\n                }\n\n                return bound;\n            }, this);\n        }, this);\n\n        return bounds;\n    },\n\n    /**\n     * Render normal series label.\n     * @param {HTMLElement} elSeriesLabelArea series label area element\n     * @private\n     */\n    _renderNormalSeriesLabel: function(elSeriesLabelArea) {\n        var groupBounds = this.seriesData.groupBounds,\n            firstFormattedValue = this.dataProcessor.getFirstFormattedValue(this.chartType),\n            labelHeight = renderUtil.getRenderedLabelHeight(firstFormattedValue, this.theme.label),\n            html;\n\n        html = tui.util.map(this.dataProcessor.getGroupValues(this.chartType), function(values, groupIndex) {\n            return tui.util.map(values, function(value, index) {\n                var bound, formattedValue, renderingPosition;\n                bound = groupBounds[groupIndex][index].end;\n                formattedValue = this.dataProcessor.getFormattedValue(groupIndex, index, this.chartType);\n                renderingPosition = this.makeSeriesRenderingPosition({\n                    value: value,\n                    bound: bound,\n                    formattedValue: formattedValue,\n                    labelHeight: labelHeight\n                });\n                return this._makeSeriesLabelHtml(renderingPosition, formattedValue, groupIndex, index);\n            }, this).join('');\n        }, this).join('');\n\n        elSeriesLabelArea.innerHTML = html;\n    },\n\n    /**\n     * Make sum values.\n     * @param {Array.&lt;number>} values values\n     * @returns {number} sum result.\n     */\n    _makeSumValues: function(values) {\n        var sum = tui.util.sum(values);\n\n        return renderUtil.formatValue(sum, this.dataProcessor.getFormatFunctions());\n    },\n\n    /**\n     * Make stacked label position.\n     * @param {{width: number, height: number, left: number, top: number}} bound element bound\n     * @param {string} formattedValue formatted value\n     * @param {number} labelHeight label height\n     * @returns {{left: number, top: number}} position\n     * @private\n     */\n    _makeStackedLabelPosition: function(bound, formattedValue, labelHeight) {\n        var labelWidth = renderUtil.getRenderedLabelWidth(formattedValue, this.theme.label),\n            left = bound.left + ((bound.width - labelWidth + chartConst.TEXT_PADDING) / 2),\n            top = bound.top + ((bound.height - labelHeight + chartConst.TEXT_PADDING) / 2);\n\n        return {\n            left: left,\n            top: top\n        };\n    },\n\n    /**\n     * Make stacked labels html.\n     * @param {object} params parameters\n     *      @param {number} params.groupIndex group index\n     *      @param {Array.&lt;object>} params.bounds bounds,\n     *      @param {number} params.labelHeight label height\n     * @returns {string} labels html\n     * @private\n     */\n    _makeStackedLabelsHtml: function(params) {\n        var values = params.values,\n            labelHeight = params.labelHeight,\n            htmls, plusBound, minusBound;\n\n        htmls = tui.util.map(values, function(value, index) {\n            var bound = params.bounds[index],\n                labelHtml = '',\n                boundEnd, formattedValue, position;\n\n            if (bound &amp;&amp; value) {\n                boundEnd = bound.end;\n                formattedValue = this.dataProcessor.getFormattedValue(params.groupIndex, index, this.chartType);\n                position = this._makeStackedLabelPosition(boundEnd, formattedValue, params.labelHeight);\n                labelHtml = this._makeSeriesLabelHtml(position, formattedValue, params.groupIndex, index);\n            }\n\n            if (value > 0) {\n                plusBound = boundEnd;\n            } else if (value &lt; 0) {\n                minusBound = boundEnd;\n            }\n\n            return labelHtml;\n        }, this);\n\n        if (this.options.stacked === 'normal') {\n            htmls.push(this._makePlusSumLabelHtml(values, plusBound, labelHeight));\n            htmls.push(this._makeMinusSumLabelHtml(values, minusBound, labelHeight));\n        }\n\n        return htmls.join('');\n    },\n\n    /**\n     * Render stacked series label.\n     * @param {HTMLElement} elSeriesLabelArea series label area element\n     * @private\n     */\n    _renderStackedSeriesLabel: function(elSeriesLabelArea) {\n        var groupBounds = this.seriesData.groupBounds,\n            groupValues = this.dataProcessor.getGroupValues(this.chartType),\n            firstFormattedValue = this.dataProcessor.getFirstFormattedValue(this.chartType),\n            labelHeight = renderUtil.getRenderedLabelHeight(firstFormattedValue, this.theme.label),\n            html;\n\n        html = tui.util.map(groupValues, function(values, index) {\n            var labelsHtml = this._makeStackedLabelsHtml({\n                groupIndex: index,\n                values: values,\n                bounds: groupBounds[index],\n                labelHeight: labelHeight\n            });\n            return labelsHtml;\n        }, this).join('');\n\n        elSeriesLabelArea.innerHTML = html;\n    },\n\n    /**\n     * Render series label.\n     * @param {HTMLElement} elSeriesLabelArea series label area element\n     * @private\n     */\n    _renderSeriesLabel: function(elSeriesLabelArea) {\n        if (this.options.stacked) {\n            this._renderStackedSeriesLabel(elSeriesLabelArea);\n        } else {\n            this._renderNormalSeriesLabel(elSeriesLabelArea);\n        }\n    }\n});\n\nBarTypeSeriesBase.mixin = function(func) {\n    tui.util.extend(func.prototype, BarTypeSeriesBase.prototype);\n};\n\nmodule.exports = BarTypeSeriesBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"