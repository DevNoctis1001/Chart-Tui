tui.util.defineNamespace("fedoc.content", {});
fedoc.content["plugins_raphaelLineChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Raphael line chart renderer.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar RaphaelLineBase = require('./raphaelLineTypeBase'),\n    raphaelRenderUtil = require('./raphaelRenderUtil');\n\nvar raphael = window.Raphael,\n    EMPHASIS_OPACITY = 1,\n    DE_EMPHASIS_OPACITY = 0.3;\n\nvar RaphaelLineChart = tui.util.defineClass(RaphaelLineBase, /** @lends RaphaelLineChart.prototype */ {\n    /**\n     * RaphaelLineCharts is graph renderer for line chart.\n     * @constructs RaphaelLineChart\n     * @extends RaphaelLineTypeBase\n     */\n    init: function() {\n        /**\n         * selected legend index\n         * @type {?number}\n         */\n        this.selectedLegendIndex = null;\n    },\n\n    /**\n     * Render function of line chart.\n     * @param {HTMLElement} container container\n     * @param {{groupPositions: Array.&lt;Array>, dimension: object, theme: object, options: object}} data render data\n     * @returns {object} paper raphael paper\n     */\n    render: function(container, data) {\n        var dimension = data.dimension,\n            groupPositions = data.groupPositions,\n            theme = data.theme,\n            colors = theme.colors,\n            opacity = data.options.hasDot ? 1 : 0,\n            groupPaths = data.options.spline ? this._getSplineLinesPath(groupPositions) : this._getLinesPath(groupPositions),\n            borderStyle = this.makeBorderStyle(theme.borderColor, opacity),\n            outDotStyle = this.makeOutDotStyle(opacity, borderStyle),\n            paper;\n\n        this.paper = paper = raphael(container, 1, dimension.height);\n        this.splineOption = data.options.spline;\n        this.dimension = dimension;\n\n        this.groupLines = this._renderLines(paper, groupPaths, colors);\n        this.tooltipLine = this._renderTooltipLine(paper, dimension.height);\n        this.groupDots = this._renderDots(paper, groupPositions, colors, opacity);\n\n        if (data.options.hasSelection) {\n            this.selectionDot = this._makeSelectionDot(paper);\n            this.selectionColor = theme.selectionColor;\n        }\n\n        this.colors = colors;\n        this.borderStyle = borderStyle;\n        this.outDotStyle = outDotStyle;\n        this.groupPositions = groupPositions;\n        this.groupPaths = groupPaths;\n        this.dotOpacity = opacity;\n        delete this.pivotGroupDots;\n\n        return paper;\n    },\n\n    /**\n     * Get lines path.\n     * @param {Array.&lt;Array.&lt;{left: number, top: number, startTop: number}>>} groupPositions positions\n     * @returns {Array.&lt;Array.&lt;string>>} path\n     * @private\n     */\n    _getLinesPath: function(groupPositions) {\n        return tui.util.map(groupPositions, function(positions) {\n            positions[0].left -= 1;\n\n            return this._makeLinesPath(positions);\n        }, this);\n    },\n\n    /**\n     * Get spline lines path.\n     * @param {Array.&lt;Array.&lt;{left: number, top: number, startTop: number}>>} groupPositions positions\n     * @returns {Array} path\n     * @private\n     */\n    _getSplineLinesPath: function(groupPositions) {\n        return tui.util.map(groupPositions, this._makeSplineLinesPath, this);\n    },\n\n    /**\n     * Render lines.\n     * @param {object} paper raphael paper\n     * @param {Array.&lt;Array.&lt;string>>} groupPaths paths\n     * @param {string[]} colors line colors\n     * @param {?number} strokeWidth stroke width\n     * @returns {Array.&lt;Array.&lt;object>>} lines\n     * @private\n     */\n    _renderLines: function(paper, groupPaths, colors, strokeWidth) {\n        return tui.util.map(groupPaths, function(path, groupIndex) {\n            var color = colors[groupIndex] || 'transparent';\n            return raphaelRenderUtil.renderLine(paper, path.join(' '), color, strokeWidth);\n        }, this);\n    },\n\n    /**\n     * Resize graph of line chart.\n     * @param {object} params parameters\n     *      @param {{width: number, height:number}} params.dimension dimension\n     *      @param {Array.&lt;Array.&lt;{left:number, top:number}>>} params.groupPositions group positions\n     */\n    resize: function(params) {\n        var dimension = params.dimension,\n            groupPositions = params.groupPositions;\n\n        this.groupPositions = groupPositions;\n        this.groupPaths = this.splineOption ? this._getSplineLinesPath(groupPositions) : this._getLinesPath(groupPositions);\n        this.paper.setSize(dimension.width, dimension.height);\n        this.tooltipLine.attr({top: dimension.height});\n\n        tui.util.forEachArray(this.groupPaths, function(path, groupIndex) {\n            this.groupLines[groupIndex].attr({path: path.join(' ')});\n\n            tui.util.forEachArray(this.groupDots[groupIndex], function(item, index) {\n                this._moveDot(item.dot, groupPositions[groupIndex][index]);\n            }, this);\n        }, this);\n    },\n\n    /**\n     * Select legend.\n     * @param {?number} legendIndex legend index\n     */\n    selectLegend: function(legendIndex) {\n        var that = this,\n            noneSelected = tui.util.isNull(legendIndex);\n\n        this.selectedLegendIndex = legendIndex;\n\n        tui.util.forEachArray(this.groupPaths, function(path, groupIndex) {\n            var opacity = (noneSelected || legendIndex === groupIndex) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;\n\n            that.groupLines[groupIndex].attr({'stroke-opacity': opacity});\n\n            tui.util.forEachArray(this.groupDots[groupIndex], function(item) {\n                item.opacity = opacity;\n\n                if (that.dotOpacity) {\n                    item.dot.attr({'fill-opacity': opacity});\n                }\n            });\n        }, this);\n    }\n});\n\nmodule.exports = RaphaelLineChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"