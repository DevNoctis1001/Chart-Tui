tui.util.defineNamespace("fedoc.content", {});
fedoc.content["series_barChartSeries.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Bar chart series component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar Series = require('./series'),\n    BarTypeSeriesBase = require('./barTypeSeriesBase'),\n    chartConst = require('../const'),\n    predicate = require('../helpers/predicate'),\n    renderUtil = require('../helpers/renderUtil'),\n    calculator = require('../helpers/calculator');\n\nvar BarChartSeries = tui.util.defineClass(Series, /** @lends BarChartSeries.prototype */ {\n    /**\n     * Bar chart series component.\n     * @constructs BarChartSeries\n     * @extends Series\n     * @param {object} params parameters\n     *      @param {object} params.model series model\n     *      @param {object} params.options series options\n     *      @param {object} params.theme series theme\n     */\n    init: function() {\n        Series.apply(this, arguments);\n    },\n\n    /**\n     * Make bound of bar chart.\n     * @param {object} params parameters\n     *      @param {{top: number, height: number}} params.baseBound base bound\n     *      @param {number} params.startLeft start left\n     *      @param {number} params.endLeft end left\n     *      @param {number} params.endWidth end width\n     * @returns {{\n     *      start: {left: number, top: number, width: number, height: number},\n     *      end: {left: number, top: number, width: number, height: number}\n     * }} column chart bound\n     * @private\n     */\n    _makeBarChartBound: function(params) {\n        return {\n            start: tui.util.extend({\n                left: params.startLeft,\n                width: 0\n            }, params.baseBound),\n            end: tui.util.extend({\n                left: params.endLeft,\n                width: params.endWidth\n            }, params.baseBound)\n        };\n    },\n\n    /**\n     * Make normal bar chart bound.\n     * @param {{\n     *      dimension: {width: number, height: number},\n     *      groupValues: Array.&lt;Array.&lt;number>>,\n     *      groupSize: number, barSize: number, step: number,\n     *      distanceToMin: number, isMinus: boolean\n     * }} baseInfo base info\n     * @param {number} value value\n     * @param {number} paddingTop padding top\n     * @param {number} index index\n     * @returns {{\n     *      start: {left: number, top: number, width: number, height: number},\n     *      end: {left: number, top: number, width: number, height: number}\n     * }} column chart bound\n     * @private\n     */\n    _makeNormalBarChartBound: function(baseInfo, value, paddingTop, index) {\n        var startLeft, endWidth, bound, baseBound;\n\n        startLeft = baseInfo.distance.toMin + chartConst.SERIES_EXPAND_SIZE;\n        endWidth = Math.abs(value * baseInfo.dimension.width);\n        baseBound = {\n            top: paddingTop + ((baseInfo.step) * index) + chartConst.SERIES_EXPAND_SIZE,\n            height: baseInfo.barSize\n        };\n        bound = this._makeBarChartBound({\n            baseBound: baseBound,\n            startLeft: startLeft,\n            endLeft: startLeft + (value &lt; 0 ? -endWidth : 0),\n            endWidth: endWidth\n        });\n\n        return bound;\n    },\n\n    /**\n     * Make bounds of normal bar chart.\n     * @param {{width: number, height:number}} dimension bar chart dimension\n     * @returns {Array.&lt;Array.&lt;object>>} bounds\n     * @private\n     */\n    _makeNormalBarChartBounds: function(dimension) {\n        var baseInfo = this._makeBaseInfoForNormalChartBounds(dimension, 'width', 'height'),\n            bounds = this._makeNormalBounds(baseInfo, tui.util.bind(this._makeNormalBarChartBound, this));\n\n        return bounds;\n    },\n\n    /**\n     * Make bounds of stacked bar chart.\n     * @param {{width: number, height:number}} dimension bar chart dimension\n     * @returns {Array.&lt;Array.&lt;object>>} bounds\n     * @private\n     */\n    _makeStackedBarChartBounds: function(dimension) {\n        var that = this,\n            baseInfo = this._makeBaseInfoForStackedChartBounds(dimension, 'width');\n\n        return this._makeStackedBounds(dimension, baseInfo, function(baseBound, endSize, endPosition) {\n            return that._makeBarChartBound({\n                baseBound: baseBound,\n                startLeft: baseInfo.distance.toMin + chartConst.SERIES_EXPAND_SIZE,\n                endLeft: baseInfo.distance.toMin + endPosition,\n                endWidth: endSize\n            });\n        });\n    },\n\n    /**\n     * Make bounds of bar chart.\n     * @param {{width: number, height:number}} dimension bar chart dimension\n     * @returns {Array.&lt;Array.&lt;object>>} bounds\n     * @private\n     */\n    _makeBounds: function(dimension) {\n        var bounds;\n\n        if (predicate.isValidStackedOption(this.options.stacked)) {\n            bounds = this._makeStackedBarChartBounds(dimension);\n        } else {\n            bounds = this._makeNormalBarChartBounds(dimension);\n        }\n\n        return bounds;\n    },\n\n    /**\n     * Make series rendering position\n     * @param {obeject} params parameters\n     *      @param {number} params.value value\n     *      @param {{left: number, top: number, width:number, height: number}} params.bound bound\n     *      @param {string} params.formattedValue formatted value\n     *      @param {number} params.labelHeight label height\n     * @returns {{left: number, top: number}} rendering position\n     */\n    makeSeriesRenderingPosition: function(params) {\n        var labelWidth = renderUtil.getRenderedLabelWidth(params.formattedValue, this.theme.label),\n            bound = params.bound,\n            left = bound.left,\n            top = bound.top + (bound.height - params.labelHeight + chartConst.TEXT_PADDING) / 2;\n\n        if (params.value >= 0) {\n            left += bound.width + chartConst.SERIES_LABEL_PADDING;\n        } else {\n            left -= labelWidth + chartConst.SERIES_LABEL_PADDING;\n        }\n\n        return {\n            left: left,\n            top: top\n        };\n    },\n\n    /**\n     * Calculate sum label top position.\n     * @param {{left: number, top: number}} bound bound\n     * @param {number} labelHeight label height\n     * @returns {number} top position value\n     * @private\n     */\n    _calculateSumLabelTopPosition: function(bound, labelHeight) {\n        return bound.top + ((bound.height - labelHeight + chartConst.TEXT_PADDING) / 2);\n    },\n\n    /**\n     * Make plus sum label html.\n     * @param {Array.&lt;number>} values values\n     * @param {{left: number, top: number}} bound bound\n     * @param {number} labelHeight label height\n     * @returns {string} plus sum label html\n     * @private\n     */\n    _makePlusSumLabelHtml: function(values, bound, labelHeight) {\n        var sum, formattedSum,\n            html = '';\n\n        if (bound) {\n            sum = calculator.sumPlusValues(values);\n            formattedSum = renderUtil.formatValue(sum, this.dataProcessor.getFormatFunctions());\n            html = this._makeSeriesLabelHtml({\n                left: bound.left + bound.width + chartConst.SERIES_LABEL_PADDING,\n                top: this._calculateSumLabelTopPosition(bound, labelHeight)\n            }, formattedSum, -1, -1);\n        }\n\n        return html;\n    },\n\n    /**\n     * Make minus sum label html.\n     * @param {Array.&lt;number>} values values\n     * @param {{left: number, top: number}} bound bound\n     * @param {number} labelHeight label height\n     * @returns {string} plus minus label html\n     * @private\n     */\n    _makeMinusSumLabelHtml: function(values, bound, labelHeight) {\n        var sum, formattedSum, labelWidth,\n            html = '';\n\n        if (bound) {\n            sum = calculator.sumMinusValues(values);\n\n            if (this.options.diverging) {\n                sum = Math.abs(sum);\n            }\n\n            formattedSum = renderUtil.formatValue(sum, this.dataProcessor.getFormatFunctions());\n            labelWidth = renderUtil.getRenderedLabelWidth(formattedSum, this.theme.label);\n            html = this._makeSeriesLabelHtml({\n                left: bound.left - labelWidth - chartConst.SERIES_LABEL_PADDING,\n                top: this._calculateSumLabelTopPosition(bound, labelHeight)\n            }, formattedSum, -1, -1);\n        }\n\n        return html;\n    }\n});\n\nBarTypeSeriesBase.mixin(BarChartSeries);\n\nmodule.exports = BarChartSeries;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"