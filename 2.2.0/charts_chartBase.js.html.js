tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_chartBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview ChartBase\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ComponentManager = require('./componentManager');\nvar DefaultDataProcessor = require('../dataModels/dataProcessor');\nvar BoundsMaker = require('../helpers/boundsMaker');\nvar AxisScaleMaker = require('../helpers/axisScaleMaker');\nvar dom = require('../helpers/domHandler');\nvar predicate = require('../helpers/predicate');\nvar renderUtil = require('../helpers/renderUtil');\nvar UserEventListener = require('../helpers/userEventListener');\n\nvar ChartBase = tui.util.defineClass(/** @lends ChartBase.prototype */ {\n    /**\n     * Chart base.\n     * @constructs ChartBase\n     * @param {object} params parameters\n     *      @param {object} params.rawData raw data\n     *      @param {object} params.theme chart theme\n     *      @param {object} params.options chart options\n     *      @param {boolean} params.hasAxes whether has axes or not\n     *      @param {boolean} params.isVertical whether vertical or not\n     *      @param {DataProcessor} params.DataProcessor DataProcessor\n     */\n    init: function(params) {\n        /**\n         * theme\n         * @type {object}\n         */\n        this.theme = params.theme;\n\n        /**\n         * options\n         * @type {object}\n         */\n        this.options = null;\n        this._setDefaultOptions(params.options);\n\n        /**\n         * chart type\n         * @type {string}\n         */\n        this.chartType = this.options.chartType;\n\n        /**\n         * whether chart has axes or not\n         * @type {boolean}\n         */\n        this.hasAxes = params.hasAxes;\n\n        /**\n         * whether vertical or not\n         * @type {boolean}\n         */\n        this.isVertical = !!params.isVertical;\n\n        /**\n         * whether chart has group tooltip or not\n         * @type {boolean}\n         */\n        this.hasGroupTooltip = !!tui.util.pick(this.options, 'tooltip', 'grouped');\n\n        /**\n         * data processor\n         * @type {DataProcessor}\n         */\n        this.dataProcessor = this._createDataProcessor(params);\n\n        /**\n         * bounds maker\n         * @type {BoundsMaker}\n         */\n        this.boundsMaker = new BoundsMaker({\n            options: this.options,\n            theme: this.theme,\n            dataProcessor: this.dataProcessor,\n            hasAxes: this.hasAxes,\n            isVertical: this.isVertical,\n            chartType: this.chartType,\n            chartTypes: params.seriesNames\n        });\n\n        /**\n         * component manager\n         * @type {ComponentManager}\n         */\n        this.componentManager = new ComponentManager({\n            dataProcessor: this.dataProcessor,\n            options: this.options,\n            theme: this.theme,\n            boundsMaker: this.boundsMaker,\n            hasAxes: this.hasAxes\n        });\n\n        /**\n         * user event listener\n         * @type {object}\n         */\n        this.userEvent = new UserEventListener();\n    },\n\n    /**\n     * Set default options.\n     * @param {object} options - options for chart\n     * @private\n     */\n    _setDefaultOptions: function(options) {\n        options.legend = options.legend || {};\n\n        if (tui.util.isUndefined(options.legend.visible)) {\n            options.legend.visible = true;\n        }\n\n        this.options = options;\n    },\n\n    /**\n     * Create dataProcessor for processing raw data.\n     * @param {object} params parameters\n     *      @param {object} params.rawData - raw data\n     *      @param {DataProcessor} params.DataProcessor - DataProcessor class\n     *      @param {{chart: object, chartType: string}} params.options - chart options\n     *      @param {Array} params.seriesNames series - chart types for rendering series\n     * @returns {object} data processor\n     * @private\n     */\n    _createDataProcessor: function(params) {\n        var DataProcessor, dataProcessor;\n\n        DataProcessor = params.DataProcessor || DefaultDataProcessor;\n        dataProcessor = new DataProcessor(params.rawData, this.chartType, params.options, params.seriesNames);\n\n        return dataProcessor;\n    },\n\n    /**\n     * Pick limit from options.\n     * @param {{min: number, max: number, title: string}} options - axis options\n     * @returns {{min: ?number, max: ?number}}\n     * @private\n     */\n    _pickLimitFromOptions: function(options) {\n        options = options || {};\n\n        return {\n            min: options.min,\n            max: options.max\n        };\n    },\n\n    /**\n     * Create AxisScaleMaker.\n     * AxisScaleMaker calculates the limit and step into values of processed data and returns it.\n     * @param {{title: string, min: number, max: number}} axisOptions - options for axis\n     * @param {string} areaType - type of area like series, xAxis, yAxis, circleLegend, legend\n     * @param {string} valueType - type of value like value, x, y, r\n     * @param {string} chartType - type of chart\n     * @param {?object} additionalParams additional parameters\n     * @returns {AxisScaleMaker}\n     * @private\n     */\n    _createAxisScaleMaker: function(axisOptions, areaType, valueType, chartType, additionalParams) {\n        var limit = this._pickLimitFromOptions(axisOptions);\n        var seriesOptions = this.options.series || {};\n\n        chartType = chartType || this.chartType;\n        seriesOptions = seriesOptions[chartType] || seriesOptions;\n\n        return new AxisScaleMaker(tui.util.extend({\n            dataProcessor: this.dataProcessor,\n            boundsMaker: this.boundsMaker,\n            options: {\n                stackType: seriesOptions.stackType,\n                diverging: seriesOptions.diverging,\n                limit: limit\n            },\n            isVertical: this.isVertical,\n            areaType: areaType,\n            valueType: valueType,\n            chartType: chartType\n        }, additionalParams));\n    },\n\n    /**\n     * Make data for tooltip component.\n     * @returns {object} tooltip data\n     * @private\n     */\n    _makeTooltipData: function() {\n        return {\n            isVertical: this.isVertical,\n            userEvent: this.userEvent,\n            chartType: this.chartType\n        };\n    },\n\n    /**\n     * Make rendering data for axis type chart.\n     * @returns {object} rendering data.\n     * @private\n     */\n    _makeRenderingData: function() {\n        return {};\n    },\n\n    /**\n     * Attach custom event.\n     * @param {Array.&lt;object>} serieses serieses\n     * @private\n     */\n    _attachCustomEvent: function(serieses) {\n        var legend = this.componentManager.get('legend');\n        var customEvent = this.componentManager.get('customEvent');\n\n        serieses = serieses || this.componentManager.where({componentType: 'series'});\n\n        if (tui.util.pick(this.options.series, 'zoomable')) {\n            customEvent.on('zoom', this.onZoom, this);\n            customEvent.on('resetZoom', this.onResetZoom, this);\n        }\n\n        if (legend) {\n            legend.on('changeCheckedLegends', this.onChangeCheckedLegends, this);\n            tui.util.forEach(serieses, function(series) {\n                var selectLegendEventName = renderUtil.makeCustomEventName('select', series.chartType, 'legend');\n                legend.on(selectLegendEventName, series.onSelectLegend, series);\n            });\n        }\n    },\n\n    /**\n     * Make axes data, used in a axis component like yAxis, xAxis, rightYAxis.\n     * @abstract\n     * @private\n     */\n    _makeAxesData: function() {},\n\n    /**\n     * Update dimensions.\n     * @abstract\n     * @private\n     */\n    _updateDimensions: function() {},\n\n    /**\n     * Add data ratios.\n     * @private\n     * @abstract\n     */\n    _addDataRatios: function() {},\n\n    /**\n     * Execute component function.\n     * @param {string} funcName function name\n     * @private\n     */\n    _executeComponentFunc: function(funcName) {\n        this.componentManager.each(function(component) {\n            if (component[funcName]) {\n                component[funcName]();\n            }\n        });\n    },\n\n    /**\n     * Register axes data, used in a axis component like yAxis, xAxis.\n     * @private\n     */\n    _registerAxesData: function() {\n        var axesData = this._makeAxesData();\n        this.boundsMaker.registerAxesData(axesData);\n    },\n\n    /**\n     * Update axesData.\n     * @private\n     * @abstract\n     */\n    _updateAxesData: function() {},\n\n    /**\n     * Render.\n     * @param {function} onRender render callback function\n     * @private\n     */\n    _render: function(onRender) {\n        var labelAxisOptions = (this.isVertical ? this.options.xAxis : this.options.yAxis) || {};\n        var renderingData;\n\n        this._executeComponentFunc('registerDimension');\n        this._registerAxesData();\n        this._executeComponentFunc('registerAdditionalDimension');\n        this.boundsMaker.registerSeriesDimension();\n\n        if (this.hasAxes &amp;&amp; predicate.isAutoTickInterval(labelAxisOptions.tickInterval)) {\n            this._updateAxesData();\n        }\n\n        this._updateDimensions();\n\n        this.boundsMaker.registerBoundsData();\n        this._addDataRatios();\n\n        renderingData = this._makeRenderingData();\n\n        onRender(renderingData);\n\n        this._sendSeriesData();\n    },\n\n    /**\n     * Render chart.\n     * @returns {HTMLElement} chart element\n     */\n    render: function() {\n        var el = dom.create('DIV', this.className),\n            self = this;\n\n        dom.addClass(el, 'tui-chart');\n        this._renderTitle(el);\n        renderUtil.renderDimension(el, this.boundsMaker.getDimension('chart'));\n        renderUtil.renderBackground(el, this.theme.chart.background);\n        renderUtil.renderFontFamily(el, this.theme.chart.fontFamily);\n\n        this._render(function(renderingData) {\n            self._renderComponents(renderingData, 'render', el);\n        });\n\n        this._attachCustomEvent();\n        this.chartContainer = el;\n\n        return el;\n    },\n\n    /**\n     * Filter raw data belong to checked legend.\n     * @param {object} rawData raw data\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @returns {object} rawData\n     * @private\n     */\n    _filterCheckedRawData: function(rawData, checkedLegends) {\n        var cloneData = JSON.parse(JSON.stringify(rawData));\n\n        if (tui.util.isArray(cloneData.series)) {\n            cloneData.series = tui.util.filter(cloneData.series, function(series, index) {\n                return checkedLegends[index];\n            });\n        } else {\n            tui.util.forEach(cloneData.series, function(serieses, chartType) {\n                if (!checkedLegends[chartType]) {\n                    cloneData.series[chartType] = [];\n                } else if (checkedLegends[chartType].length) {\n                    cloneData.series[chartType] = tui.util.filter(serieses, function(series, index) {\n                        return checkedLegends[chartType][index];\n                    });\n                }\n            });\n        }\n\n        return cloneData;\n    },\n\n    /**\n     * Make rerendering data.\n     * @param {object} renderingData rendering data\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @returns {object} rendering data\n     * @private\n     */\n    _makeRerenderingData: function(renderingData, checkedLegends) {\n        var tooltipData = this._makeTooltipData();\n        var serieses = this.componentManager.where({componentType: 'series'});\n\n        renderingData.tooltip = tui.util.extend({\n            checkedLegends: checkedLegends\n        }, tooltipData, renderingData.tooltip);\n\n        tui.util.forEach(serieses, function(series) {\n            renderingData[series.componentName] = tui.util.extend({\n                checkedLegends: checkedLegends[series.seriesName] || checkedLegends\n            }, renderingData[series.componentName]);\n        });\n\n        return renderingData;\n    },\n\n    /**\n     * Rerender.\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @param {?object} rawData rawData\n     * @private\n     */\n    _rerender: function(checkedLegends, rawData) {\n        var self = this;\n        var dataProcessor = this.dataProcessor;\n\n        if (!rawData) {\n            rawData = this._filterCheckedRawData(dataProcessor.getZoomedRawData(), checkedLegends);\n        }\n\n        this.axisScaleMakerMap = null;\n        this.dataProcessor.initData(rawData);\n        this.boundsMaker.initBoundsData();\n        this._render(function(renderingData) {\n            renderingData = self._makeRerenderingData(renderingData, checkedLegends);\n            self._renderComponents(renderingData, 'rerender');\n        });\n    },\n\n    /**\n     * On change checked legend.\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @param {?object} rawData rawData\n     * @param {?object} boundsParams addition params for calculating bounds\n     */\n    onChangeCheckedLegends: function(checkedLegends, rawData, boundsParams) {\n        this._rerender(checkedLegends, rawData, boundsParams);\n    },\n\n    /**\n     * On zoom.\n     * @abstract\n     */\n    onZoom: function() {},\n\n    /**\n     * On reset zoom.\n     * @abstract\n     */\n    onResetZoom: function() {},\n\n    /**\n     * Render title.\n     * @param {HTMLElement} container - container\n     * @private\n     */\n    _renderTitle: function(container) {\n        var chartOptions = this.options.chart || {};\n        var titleElement = renderUtil.renderTitle(chartOptions.title, this.theme.title, 'tui-chart-title');\n\n        dom.append(container, titleElement);\n    },\n\n    /**\n     * Render components.\n     * @param {object} renderingData data for rendering\n     * @param {string} funcName function name for execution\n     * @param {HTMLElement} container container element\n     * @private\n     */\n    _renderComponents: function(renderingData, funcName, container) {\n        var paper;\n        var elements = this.componentManager.map(function(component) {\n            var element = null;\n            var data, result;\n\n            if (component[funcName]) {\n                data = renderingData[component.componentName] || renderingData || {};\n                data.paper = paper;\n                result = component[funcName](data);\n\n                if (result &amp;&amp; result.container) {\n                    element = result.container;\n                    paper = result.paper;\n                } else {\n                    element = result;\n                }\n            }\n\n            return element;\n        });\n\n        if (container) {\n            dom.append(container, elements);\n        }\n    },\n\n    /**\n     * Send series data to custom event component.\n     * @param {string} chartType - type of chart\n     * @private\n     */\n    _sendSeriesData: function(chartType) {\n        var self = this,\n            customEvent = this.componentManager.get('customEvent'),\n            seriesInfos, chartTypes;\n\n        if (!customEvent) {\n            return;\n        }\n\n        chartTypes = this.chartTypes || [chartType || this.chartType];\n        seriesInfos = tui.util.map(chartTypes, function(seriesName) {\n            var _chartType = self.dataProcessor.findChartType(seriesName);\n            var componentName = (seriesName || _chartType) + 'Series';\n            var component = self.componentManager.get(componentName) || self.componentManager.get('series');\n\n            return {\n                chartType: _chartType,\n                data: component.getSeriesData()\n            };\n        });\n\n        customEvent.initCustomEventData(seriesInfos);\n    },\n\n    /**\n     * Make event name for animation.\n     * @param {string} chartType chart type\n     * @param {string} prefix prefix\n     * @returns {string} event name\n     * @private\n     */\n    _makeAnimationEventName: function(chartType, prefix) {\n        return prefix + chartType.substring(0, 1).toUpperCase() + chartType.substring(1) + 'Animation';\n    },\n\n    /**\n     * Animate chart.\n     */\n    animateChart: function() {\n        this.componentManager.each(function(component) {\n            if (component.animateComponent) {\n                component.animateComponent();\n            }\n        });\n    },\n\n    /**\n     * Register of user event.\n     * @param {string} eventName event name\n     * @param {function} func event callback\n     */\n    on: function(eventName, func) {\n        this.userEvent.register(eventName, func);\n    },\n\n    /**\n     * Update dimension of chart.\n     * @param {{width: number, height: number}} dimension dimension\n     * @returns {boolean} whether updated or not\n     * @private\n     */\n    _updateChartDimension: function(dimension) {\n        var updated = false;\n        var chartOptions = this.options.chart;\n\n        if (dimension.width &amp;&amp; chartOptions.width !== dimension.width) {\n            chartOptions.width = dimension.width;\n            updated = true;\n        }\n\n        if (dimension.height &amp;&amp; chartOptions.height !== dimension.height) {\n            chartOptions.height = dimension.height;\n            updated = true;\n        }\n\n        return updated;\n    },\n\n    /**\n     * Public API for resizable.\n     * @param {object} dimension dimension\n     *      @param {number} dimension.width width\n     *      @param {number} dimension.height height\n     * @api\n     */\n    resize: function(dimension) {\n        var self = this;\n        var updated;\n\n        if (!dimension) {\n            return;\n        }\n\n        updated = this._updateChartDimension(dimension);\n\n        if (!updated) {\n            return;\n        }\n\n        this.boundsMaker.initBoundsData(this.options.chart);\n        renderUtil.renderDimension(this.chartContainer, this.boundsMaker.getDimension('chart'));\n\n        this._render(function(renderingData) {\n            self._renderComponents(renderingData, 'resize');\n        });\n    },\n\n    /**\n     * Set tooltip align option.\n     * @param {string} align align (left|center|right, top|middle|bottom)\n     * @api\n     */\n    setTooltipAlign: function(align) {\n        this.componentManager.get('tooltip').setAlign(align);\n    },\n\n    /**\n     * Set position option.\n     * @param {object} position moving position\n     *      @param {number} position.left left\n     *      @param {number} position.top top\n     * @api\n     */\n    setTooltipPosition: function(position) {\n        this.componentManager.get('tooltip').setPosition(position);\n    },\n\n    /**\n     * Reset tooltip align option.\n     * @api\n     */\n    resetTooltipAlign: function() {\n        this.componentManager.get('tooltip').resetAlign();\n    },\n\n    /**\n     * Reset tooltip position.\n     * @api\n     */\n    resetTooltipPosition: function() {\n        this.componentManager.get('tooltip').resetPosition();\n    },\n\n    /**\n     * Show series label.\n     * @api\n     */\n    showSeriesLabel: function() {\n        var serieses = this.componentManager.where({componentType: 'series'});\n\n        tui.util.forEachArray(serieses, function(series) {\n            series.showLabel();\n        });\n    },\n\n    /**\n     * Hide series label.\n     * @api\n     */\n    hideSeriesLabel: function() {\n        var serieses = this.componentManager.where({componentType: 'series'});\n\n        tui.util.forEachArray(serieses, function(series) {\n            series.hideLabel();\n        });\n    },\n\n    /**\n     * Add data.\n     * @abstract\n     */\n    addData: function() {}\n});\n\nmodule.exports = ChartBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"