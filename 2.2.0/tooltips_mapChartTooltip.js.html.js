tui.util.defineNamespace("fedoc.content", {});
fedoc.content["tooltips_mapChartTooltip.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Tooltip component for map chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    TooltipBase = require('./tooltipBase'),\n    singleTooltipMixer = require('./singleTooltipMixer'),\n    tooltipTemplate = require('./tooltipTemplate');\n\n/**\n * @classdesc MapChartTooltip component.\n * @class MapChartTooltip\n */\nvar MapChartTooltip = tui.util.defineClass(TooltipBase, /** @lends MapChartTooltip.prototype */ {\n    /**\n     * Map chart tooltip component.\n     * @constructs MapChartTooltip\n     * @override\n     */\n    init: function() {\n        /**\n         * Map model\n         * @type {MapChartMapModel}\n         */\n        this.mapModel = null;\n\n        TooltipBase.apply(this, arguments);\n    },\n\n    /**\n     * Make tooltip html.\n     * @param {{name: string, value: number}} datum tooltip datum\n     * @returns {string} tooltip html\n     * @private\n     */\n    _makeTooltipHtml: function(datum) {\n        return tooltipTemplate.tplMapChartDefault(datum);\n    },\n\n    /**\n     * Make single tooltip html.\n     * @param {string} chartType chart type\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @returns {string} tooltip html\n     * @private\n     */\n    _makeSingleTooltipHtml: function(chartType, indexes) {\n        var datum = this.mapModel.getDatum(indexes.index),\n            suffix = this.options.suffix ? ' ' + this.options.suffix : '';\n\n        return this.templateFunc({\n            name: datum.name || datum.code,\n            value: datum.label,\n            suffix: suffix\n        });\n    },\n\n    /**\n     * Make parameters for show tooltip user event.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @param {object} additionParams addition parameters\n     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} parameters for show tooltip\n     * @private\n     */\n    _makeShowTooltipParams: function(indexes, additionParams) {\n        var datum = this.mapModel.getDatum(indexes.index),\n            params;\n\n        params = tui.util.extend({\n            chartType: this.chartType,\n            code: datum.code,\n            name: datum.name,\n            value: datum.label,\n            index: indexes.index\n        }, additionParams);\n\n        return params;\n    },\n\n\n    /**\n     * Set default align option of tooltip.\n     * @private\n     * @override\n     */\n    _setDefaultTooltipPositionOption: function() {\n        if (!this.options.align) {\n            this.options.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;\n        }\n    },\n\n    /**\n     * Render.\n     * @param {{mapModel: MapChartMapModel}} data data for rendering\n     * @returns {HTMLElement} tooltip element\n     */\n    render: function(data) {\n        this.mapModel = data.mapModel;\n\n        return TooltipBase.prototype.render.call(this);\n    }\n});\n\nsingleTooltipMixer.mixin(MapChartTooltip);\nmodule.exports = MapChartTooltip;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"