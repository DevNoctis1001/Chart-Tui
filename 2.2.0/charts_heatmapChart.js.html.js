tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_heatmapChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Heatmap chart is a graphical representation of data where the individual values contained\n *                      in a matrix are represented as colors.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase');\nvar ColorSpectrum = require('./colorSpectrum');\nvar Series = require('../series/heatmapChartSeries');\nvar chartConst = require('../const');\nvar axisTypeMixer = require('./axisTypeMixer');\nvar axisDataMaker = require('../helpers/axisDataMaker');\nvar Legend = require('../legends/spectrumLegend');\n\nvar HeatmapChart = tui.util.defineClass(ChartBase, /** @lends HeatmapChart.prototype */ {\n    /**\n     *\n     * className\n     * @type {string}\n     */\n    className: 'tui-heatmap-chart',\n    /**\n     * Heatmap chart is a graphical representation of data where the individual values contained\n     *      in a matrix are represented as colors.\n     * @constructs HeatmapChart\n     * @extends ChartBase\n     * @mixes axisTypeMixer\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(rawData, theme, options) {\n        options.tooltip = options.tooltip || {};\n\n        if (!options.tooltip.align) {\n            options.tooltip.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;\n        }\n\n        options.tooltip.grouped = false;\n\n        ChartBase.call(this, {\n            rawData: rawData,\n            theme: theme,\n            options: options,\n            hasAxes: true,\n            isVertical: true\n        });\n\n        this._addComponents(options.chartType);\n    },\n\n    /**\n     * Make map for AxisScaleMaker of axes(xAxis, yAxis).\n     * @returns {object}\n     * @private\n     */\n    _makeAxisScaleMakerMap: function() {\n        return {\n            legend: this._createAxisScaleMaker({}, 'legend', null, this.chartType, {\n                valueCount: chartConst.SPECTRUM_LEGEND_TICK_COUNT\n            })\n        };\n    },\n\n    /**\n     * Add components.\n     * @param {string} chartType chart type\n     * @private\n     */\n    _addComponents: function() {\n        this._addComponentsForAxisType({\n            axis: [\n                {\n                    name: 'yAxis',\n                    isLabel: true,\n                    isVertical: true\n                },\n                {\n                    name: 'xAxis',\n                    isLabel: true\n                }\n            ],\n            legend: {\n                LegendClass: Legend\n            },\n            series: [\n                {\n                    name: 'heatmapSeries',\n                    SeriesClass: Series\n                }\n            ],\n            tooltip: true,\n            customEvent: true\n        });\n    }\n});\n\ntui.util.extend(HeatmapChart.prototype, axisTypeMixer);\n\n/**\n * Add data ratios for rendering graph.\n * @private\n * @override\n */\nHeatmapChart.prototype._addDataRatios = function() {\n    var limit = this._getAxisScaleMakerMap().legend.getLimit();\n\n    this.dataProcessor.addDataRatios(limit, null, this.chartType);\n};\n\n/**\n * Make rendering data for delivery to each component.\n * @returns {object}\n * @private\n * @override\n */\nHeatmapChart.prototype._makeRenderingData = function() {\n    var data = axisTypeMixer._makeRenderingData.call(this);\n    var seriesTheme = this.theme.series;\n    var colorSpectrum = new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor);\n\n    data.legend = {\n        colorSpectrum: colorSpectrum,\n        axesData: axisDataMaker.makeValueAxisData({\n            axisScaleMaker: this._getAxisScaleMakerMap().legend,\n            isVertical: true\n        })\n    };\n    data.heatmapSeries.colorSpectrum = colorSpectrum;\n\n    return data;\n};\n\n/**\n * Attach custom event between components.\n * @private\n * @override\n */\nHeatmapChart.prototype._attachCustomEvent = function() {\n    var customEvent = this.componentManager.get('customEvent');\n    var heatmapSeries = this.componentManager.get('heatmapSeries');\n    var legend = this.componentManager.get('legend');\n\n    axisTypeMixer._attachCustomEvent.call(this);\n\n    customEvent.on('showTooltip', heatmapSeries.onShowTooltip, heatmapSeries);\n    customEvent.on('hideTooltip', legend.onHideWedge, legend);\n\n    heatmapSeries.on('showWedge', legend.onShowWedge, legend);\n};\n\nmodule.exports = HeatmapChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"