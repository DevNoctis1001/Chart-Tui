tui.util.defineNamespace("fedoc.content", {});
fedoc.content["customEvents_boundsTypeCustomEvent.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview BoundsTypeCustomEvent is event handle layer for bounds.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar CustomEventBase = require('./customEventBase');\nvar chartConst = require('../const');\nvar predicate = require('../helpers/predicate');\nvar dom = require('../helpers/domHandler');\n\nvar BoundsTypeCustomEvent = tui.util.defineClass(CustomEventBase, /** @lends BoundsTypeCustomEvent.prototype */ {\n    /**\n     * BoundsTypeCustomEvent is event handle layer for line type chart.\n     * @constructs BoundsTypeCustomEvent\n     * @extends CustomEventBase\n     */\n    init: function() {\n        CustomEventBase.apply(this, arguments);\n\n        /**\n         * previous found data\n         * @type {null | object}\n         */\n        this.prevFoundData = null;\n\n        /**\n         * history array for treemap chart.\n         * @type {number}\n         */\n        this.zoomHistory = [-1];\n\n        /**\n         * button for zoom history back\n         * @type {null | HTMLElement}\n         */\n        this.historyBackBtn = null;\n    },\n\n    /**\n     * Hide tooltip.\n     * @private\n     */\n    _hideTooltip: function() {\n        this.fire('hideTooltip', this.prevFoundData);\n        this.prevFoundData = null;\n        this.styleCursor(false);\n    },\n\n    /**\n     * Style css cursor.\n     * @param {boolean} hasChild - whether has child or not\n     */\n    styleCursor: function(hasChild) {\n        var container = this.customEventContainer;\n        if (hasChild) {\n            container.style.cursor = 'pointer';\n        } else {\n            container.style.cursor = 'default';\n        }\n    },\n\n    /**\n     * On mousemove.\n     * @param {MouseEvent} e - mouse event\n     * @private\n     * @override\n     */\n    _onMousemove: function(e) {\n        var foundData = this._findDataFromBoundsCoordinateModel(this.customEventContainer, e.clientX, e.clientY);\n        var seriesItem;\n\n        if (!this._isChangedSelectData(this.prevFoundData, foundData)) {\n            return;\n        }\n\n        if (this.prevFoundData) {\n            this._hideTooltip();\n        }\n\n        this.prevFoundData = foundData;\n\n        if (!foundData) {\n            return;\n        }\n\n        if (predicate.isTreemapChart(this.chartType)) {\n            seriesItem = this._getSeriesItemByIndexes(foundData.indexes);\n            this.styleCursor(seriesItem.hasChild);\n        }\n\n        this.fire('showTooltip', foundData);\n    },\n\n    /**\n     * Zoom history back.\n     * @private\n     */\n    _zoomHistoryBack: function() {\n        var index = this.zoomHistory[this.zoomHistory.length - 2];\n\n        this.zoomHistory.pop();\n        this.fire('zoom', index);\n\n        if (this.zoomHistory.length === 1) {\n            this.customEventContainer.removeChild(this.historyBackBtn);\n            this.historyBackBtn = null;\n        }\n    },\n\n    /**\n     * Get seriesItem by indexes\n     * @param {{groupIndex: number, index: number}} indexes - indexes\n     * @returns {SeriesItem}\n     * @private\n     */\n    _getSeriesItemByIndexes: function(indexes) {\n        var seriesDataModel = this.dataProcessor.getSeriesDataModel(chartConst.CHART_TYPE_TREEMAP);\n\n        return seriesDataModel.getSeriesItem(indexes.groupIndex, indexes.index, true);\n    },\n\n    /**\n     * On mousemove.\n     * @param {MouseEvent} e - mouse event\n     * @private\n     * @override\n     */\n    _onClick: function(e) {\n        var target = e.target || e.srcElement;\n        var foundData, seriesItem;\n\n        if (!predicate.isTreemapChart(this.chartType)) {\n            return;\n        }\n\n        if (dom.hasClass(target, chartConst.CLASS_NAME_RESET_ZOOM_BTN)) {\n            this._hideTooltip();\n            this._zoomHistoryBack();\n\n            return;\n        }\n\n        foundData = this._findDataFromBoundsCoordinateModel(target, e.clientX, e.clientY);\n\n        if (foundData) {\n            seriesItem = this._getSeriesItemByIndexes(foundData.indexes);\n\n            if (!seriesItem.hasChild) {\n                return;\n            }\n\n            this._hideTooltip();\n            this.fire('zoom', foundData.indexes.index);\n        }\n    },\n\n    /**\n     * On mouseout.\n     * @override\n     */\n    _onMouseout: function(e) {\n        var bound = this._getContainerBound();\n        var clientX = e.clientX;\n        var clientY = e.clientY;\n\n        if ((bound.left &lt;= clientX) &amp;&amp; (bound.top &lt;= clientY) &amp;&amp;\n            (bound.right >= clientX) &amp;&amp; (bound.bottom >= clientY)) {\n            return;\n        }\n\n        if (this.prevFoundData) {\n            this._hideTooltip();\n        }\n\n        CustomEventBase.prototype._onMouseout.call(this);\n    },\n\n    /**\n     * On after zoom.\n     * @param {number} index - index of target seriesItem\n     */\n    onAfterZoom: function(index) {\n        if (!this.historyBackBtn) {\n            this.historyBackBtn = dom.create('DIV', chartConst.CLASS_NAME_RESET_ZOOM_BTN);\n            this.historyBackBtn.innerHTML = '&lt; Back';\n            dom.append(this.customEventContainer, this.historyBackBtn);\n        }\n\n        if (this.zoomHistory[this.zoomHistory.length - 1] !== index) {\n            this.zoomHistory.push(index);\n        }\n    }\n});\n\nmodule.exports = BoundsTypeCustomEvent;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"