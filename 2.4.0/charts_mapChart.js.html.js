tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_mapChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Map chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase');\nvar mapManager = require('../factories/mapManager');\nvar MapChartMapModel = require('./mapChartMapModel');\nvar ColorSpectrum = require('./colorSpectrum');\nvar MapChartDataProcessor = require('../models/data/mapChartDataProcessor');\nvar Series = require('../components/series/mapChartSeries');\nvar Zoom = require('../components/series/zoom');\nvar Legend = require('../components/legends/spectrumLegend');\nvar MapChartTooltip = require('../components/tooltips/mapChartTooltip');\nvar mapChartCustomEvent = require('../components/customEvents/mapChartCustomEvent');\n\nvar MapChart = tui.util.defineClass(ChartBase, /** @lends MapChart.prototype */ {\n    /**\n     * Map chart.\n     * @constructs MapChart\n     * @extends ChartBase\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(rawData, theme, options) {\n        /**\n         * class name\n         * @type {string}\n         */\n        this.className = 'tui-map-chart';\n\n        options.map = mapManager.get(options.map);\n        options.tooltip = options.tooltip || {};\n        options.legend = options.legend || {};\n\n        ChartBase.call(this, {\n            rawData: rawData,\n            theme: theme,\n            options: options,\n            DataProcessor: MapChartDataProcessor\n        });\n    },\n\n    /**\n     * Add components\n     * @param {object} options chart options\n     * @private\n     */\n    _addComponents: function() {\n        var options = this.options;\n        var seriesTheme = this.theme.series[this.chartType];\n        var colorSpectrum = new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor);\n        var mapModel = new MapChartMapModel(this.dataProcessor, this.options.map);\n\n        options.legend = options.legend || {};\n\n        if (options.legend.visible) {\n            this.componentManager.register('legend', Legend, {\n                colorSpectrum: colorSpectrum\n            });\n        }\n\n        this.componentManager.register('tooltip', MapChartTooltip, tui.util.extend({\n            mapModel: mapModel\n        }, this._makeTooltipData()));\n\n        this.componentManager.register('mapSeries', Series, {\n            libType: options.libType,\n            chartType: options.chartType,\n            componentType: 'series',\n            mapModel: mapModel,\n            colorSpectrum: colorSpectrum\n        });\n\n        this.componentManager.register('zoom', Zoom);\n\n        this.componentManager.register('customEvent', mapChartCustomEvent, {\n            chartType: this.chartType\n        });\n    },\n\n    /**\n     * Get scale option.\n     * @returns {{legend: boolean}}\n     * @private\n     * @override\n     */\n    _getScaleOption: function() {\n        return {\n            legend: true\n        };\n    },\n\n    /**\n     * Add data ratios.\n     * @private\n     * @override\n     */\n    _addDataRatios: function(limitMap) {\n        this.dataProcessor.addDataRatios(limitMap.legend);\n    }\n});\n\nmodule.exports = MapChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"