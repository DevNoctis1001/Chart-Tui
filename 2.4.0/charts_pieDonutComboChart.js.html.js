tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_pieDonutComboChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Pie and Donut Combo chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase');\nvar rawDataHandler = require('../models/data/rawDataHandler');\nvar pieTypeMixer = require('./pieTypeMixer');\nvar comboTypeMixer = require('./comboTypeMixer');\nvar predicate = require('../helpers/predicate');\n\nvar PieDonutComboChart = tui.util.defineClass(ChartBase, /** @lends PieDonutComboChart.prototype */ {\n    /**\n     * className\n     * @type {string}\n     */\n    className: 'tui-combo-chart',\n\n    /**\n     * Pie and Donut Combo chart.\n     * @constructs PieDonutComboChart\n     * @extends ChartBase\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(rawData, theme, options) {\n        /**\n         * chart types.\n         * @type {Array.&lt;string>}\n         */\n        this.seriesNames = tui.util.keys(rawData.series).sort();\n\n        ChartBase.call(this, {\n            rawData: rawData,\n            theme: theme,\n            options: options,\n            isVertical: true\n        });\n    },\n\n    /**\n     * Make data for adding series component.\n     * @returns {Array.&lt;object>}\n     * @private\n     */\n    _makeDataForAddingSeriesComponent: function() {\n        var seriesNames = this.seriesNames;\n        var optionsMap = this._makeOptionsMap(seriesNames);\n        var dataProcessor = this.dataProcessor;\n        var isShowOuterLabel = tui.util.any(optionsMap, predicate.isShowOuterLabel);\n        var seriesData = tui.util.map(seriesNames, function(seriesName) {\n            var chartType = dataProcessor.findChartType(seriesName);\n            var additionalParams = {\n                chartType: chartType,\n                seriesName: seriesName,\n                options: optionsMap[seriesName],\n                isShowOuterLabel: isShowOuterLabel,\n                isCombo: true\n            };\n\n            return {\n                name: seriesName + 'Series',\n                additionalParams: additionalParams\n            };\n        });\n\n        return seriesData;\n    },\n\n    /**\n     * Add components\n     * @private\n     */\n    _addComponents: function() {\n        this._addLegendComponent(this.seriesNames);\n        this._addTooltipComponent();\n        this._addSeriesComponents(this._makeDataForAddingSeriesComponent());\n        this._addCustomEventComponent();\n    },\n\n    /**\n     * Add data ratios.\n     * @private\n     * @override\n     */\n    _addDataRatios: function() {\n        var self = this;\n        var seriesNames = this.seriesNames || [this.chartType];\n\n        tui.util.forEachArray(seriesNames, function(chartType) {\n            self.dataProcessor.addDataRatiosOfPieChart(chartType);\n        });\n    },\n\n    /**\n     * On change selected legend.\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @override\n     */\n    onChangeCheckedLegends: function(checkedLegends) {\n        var originalRawData = this.dataProcessor.getOriginalRawData();\n        var rawData = rawDataHandler.filterCheckedRawData(originalRawData, checkedLegends);\n\n        ChartBase.prototype.onChangeCheckedLegends.call(this, checkedLegends, rawData, {\n            seriesNames: this.seriesNames\n        });\n    }\n});\n\ntui.util.extend(PieDonutComboChart.prototype, pieTypeMixer, comboTypeMixer);\n\nmodule.exports = PieDonutComboChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"