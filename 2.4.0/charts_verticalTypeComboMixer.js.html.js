tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_verticalTypeComboMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Column and Line Combo chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar predicate = require('../helpers/predicate');\nvar calculator = require('../helpers/calculator');\nvar renderUtil = require('../helpers/renderUtil');\nvar ColumnChartSeries = require('../components/series/columnChartSeries');\nvar LineChartSeries = require('../components/series/lineChartSeries');\nvar AreaChartSeries = require('../components/series/areaChartSeries');\n\nvar verticalTypeComboMixer = {\n    /**\n     * Column and Line Combo chart.\n     * @constructs verticalTypeComboMixer\n     * @extends ChartBase\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} options chart options\n     */\n    _initForVerticalTypeCombo: function(rawData, options) {\n        var chartTypesMap = this._makeChartTypesMap(rawData.series, options.yAxis, options.chartType);\n\n        options.tooltip = options.tooltip || {};\n        options.tooltip.grouped = true;\n\n        /**\n         * chart types map\n         * @type {Object}\n         */\n        this.chartTypes = chartTypesMap.chartTypes;\n\n        /**\n         * series names\n         * @type {Object|Array.&lt;T>}\n         */\n        this.seriesNames = chartTypesMap.seriesNames;\n\n        /**\n         * chart types for options\n         */\n        this.optionChartTypes = chartTypesMap.optionChartTypes;\n\n        /**\n         * whether has right y axis or not\n         * @type {boolean}\n         */\n        this.hasRightYAxis = tui.util.isArray(options.yAxis) &amp;&amp; options.yAxis.length > 1;\n\n        /**\n         * yAxis options map\n         * @type {object}\n         */\n        this.yAxisOptionsMap = this._makeYAxisOptionsMap(chartTypesMap.chartTypes, options.yAxis);\n    },\n\n    /**\n     * Make chart types map.\n     * @param {object} rawSeriesData raw series data\n     * @param {object} yAxisOption option for y axis\n     * @returns {object} chart types map\n     * @private\n     */\n    _makeChartTypesMap: function(rawSeriesData, yAxisOption) {\n        var seriesNames = tui.util.keys(rawSeriesData).sort();\n        var optionChartTypes = this._getYAxisOptionChartTypes(seriesNames, yAxisOption);\n        var chartTypes = optionChartTypes.length ? optionChartTypes : seriesNames;\n        var validChartTypes = tui.util.filter(optionChartTypes, function(_chartType) {\n            return rawSeriesData[_chartType].length;\n        });\n        var chartTypesMap;\n\n        if (validChartTypes.length === 1) {\n            chartTypesMap = {\n                chartTypes: validChartTypes,\n                seriesNames: validChartTypes,\n                optionChartTypes: !optionChartTypes.length ? optionChartTypes : validChartTypes\n            };\n        } else {\n            chartTypesMap = {\n                chartTypes: chartTypes,\n                seriesNames: seriesNames,\n                optionChartTypes: optionChartTypes\n            };\n        }\n\n        return chartTypesMap;\n    },\n\n    /**\n     * Make yAxis options map.\n     * @param {Array.&lt;string>} chartTypes chart types\n     * @param {?object} yAxisOptions yAxis options\n     * @returns {{column: ?object, line: ?object}} options map\n     * @private\n     */\n    _makeYAxisOptionsMap: function(chartTypes, yAxisOptions) {\n        var optionsMap = {};\n        yAxisOptions = yAxisOptions || {};\n        tui.util.forEachArray(chartTypes, function(chartType, index) {\n            optionsMap[chartType] = yAxisOptions[index] || yAxisOptions;\n        });\n\n        return optionsMap;\n    },\n\n    /**\n     * Set additional parameter for making y axis scale option.\n     * @param {{isSingleYAxis: boolean}} additionalOptions - additional options\n     * @private\n     */\n    setAdditionalOptions: function(additionalOptions) {\n        var dataProcessor = this.dataProcessor;\n\n        tui.util.forEach(this.options.series, function(seriesOption, seriesName) {\n            var chartType;\n\n            if (!seriesOption.stackType) {\n                return;\n            }\n\n            chartType = dataProcessor.findChartType(seriesName);\n\n            if (!predicate.isAllowedStackOption(chartType)) {\n                return;\n            }\n\n            additionalOptions.chartType = chartType;\n            additionalOptions.stackType = seriesOption.stackType;\n        });\n    },\n\n    /**\n     * Make y axis scale option.\n     * @param {string} name - component name\n     * @param {string} chartType - chart type\n     * @param {boolean} isSingleYAxis - whether single y axis or not\n     * @returns {{options: object, areaType: string, chartType: string, additionalParams: object}}\n     * @private\n     */\n    _makeYAxisScaleOption: function(name, chartType, isSingleYAxis) {\n        var yAxisOption = this.yAxisOptionsMap[chartType];\n        var additionalOptions = {\n            isSingleYAxis: !!isSingleYAxis\n        };\n\n        if (isSingleYAxis &amp;&amp; this.options.series) {\n            this.setAdditionalOptions(additionalOptions);\n        }\n\n        return {\n            options: yAxisOption,\n            areaType: 'yAxis',\n            chartType: chartType,\n            additionalOptions: additionalOptions\n        };\n    },\n\n    /**\n     * Get scale option.\n     * @returns {{\n     *      yAxis: {options: object, areaType: string, chartType: string, additionalParams: object},\n     *      rightYAxis: {options: object, areaType: string, chartType: string, additionalParams: object}\n     * }}\n     * @private\n     * @override\n     */\n    _getScaleOption: function() {\n        var isSingleYAxis = this.optionChartTypes.length &lt; 2;\n        var scaleOption = {\n            yAxis: this._makeYAxisScaleOption('yAxis', this.chartTypes[0], isSingleYAxis)\n        };\n\n        if (!isSingleYAxis) {\n            scaleOption.rightYAxis = this._makeYAxisScaleOption('rightYAxis', this.chartTypes[1]);\n        }\n\n        return scaleOption;\n    },\n\n    /**\n     * Make data for adding series component.\n     * @param {Array.&lt;string>} seriesNames - series names\n     * @returns {Array.&lt;object>}\n     * @private\n     */\n    _makeDataForAddingSeriesComponent: function(seriesNames) {\n        var seriesClasses = {\n            column: ColumnChartSeries,\n            line: LineChartSeries,\n            area: AreaChartSeries\n        };\n        var optionsMap = this._makeOptionsMap(seriesNames);\n        var dataProcessor = this.dataProcessor;\n        var serieses = tui.util.map(seriesNames, function(seriesName) {\n            var chartType = dataProcessor.findChartType(seriesName);\n            var data = {\n                allowNegativeTooltip: true,\n                chartType: chartType,\n                seriesName: seriesName,\n                options: optionsMap[seriesName]\n            };\n\n            return {\n                name: seriesName + 'Series',\n                SeriesClass: seriesClasses[chartType],\n                data: data\n            };\n        });\n\n        return serieses;\n    },\n\n    /**\n     * Add components.\n     * @private\n     */\n    _addComponents: function() {\n        var axes = [\n            {\n                name: 'yAxis',\n                seriesName: this.seriesNames[0],\n                isVertical: true\n            },\n            {\n                name: 'xAxis'\n            }\n        ];\n        var serieses = this._makeDataForAddingSeriesComponent(this.seriesNames);\n\n        if (this.optionChartTypes.length) {\n            axes.push({\n                name: 'rightYAxis',\n                seriesName: this.seriesNames[1],\n                isVertical: true\n            });\n        }\n\n        this._addComponentsForAxisType({\n            seriesNames: this.seriesNames,\n            axis: axes,\n            series: serieses,\n            plot: true\n        });\n    },\n\n    /**\n     * Get y axis option chart types.\n     * @param {Array.&lt;string>} chartTypes chart types\n     * @param {object} yAxisOption - options for y axis\n     * @returns {Array.&lt;string>}\n     * @private\n     */\n    _getYAxisOptionChartTypes: function(chartTypes, yAxisOption) {\n        var resultChartTypes = chartTypes.slice();\n        var yAxisOptions = [].concat(yAxisOption || []);\n        var isReverse = false;\n        var optionChartTypes;\n\n        if (!yAxisOptions.length || (yAxisOptions.length === 1 &amp;&amp; !yAxisOptions[0].chartType)) {\n            resultChartTypes = [];\n        } else if (yAxisOptions.length) {\n            optionChartTypes = tui.util.map(yAxisOptions, function(option) {\n                return option.chartType;\n            });\n\n            tui.util.forEachArray(optionChartTypes, function(chartType, index) {\n                isReverse = isReverse || (chartType &amp;&amp; resultChartTypes[index] !== chartType || false);\n            });\n\n            if (isReverse) {\n                resultChartTypes.reverse();\n            }\n        }\n\n        return resultChartTypes;\n    },\n\n    /**\n     * Increase yAxis tick count.\n     * @param {number} increaseTickCount increase tick count\n     * @param {object} yAxisData yAxis data\n     * @private\n     */\n    _increaseYAxisTickCount: function(increaseTickCount, yAxisData) {\n        var formatFunctions = this.dataProcessor.getFormatFunctions();\n        var labels;\n\n        yAxisData.limit.max += yAxisData.step * increaseTickCount;\n        labels = calculator.makeLabelsFromLimit(yAxisData.limit, yAxisData.step);\n        yAxisData.labels = renderUtil.formatValues(labels, formatFunctions, this.chartType, 'yAxis');\n        yAxisData.tickCount += increaseTickCount;\n        yAxisData.validTickCount += increaseTickCount;\n    },\n\n    /**\n     * Update tick count to make the same tick count of y Axes(yAxis, rightYAxis).\n     * @param {{yAxis: object, rightYAxis: object}} axesData - axesData\n     * @private\n     */\n    _updateYAxisTickCount: function(axesData) {\n        var yAxisData = axesData.yAxis;\n        var rightYAxisData = axesData.rightYAxis;\n        var tickCountDiff = rightYAxisData.tickCount - yAxisData.tickCount;\n\n        if (tickCountDiff > 0) {\n            this._increaseYAxisTickCount(tickCountDiff, yAxisData);\n        } else if (tickCountDiff &lt; 0) {\n            this._increaseYAxisTickCount(-tickCountDiff, rightYAxisData);\n        }\n    },\n\n    /**\n     * Mix in.\n     * @param {function} func target function\n     * @ignore\n     */\n    mixin: function(func) {\n        tui.util.extend(func.prototype, this);\n    }\n};\n\n\nmodule.exports = verticalTypeComboMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"