tui.util.defineNamespace("fedoc.content", {});
fedoc.content["components_series_heatmapChartSeries.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Series component for rendering graph of heatmap chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar Series = require('./series');\nvar labelHelper = require('./renderingLabelHelper');\nvar chartConst = require('../../const/');\n\nvar HeatmapChartSeries = tui.util.defineClass(Series, /** @lends HeatmapChartSeries.prototype */ {\n    /**\n     * Series component for rendering graph of heatmap chart.\n     * @constructs HeatmapChartSeries\n     * @param {object} params - parameters\n     * @extends Series\n     */\n    init: function(params) {\n        /**\n         * Color spectrum\n         * @type {ColorSpectrum}\n         */\n        this.colorSpectrum = params.colorSpectrum;\n\n        Series.call(this, params);\n    },\n\n    /**\n     * Make series data.\n     * @returns {{\n     *      groupBounds: Array.&lt;Array.&lt;{left: number, top: number, radius: number}>>,\n     *      seriesDataModel: SeriesDataModel\n     * }} series data\n     * @private\n     * @override\n     */\n    _makeSeriesData: function() {\n        var boundsSet = this._makeBounds();\n\n        return {\n            colorSpectrum: this.colorSpectrum,\n            groupBounds: boundsSet,\n            seriesDataModel: this._getSeriesDataModel()\n        };\n    },\n\n    /**\n     * Make bound for graph rendering.\n     * @param {number} blockWidth - block width\n     * @param {number} blockHeight - block height\n     * @param {number} x - x index\n     * @param {number} y - y index\n     * @returns {{end: {left: number, top: number, width: number, height: number}}}\n     * @private\n     */\n    _makeBound: function(blockWidth, blockHeight, x, y) {\n        var height = this.layout.dimension.height;\n        var left = (blockWidth * x) + chartConst.SERIES_EXPAND_SIZE;\n        var top = height - (blockHeight * (y + 1)) + chartConst.SERIES_EXPAND_SIZE;\n\n        return {\n            end: {\n                left: left,\n                top: top,\n                width: blockWidth,\n                height: blockHeight\n            }\n        };\n    },\n\n    /**\n     * Make bounds for graph rendering.\n     * @returns {Array.&lt;Array.&lt;{left: number, top: number, radius: number}>>} positions\n     * @private\n     */\n    _makeBounds: function() {\n        var self = this;\n        var seriesDataModel = this._getSeriesDataModel();\n        var dimension = this.layout.dimension;\n        var blockWidth = dimension.width / this.dataProcessor.getCategoryCount(false);\n        var blockHeight = dimension.height / this.dataProcessor.getCategoryCount(true);\n\n        return seriesDataModel.map(function(seriesGroup, x) {\n            return seriesGroup.map(function(seriesItem, y) {\n                return self._makeBound(blockWidth, blockHeight, x, y);\n            });\n        });\n    },\n\n    /**\n     * On show tooltip for calling showWedge.\n     * @param {{indexes: {groupIndex: number, index: number}}} params - parameters\n     */\n    onShowTooltip: function(params) {\n        var seriesDataModel = this._getSeriesDataModel();\n        var indexes = params.indexes;\n        var ratio = seriesDataModel.getSeriesItem(indexes.groupIndex, indexes.index).ratio;\n\n        this.eventBus.fire('showWedge', ratio);\n    },\n\n    /**\n     * Render series label.\n     * @param {HTMLElement} labelContainer - series label container\n     * @private\n     */\n    _renderSeriesLabel: function(labelContainer) {\n        var sdm = this._getSeriesDataModel();\n        var boundsSet = this.seriesData.groupBounds;\n        var labelTheme = this.theme.label;\n        var selectedIndex = this.selectedLegendIndex;\n        var positionsSet = labelHelper.boundsToLabelPositions(sdm, boundsSet, labelTheme);\n        var html = labelHelper.makeLabelsHtmlForBoundType(sdm, positionsSet, labelTheme, selectedIndex);\n\n        labelContainer.innerHTML = html;\n    },\n\n    /**\n     * Make exportation data for public event of series type.\n     * @param {object} seriesData - series data\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n    _makeExportationSeriesData: function(seriesData) {\n        return {\n            x: seriesData.indexes.groupIndex,\n            y: seriesData.indexes.index\n        };\n    }\n});\n\nmodule.exports = HeatmapChartSeries;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"