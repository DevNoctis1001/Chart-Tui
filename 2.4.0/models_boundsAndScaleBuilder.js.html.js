tui.util.defineNamespace("fedoc.content", {});
fedoc.content["models_boundsAndScaleBuilder.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Bounds and scale data builder.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar BoundsModel = require('../models/bounds/boundsModel');\nvar ScaleDataModel = require('../models/scaleData/scaleDataModel');\nvar chartConst = require('../const');\nvar predicate = require('../helpers/predicate');\n\n/**\n * Bounds and scale data builder.\n * @module boundsAndScaleBuilder\n */\nvar boundsAndScaleBuilder = {\n    /**\n     * Create BoundsModel.\n     * @param {DataProcessor} dataProcessor - DataProcessor instance\n     * @param {object} params - parameters\n     * @returns {BoundsModel}\n     * @private\n     */\n    _createBoundsModel: function(dataProcessor, params) {\n        return new BoundsModel({\n            chartType: params.chartType,\n            seriesNames: params.seriesNames,\n            options: params.options,\n            theme: params.theme,\n            dataProcessor: dataProcessor,\n            hasAxes: params.hasAxes,\n            isVertical: params.isVertical\n        });\n    },\n\n    /**\n     * Create ScaleDataModel.\n     * @param {DataProcessor} dataProcessor - DataProcessor instance\n     * @param {BoundsModel} boundsModel - BoundsModel instance\n     * @param {object} params - parameters\n     * @returns {ScaleDataModel}\n     * @private\n     */\n    _createScaleDataModel: function(dataProcessor, boundsModel, params) {\n        return new ScaleDataModel({\n            chartType: params.chartType,\n            seriesNames: params.seriesNames,\n            options: params.options,\n            theme: params.theme,\n            dataProcessor: dataProcessor,\n            boundsModel: boundsModel,\n            hasRightYAxis: params.hasRightYAxis,\n            addedDataCount: params.addedDataCount\n        });\n    },\n\n    /**\n     * Add y axis scale.\n     * @param {ScaleDataModel} scaleDataModel - ScaleDataModel instance\n     * @param {string} name - component name\n     * @param {object} scaleOption - option for add scale\n     * @param {object} yAxisOptions - option for yAxis\n     */\n    addYAxisScale: function(scaleDataModel, name, scaleOption, yAxisOptions) {\n        scaleDataModel.addScale(name, scaleOption.options || yAxisOptions, {\n            valueType: scaleOption.valueType || 'value',\n            areaType: scaleOption.areaType,\n            chartType: scaleOption.chartType\n        }, scaleOption.additionalOptions);\n    },\n\n    /**\n     * Register dimension for y axis.\n     * @param {ComponentManager} componentManager - ComponentManager instance\n     * @param {BoundsModel} boundsModel - BoundsModel instance\n     * @param {object.&lt;string, object>} scaleDataMap - scale data map\n     * @param {string} axisName - axis name like yAxis and rightYAxis\n     * @param {boolean} isVertical - whether vertical or not\n     * @private\n     */\n    _registerYAxisDimension: function(componentManager, boundsModel, scaleDataMap, axisName, isVertical) {\n        var yAxis = componentManager.get(axisName);\n        var limit = null;\n        var scaleData;\n\n        if (!yAxis) {\n            return;\n        }\n\n        scaleData = scaleDataMap[axisName];\n\n        if (scaleData) {\n            limit = scaleData.limit;\n        }\n        boundsModel.registerYAxisDimension(limit, axisName, yAxis.options, yAxis.theme, isVertical);\n    },\n\n    /**\n     * Set layout bounds and scale.\n     * @param {DataProcessor} dataProcessor - DataProcessor instance\n     * @param {ComponentManager} componentManager - ComponentManager instance\n     * @param {BoundsModel} boundsModel - BoundsModel instance\n     * @param {ScaleDataModel} scaleDataModel - ScaleDataModel instance\n     * @param {object} params - parameter for setting layout bounds and scale data.\n     * @private\n     */\n    _setLayoutBoundsAndScale: function(dataProcessor, componentManager, boundsModel, scaleDataModel, params) {\n        var options = params.options;\n        var scaleOption = params.scaleOption || {};\n        var addingDataMode = params.addingDataMode;\n        var isVertical = params.isVertical;\n        var scaleDataMap;\n\n        // 01. base dimension 등록\n        if (componentManager.has('xAxis')) {\n            boundsModel.registerXAxisHeight();\n        }\n\n        if (componentManager.has('legend')) {\n            boundsModel.registerLegendDimension();\n\n            if (componentManager.get('legend').colorSpectrum) {\n                boundsModel.updateDimensionForSpectrumLegend();\n            }\n        }\n\n        // 02. y axis, legend scale 추가\n        if (scaleOption.yAxis) {\n            this.addYAxisScale(scaleDataModel, 'yAxis', scaleOption.yAxis, params.options.yAxis);\n        }\n\n        if (scaleOption.rightYAxis) {\n            this.addYAxisScale(scaleDataModel, 'rightYAxis', scaleOption.rightYAxis);\n        }\n\n        if (scaleOption.legend) {\n            scaleDataModel.addScale('legend', {}, {\n                chartType: params.chartType\n            }, {\n                tickCounts: [chartConst.SPECTRUM_LEGEND_TICK_COUNT]\n            });\n        }\n\n        scaleDataMap = scaleDataModel.scaleDataMap;\n\n        // 03. y axis dimension 등록\n        this._registerYAxisDimension(componentManager, boundsModel, scaleDataMap, 'yAxis', isVertical);\n        this._registerYAxisDimension(componentManager, boundsModel, scaleDataMap, 'rightYAxis', isVertical);\n\n        // 04. x axis scale 추가\n        if (scaleOption.xAxis) {\n            scaleDataModel.addScale('xAxis', options.xAxis, {\n                valueType: scaleOption.xAxis.valueType || 'value'\n            });\n        }\n\n        // 05. axis data map 생성 및 설정\n        if (params.hasAxes) {\n            scaleDataModel.setAxisDataMap();\n        }\n\n        // 06. series 영역 dimension 등록\n        boundsModel.registerSeriesDimension();\n\n        // 07. circle legend가 있을 경우에 circle legend dimension 등록\n        if (componentManager.has('circleLegend') &amp;&amp; options.circleLegend.visible) {\n            boundsModel.registerCircleLegendDimension(scaleDataModel.axisDataMap);\n        }\n\n        if (componentManager.has('xAxis')) {\n            // 08. 자동 tick 계산 옵션이 있을 경우에 axisData 갱신\n            if (predicate.isAutoTickInterval(options.xAxis.tickInterval)) {\n                scaleDataModel.updateXAxisDataForAutoTickInterval(params.prevXAxisData, addingDataMode);\n            }\n\n            // 09. x축 label의 회전 여부 관련한 axisData 갱신\n            scaleDataModel.updateXAxisDataForLabel(addingDataMode);\n        }\n\n        // 10. 나머지 영역 dimension 등록 및 각 영역의 position 정보 등록\n        boundsModel.registerBoundsData(scaleDataModel.axisDataMap.xAxis);\n    },\n\n    /**\n     * Build layout bounds and scale data.\n     * @param {DataProcessor} dataProcessor - DataProcessor instance\n     * @param {ComponentManager} componentManager - ComponentManager instance\n     * @param {object} params - parameter for building layout bounds and scale data.\n     * @returns {{\n     *      dimensionMap: object,\n     *      positionMap: object,\n     *      limitMap: {\n     *          xAxis: ?{min: number, max: number},\n     *          yAxis: ?{min: number, max: number},\n     *          rightYAxis: ?{min: number, max: number},\n     *          legend: ?{min: number, max: number}\n     *      },\n     *      axisDataMap: ?object,\n     *      maxRadius: ?number,\n     *      legendScaleData: ?object\n     * }}\n     */\n    build: function(dataProcessor, componentManager, params) {\n        var boundsModel = this._createBoundsModel(dataProcessor, params);\n        var scaleDataModel = this._createScaleDataModel(dataProcessor, boundsModel, params);\n        var boundsAndScale;\n\n        this._setLayoutBoundsAndScale(dataProcessor, componentManager, boundsModel, scaleDataModel, params);\n\n        boundsAndScale = {\n            dimensionMap: boundsModel.dimensionMap,\n            positionMap: boundsModel.positionMap,\n            limitMap: scaleDataModel.makeLimitMap(params.seriesNames || [params.chartType], params.isVertical)\n        };\n\n        if (scaleDataModel.axisDataMap) {\n            boundsAndScale.axisDataMap = scaleDataModel.axisDataMap;\n        }\n\n        if (predicate.isBubbleChart(params.chartType)) {\n            boundsAndScale.maxRadius = boundsModel.calculateMaxRadius(scaleDataModel.axisDataMap);\n        }\n\n        if (scaleDataModel.scaleDataMap.legend) {\n            boundsAndScale.legendScaleData = scaleDataModel.scaleDataMap.legend;\n        }\n\n        return boundsAndScale;\n    }\n};\n\nmodule.exports = boundsAndScaleBuilder;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"