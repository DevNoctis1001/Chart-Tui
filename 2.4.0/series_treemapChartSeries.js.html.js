tui.util.defineNamespace("fedoc.content", {});
fedoc.content["series_treemapChartSeries.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Series component for rendering graph of treemap chart.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar Series = require('./series');\nvar squarifier = require('./squarifier');\nvar labelHelper = require('./renderingLabelHelper');\nvar chartConst = require('../const');\nvar predicate = require('../helpers/predicate');\n\nvar TreemapChartSeries = tui.util.defineClass(Series, /** @lends TreemapChartSeries.prototype */ {\n    /**\n     * Series component for rendering graph of treemap chart.\n     * @constructs TreemapChartSeries\n     * @extends Series\n     */\n    init: function() {\n        Series.apply(this, arguments);\n\n        this.theme.borderColor = this.theme.borderColor || chartConst.TREEMAP_DEFAULT_BORDER;\n\n        /**\n         * root id\n         * @type {string}\n         */\n        this.rootId = chartConst.TREEMAP_ROOT_ID;\n\n        /**\n         * start depth of seriesItem for rendering graph\n         * @type {number}\n         */\n        this.startDepth = 1;\n\n        /**\n         * selected group\n         * @type {null | number}\n         */\n        this.selectedGroup = null;\n\n        /**\n         * bound map\n         * @type {null|object.&lt;string, object>}\n         */\n        this.boundMap = null;\n\n        this._initOptions();\n    },\n\n    /**\n     * Initialize options.\n     * @private\n     */\n    _initOptions: function() {\n        this.options.useColorValue = !!this.options.useColorValue;\n\n        if (tui.util.isUndefined(this.options.zoomable)) {\n            this.options.zoomable = !this.options.useColorValue;\n        }\n\n        if (tui.util.isUndefined(this.options.useLeafLabel)) {\n            this.options.useLeafLabel = !this.options.zoomable;\n        }\n    },\n\n    /**\n     * Make series data.\n     * @returns {{\n     *      groupBounds: object.&lt;string, {left: number, top: number, width: number, height: number}>,\n     *      seriesDataModel: SeriesDataModel\n     * }}\n     * @private\n     * @override\n     */\n    _makeSeriesData: function() {\n        var boundMap = this._getBoundMap();\n\n        return {\n            boundMap: boundMap,\n            groupBounds: this._makeBounds(boundMap),\n            seriesDataModel: this._getSeriesDataModel(),\n            startDepth: this.startDepth,\n            isPivot: true,\n            colorSpectrum: this.options.useColorValue ? this.data.colorSpectrum : null,\n            chartBackground: this.chartBackground,\n            zoomable: this.options.zoomable\n        };\n    },\n\n    /**\n     * Make bound map by dimension.\n     * @param {string | number} parent - parent id\n     * @param {object.&lt;string, {left: number, top: number, width: number, height: number}>} boundMap - bound map\n     * @param {{width: number, height: number}} dimension - dimension\n     * @returns {object.&lt;string, {left: number, top: number, width: number, height: number}>}\n     * @private\n     */\n    _makeBoundMap: function(parent, boundMap, dimension) {\n        var self = this;\n        var seriesDataModel = this._getSeriesDataModel();\n        var seriesItems;\n\n        dimension = dimension || this.boundsMaker.getDimension('series');\n        seriesItems = seriesDataModel.findSeriesItemsByParent(parent);\n        boundMap = tui.util.extend(boundMap || {}, squarifier.squarify(dimension, seriesItems));\n\n        tui.util.forEachArray(seriesItems, function(seriesItem) {\n            boundMap = self._makeBoundMap(seriesItem.id, boundMap, boundMap[seriesItem.id]);\n        });\n\n        return boundMap;\n    },\n\n    /**\n     * Make bounds for rendering graph.\n     * @param {object.&lt;string, {left: number, top: number, width: number, height: number}>} boundMap - bound map\n     * @returns {Array.&lt;Array.&lt;{left: number, top: number, width: number, height: number}>>}\n     * @private\n     */\n    _makeBounds: function(boundMap) {\n        var startDepth = this.startDepth;\n        var seriesDataModel = this._getSeriesDataModel();\n        var isValid;\n\n        if (this.options.zoomable) {\n            isValid = function(seriesItem) {\n                return seriesItem.depth === startDepth;\n            };\n        } else {\n            isValid = function(seriesItem) {\n                return !seriesItem.hasChild;\n            };\n        }\n\n        return seriesDataModel.map(function(seriesGroup) {\n            return seriesGroup.map(function(seriesItem) {\n                var bound = boundMap[seriesItem.id];\n                var result = null;\n\n                if (bound &amp;&amp; isValid(seriesItem)) {\n                    result = {\n                        end: bound\n                    };\n                }\n\n                return result;\n            }, true);\n        }, true);\n    },\n\n    /**\n     * Get bound map for rendering graph.\n     * @returns {object.&lt;string, {left: number, top: number, width: number, height: number}>}\n     * @private\n     */\n    _getBoundMap: function() {\n        if (!this.boundMap) {\n            this.boundMap = this._makeBoundMap(this.rootId);\n        }\n\n        return this.boundMap;\n    },\n\n    /**\n     * Whether should dimmed or not.\n     * @param {SeriesDataModel} seriesDataModel - SeriesDataModel for treemap\n     * @param {SeriesItem} hoverSeriesItem - hover SeriesItem\n     * @param {SeriesItem} seriesItem - target SeriesItem\n     * @returns {boolean}\n     * @private\n     */\n    _shouldDimmed: function(seriesDataModel, hoverSeriesItem, seriesItem) {\n        var shouldTransparent = false;\n        var parent;\n\n        if (hoverSeriesItem &amp;&amp; seriesItem.id !== hoverSeriesItem.id &amp;&amp; seriesItem.group === hoverSeriesItem.group) {\n            parent = seriesDataModel.findParentByDepth(seriesItem.id, hoverSeriesItem.depth + 1);\n\n            if (parent &amp;&amp; parent.parent === hoverSeriesItem.id) {\n                shouldTransparent = true;\n            }\n        }\n\n        return shouldTransparent;\n    },\n\n    /**\n     * Render series label.\n     * @param {HTMLElement} labelContainer - series label container\n     * @param {SeriesItem} hoverSeriesItem - hover SeriesItem\n     * @private\n     */\n    _renderSeriesLabel: function(labelContainer, hoverSeriesItem) {\n        var seriesDataModel = this._getSeriesDataModel();\n        var boundMap = this._getBoundMap();\n        var seriesItems, shouldDimmed, html;\n\n        if (this.options.useLeafLabel) {\n            seriesItems = seriesDataModel.findLeafSeriesItems(this.selectedGroup);\n        } else {\n            seriesItems = seriesDataModel.findSeriesItemsByDepth(this.startDepth, this.selectedGroup);\n        }\n\n        shouldDimmed = tui.util.bind(this._shouldDimmed, this, seriesDataModel, hoverSeriesItem);\n        html = labelHelper.makeLabelsHtmlForTreemap(seriesItems, boundMap, this.theme.label, shouldDimmed);\n\n        labelContainer.innerHTML = html;\n    },\n\n    /**\n     * Resize.\n     * @override\n     */\n    resize: function() {\n        this.boundMap = null;\n        Series.prototype.resize.apply(this, arguments);\n    },\n\n    /**\n     * Zoom.\n     * @param {string | number} rootId - root id\n     * @param {number} startDepth - start depth\n     * @param {number} group - group\n     * @private\n     */\n    _zoom: function(rootId, startDepth, group) {\n        this._clearContainer();\n        this.boundMap = null;\n        this.rootId = rootId;\n        this.startDepth = startDepth;\n        this.selectedGroup = group;\n        this._renderSeriesArea(this.seriesContainer, this.data, tui.util.bind(this._renderGraph, this));\n\n        if (predicate.isShowLabel(this.options)) {\n            this._showSeriesLabelWithoutAnimation();\n        }\n    },\n\n    /**\n     * Zoom\n     * @param {{index: number}} data - data for zoom\n     */\n    zoom: function(data) {\n        var detectedIndex = data.index;\n        var seriesDataModel, seriesItem;\n\n        if (detectedIndex === -1) {\n            this._zoom(chartConst.TREEMAP_ROOT_ID, 1, null);\n\n            return;\n        }\n\n        seriesDataModel = this._getSeriesDataModel();\n        seriesItem = seriesDataModel.getSeriesItem(0, detectedIndex, true);\n\n        if (!seriesItem || !seriesItem.hasChild) {\n            return;\n        }\n\n        this._zoom(seriesItem.id, seriesItem.depth + 1, seriesItem.group);\n        this.fire('afterZoom', detectedIndex);\n    },\n\n    /**\n     * Make exportation data for series type userEvent.\n     * @param {object} seriesData series data\n     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} export data\n     * @private\n     */\n    _makeExportationSeriesData: function(seriesData) {\n        var indexes = seriesData.indexes;\n        var seriesItem = this._getSeriesDataModel().getSeriesItem(indexes.groupIndex, indexes.index, true);\n\n        return tui.util.extend({\n            chartType: this.chartType,\n            indexes: seriesItem.indexes\n        });\n    },\n\n    /**\n     * To call showAnimation function of graphRenderer.\n     * @param {{groupIndex: number, index: number}} indexes - indexes\n     */\n    onShowAnimation: function(indexes) {\n        var seriesItem;\n\n        if (!predicate.isShowLabel(this.options)) {\n            return;\n        }\n\n        seriesItem = this._getSeriesDataModel().getSeriesItem(indexes.groupIndex, indexes.index, true);\n\n        this._renderSeriesLabel(this.seriesLabelContainer, seriesItem);\n        this.graphRenderer.showAnimation(indexes, this.options.useColorValue, 0.6);\n    },\n\n    /**\n     * To call hideAnimation function of graphRenderer.\n     * @param {{groupIndex: number, index: number}} indexes - indexes\n     */\n    onHideAnimation: function(indexes) {\n        if (!predicate.isShowLabel(this.options) || !indexes) {\n            return;\n        }\n\n        this._renderSeriesLabel(this.seriesLabelContainer);\n        this.graphRenderer.hideAnimation(indexes, this.options.useColorValue);\n    },\n\n    /**\n     * On show tooltip for calling showWedge.\n     * @param {{indexes: {groupIndex: number, index: number}}} params - parameters\n     */\n    onShowTooltip: function(params) {\n        var seriesDataModel = this._getSeriesDataModel();\n        var indexes = params.indexes;\n        var ratio = seriesDataModel.getSeriesItem(indexes.groupIndex, indexes.index, true).ratio;\n\n        if (ratio > -1) {\n            this.fire('showWedge', ratio);\n        }\n    }\n});\n\ntui.util.CustomEvents.mixin(TreemapChartSeries);\n\nmodule.exports = TreemapChartSeries;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"