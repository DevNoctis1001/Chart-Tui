tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_chartBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview ChartBase\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const');\nvar ComponentManager = require('./componentManager');\nvar DefaultDataProcessor = require('../models/data/dataProcessor');\nvar rawDataHandler = require('../models/data/rawDataHandler');\nvar dom = require('../helpers/domHandler');\nvar renderUtil = require('../helpers/renderUtil');\nvar boundsAndScaleBuilder = require('../models/boundsAndScaleBuilder.js');\n\nvar ChartBase = tui.util.defineClass(/** @lends ChartBase.prototype */ {\n    /**\n     * Chart base.\n     * @constructs ChartBase\n     * @param {object} params parameters\n     *      @param {object} params.rawData raw data\n     *      @param {object} params.theme chart theme\n     *      @param {object} params.options chart options\n     *      @param {boolean} params.hasAxes whether has axes or not\n     *      @param {boolean} params.isVertical whether vertical or not\n     *      @param {DataProcessor} params.DataProcessor DataProcessor\n     */\n    init: function(params) {\n        /**\n         * theme\n         * @type {object}\n         */\n        this.theme = params.theme;\n\n        this._initializeOptions(params.options);\n\n        /**\n         * chart type\n         * @type {string}\n         */\n        this.chartType = this.options.chartType;\n\n        /**\n         * whether chart has axes or not\n         * @type {boolean}\n         */\n        this.hasAxes = params.hasAxes;\n\n        /**\n         * whether vertical or not\n         * @type {boolean}\n         */\n        this.isVertical = !!params.isVertical;\n\n        /**\n         * data processor\n         * @type {DataProcessor}\n         */\n        this.dataProcessor = this._createDataProcessor(params);\n\n        /**\n         * event bus for transmitting message\n         * @type {object}\n         */\n        this.eventBus = new tui.util.CustomEvents();\n\n        /**\n         * previous xAxis data\n         * @type {null|object}\n         */\n        this.prevXAxisData = null;\n\n        /**\n         * component manager\n         * @type {ComponentManager}\n         */\n        this.componentManager = this._createComponentManager();\n\n        this._addComponents();\n\n        this._attachToEventBus();\n    },\n\n    /**\n     * Attach to event bus.\n     * @private\n     */\n    _attachToEventBus: function() {\n        this.eventBus.on('changeCheckedLegends', this.onChangeCheckedLegends, this);\n\n        if (this.onZoom) {\n            this.eventBus.on({\n                zoom: this.onZoom,\n                resetZoom: this.onResetZoom\n            }, this);\n        }\n    },\n\n    /**\n     * Set offset property\n     * @param {{offset: object}} ptions -options\n     * @param {string} fromProperty - from property name\n     * @param {string} toProperty - to property name\n     * @private\n     */\n    _setOffsetProperty: function(ptions, fromProperty, toProperty) {\n        if (!tui.util.isExisty(ptions[fromProperty])) {\n            return;\n        }\n\n        ptions.offset = ptions.offset || {};\n        ptions.offset[toProperty] = ptions[fromProperty];\n        delete ptions[fromProperty];\n    },\n\n    /**\n     * Initialize offset.\n     * @param {{offsetX: ?number, offsetY: ?number}} options - offset options\n     * @private\n     */\n    _initializeOffset: function(options) {\n        if (!options) {\n            return;\n        }\n\n        this._setOffsetProperty(options, 'offsetX', 'x');\n        this._setOffsetProperty(options, 'offsetY', 'y');\n    },\n\n    /**\n     * Initialize title options.\n     * @param {\n     *      Array.&lt;{title: (string | {text: string, offsetX: number, offsetY: number})}> |\n     *      {title: (string | {text: string, offsetX: number, offsetY: number})}\n     * } targetOptions - target options\n     * @private\n     */\n    _initializeTitleOptions: function(targetOptions) {\n        var self = this;\n        var optionsSet;\n\n        if (!targetOptions) {\n            return;\n        }\n\n        optionsSet = tui.util.isArray(targetOptions) ? targetOptions : [targetOptions];\n        tui.util.forEachArray(optionsSet, function(options) {\n            var title = options.title;\n\n            if (tui.util.isString(title)) {\n                options.title = {\n                    text: title\n                };\n            }\n\n            self._initializeOffset(options.title);\n        });\n    },\n\n    /**\n     * Initialize tooltip options.\n     * @param {{grouped: ?boolean, offsetX: ?number, offsetY: ?number}} options - tooltip options\n     * @private\n     */\n    _initializeTooltipOptions: function(options) {\n        var position = options.position;\n\n        options.grouped = !!options.grouped;\n        this._initializeOffset(options);\n\n        if (!options.offset &amp;&amp; position) {\n            options.offset = {\n                x: position.left,\n                y: position.top\n            };\n        }\n\n        delete options.position;\n    },\n\n    /**\n     * Initialize options.\n     * @param {object} options - options for chart\n     * @private\n     */\n    _initializeOptions: function(options) {\n        options.xAxis = options.xAxis || {};\n        options.series = options.series || {};\n        options.tooltip = options.tooltip || {};\n        options.legend = options.legend || {};\n\n        this._initializeTitleOptions(options.chart);\n        this._initializeTitleOptions(options.xAxis);\n        this._initializeTitleOptions(options.yAxis);\n\n        if (tui.util.isUndefined(options.legend.visible)) {\n            options.legend.visible = true;\n        }\n\n        this._initializeTooltipOptions(options.tooltip);\n\n        /**\n         * options\n         * @type {object}\n         */\n        this.options = options;\n    },\n\n    /**\n     * Create dataProcessor for processing raw data.\n     * @param {object} params parameters\n     *      @param {object} params.rawData - raw data\n     *      @param {DataProcessor} params.DataProcessor - DataProcessor class\n     *      @param {{chart: object, chartType: string}} params.options - chart options\n     *      @param {Array} params.seriesNames series - chart types for rendering series\n     * @returns {object} data processor\n     * @private\n     */\n    _createDataProcessor: function(params) {\n        var DataProcessor, dataProcessor;\n\n        DataProcessor = params.DataProcessor || DefaultDataProcessor;\n        dataProcessor = new DataProcessor(params.rawData, this.chartType, params.options, this.seriesNames);\n\n        return dataProcessor;\n    },\n\n    /**\n     * Create ComponentMananger.\n     * @returns {ComponentManager}\n     * @private\n     */\n    _createComponentManager: function() {\n        return new ComponentManager({\n            options: this.options,\n            theme: this.theme,\n            dataProcessor: this.dataProcessor,\n            hasAxes: this.hasAxes,\n            eventBus: this.eventBus\n        });\n    },\n\n    /**\n     * Make data for tooltip component.\n     * @returns {object} tooltip data\n     * @private\n     */\n    _makeTooltipData: function() {\n        return {\n            isVertical: this.isVertical,\n            chartType: this.chartType,\n            xAxisType: this.options.xAxis.type,\n            dateFormat: this.options.xAxis.dateFormat\n        };\n    },\n\n    /**\n     * Add components\n     * @private\n     * @abstract\n     */\n    _addComponents: function() {},\n\n    /**\n     * Render title.\n     * @param {HTMLElement} container - container\n     * @private\n     */\n    _renderTitle: function(container) {\n        var chartOptions = this.options.chart || {};\n        var title = chartOptions.title || {};\n        var titleElement = renderUtil.renderTitle(title.text, this.theme.title, 'tui-chart-title');\n\n        if (title.offset) {\n            renderUtil.renderPosition(titleElement, {\n                left: title.offset.x,\n                top: title.offset.y\n            });\n        }\n\n        dom.append(container, titleElement);\n    },\n\n    /**\n     * Get scale option.\n     * @private\n     * @abstract\n     */\n    _getScaleOption: function() {},\n\n    /**\n     * Build bounds and scale data.\n     * @param {object} prevXAxisData - previous xAxis data\n     * @param {boolean} addingDataMode - whether adding data mode or not\n     * @returns {{\n     *      layoutBounds: {\n     *          dimensionMap: object,\n     *          positionMap: object\n     *      },\n     *      limitMap: object,\n     *      axisDataMap: object,\n     *      maxRadius: ?number\n     * }}\n     * @private\n     */\n    _buildBoundsAndScaleData: function(prevXAxisData, addingDataMode) {\n        return boundsAndScaleBuilder.build(this.dataProcessor, this.componentManager, {\n            chartType: this.chartType,\n            seriesNames: this.seriesNames,\n            options: this.options,\n            theme: this.theme,\n            hasAxes: this.hasAxes,\n            scaleOption: this._getScaleOption(),\n            isVertical: this.isVertical,\n            hasRightYAxis: this.hasRightYAxis,\n            addedDataCount: this.addedDataCount,\n            prevXAxisData: prevXAxisData,\n            addingDataMode: addingDataMode\n        });\n    },\n\n    /**\n     * Add data ratios.\n     * @private\n     * @abstract\n     */\n    _addDataRatios: function() {},\n\n    /**\n     * Render.\n     * @param {function} onRender render callback function\n     * @param {?boolean} addingDataMode - whether adding data mode or not\n     * @private\n     */\n    _render: function(onRender, addingDataMode) {\n        var boundsAndScale = this._buildBoundsAndScaleData(this.prevXAxisData, addingDataMode);\n\n        if (boundsAndScale.axisDataMap.xAxis) {\n            this.prevXAxisData = boundsAndScale.axisDataMap.xAxis;\n        }\n\n        // 비율값 추가\n        this._addDataRatios(boundsAndScale.limitMap);\n\n        onRender(boundsAndScale);\n    },\n\n    /**\n     * Render chart.\n     * @returns {HTMLElement} chart element\n     */\n    render: function() {\n        var container = dom.create('DIV', 'tui-chart ' + this.className);\n        var componentManager = this.componentManager;\n\n        this._renderTitle(container);\n\n        renderUtil.renderBackground(container, this.theme.chart.background);\n        renderUtil.renderFontFamily(container, this.theme.chart.fontFamily);\n\n        this._render(function(boundsAndScale) {\n            renderUtil.renderDimension(container, boundsAndScale.dimensionMap.chart);\n            componentManager.render('render', boundsAndScale, null, container);\n        });\n\n        this.chartContainer = container;\n\n        return container;\n    },\n\n    /**\n     * Rerender.\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @param {?object} rawData rawData\n     * @private\n     */\n    _rerender: function(checkedLegends, rawData) {\n        var self = this;\n        var dataProcessor = this.dataProcessor;\n\n        if (!rawData) {\n            rawData = rawDataHandler.filterCheckedRawData(dataProcessor.getZoomedRawData(), checkedLegends);\n        }\n\n        this.dataProcessor.initData(rawData);\n\n        this._render(function(boundsAndScale) {\n            self.componentManager.render('rerender', boundsAndScale, {\n                checkedLegends: checkedLegends\n            });\n        });\n    },\n\n    /**\n     * On change checked legend.\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @param {?object} rawData rawData\n     * @param {?object} boundsParams addition params for calculating bounds\n     */\n    onChangeCheckedLegends: function(checkedLegends, rawData, boundsParams) {\n        this._rerender(checkedLegends, rawData, boundsParams);\n    },\n\n    /**\n     * Animate chart.\n     */\n    animateChart: function() {\n        this.componentManager.execute('animateComponent');\n    },\n\n    /**\n     * Register of user event.\n     * @param {string} eventName event name\n     * @param {function} func event callback\n     */\n    on: function(eventName, func) {\n        if (chartConst.PUBLIC_EVENT_MAP[eventName]) {\n            this.eventBus.on(chartConst.PUBLIC_EVENT_PREFIX + eventName, func);\n        }\n    },\n\n    /**\n     * Update dimension of chart.\n     * @param {{width: number, height: number}} dimension dimension\n     * @returns {boolean} whether updated or not\n     * @private\n     */\n    _updateChartDimension: function(dimension) {\n        var updated = false;\n        var options = this.options;\n\n        options.chart = options.chart || {};\n\n        if (dimension.width &amp;&amp; dimension.width > 0 &amp;&amp; options.chart.width !== dimension.width) {\n            options.chart.width = dimension.width;\n            updated = true;\n        }\n\n        if (dimension.height &amp;&amp; dimension.height > 0 &amp;&amp; options.chart.height !== dimension.height) {\n            options.chart.height = dimension.height;\n            updated = true;\n        }\n\n        return updated;\n    },\n\n    /**\n     * Public API for resizable.\n     * @param {object} dimension dimension\n     *      @param {number} dimension.width width\n     *      @param {number} dimension.height height\n     * @api\n     */\n    resize: function(dimension) {\n        var self = this;\n        var updated;\n\n        if (!dimension) {\n            return;\n        }\n\n        updated = this._updateChartDimension(dimension);\n\n        if (!updated) {\n            return;\n        }\n\n        this._render(function(boundsAndScale) {\n            renderUtil.renderDimension(self.chartContainer, boundsAndScale.dimensionMap.chart);\n            self.componentManager.render('resize', boundsAndScale);\n        });\n    },\n\n    /**\n     * Set tooltip align option.\n     * @param {string} align align (left|center|right, top|middle|bottom)\n     * @api\n     */\n    setTooltipAlign: function(align) {\n        this.componentManager.get('tooltip').setAlign(align);\n    },\n\n    /**\n     * Set tooltip offset option.\n     * @param {object} offset - tooltip offset\n     *      @param {number} offset.x - offset x\n     *      @param {number} offset.y - offset y\n     * @api\n     */\n    setTooltipOffset: function(offset) {\n        this.componentManager.get('tooltip').setOffset(offset);\n    },\n\n    /**\n     * Set position option.\n     * @param {object} position moving position\n     *      @param {number} position.left left\n     *      @param {number} position.top top\n     * @api\n     * @deprecated\n     */\n    setTooltipPosition: function(position) {\n        this.componentManager.get('tooltip').setPosition(position);\n    },\n\n    /**\n     * Reset tooltip align option.\n     * @api\n     */\n    resetTooltipAlign: function() {\n        this.componentManager.get('tooltip').resetAlign();\n    },\n\n    /**\n     * Reset tooltip position.\n     * @api\n     */\n    resetTooltipOffset: function() {\n        this.componentManager.get('tooltip').resetOffset();\n    },\n\n    /**\n     * Reset tooltip position.\n     * @api\n     * @deprecated\n     */\n    resetTooltipPosition: function() {\n        this.resetTooltipOffset();\n    },\n\n    /**\n     * Show series label.\n     * @api\n     */\n    showSeriesLabel: function() {\n        var seriesSet = this.componentManager.where({componentType: 'series'});\n\n        tui.util.forEachArray(seriesSet, function(series) {\n            series.showLabel();\n        });\n    },\n\n    /**\n     * Hide series label.\n     * @api\n     */\n    hideSeriesLabel: function() {\n        var seriesSet = this.componentManager.where({componentType: 'series'});\n\n        tui.util.forEachArray(seriesSet, function(series) {\n            series.hideLabel();\n        });\n    },\n\n    /**\n     * Add data.\n     * @abstract\n     */\n    addData: function() {},\n\n    /**\n     * Add plot line.\n     * @abstract\n     */\n    addPlotLine: function() {},\n\n    /**\n     * Add plot band.\n     * @abstract\n     */\n    addPlotBand: function() {},\n\n    /**\n     * Remove plot line.\n     * @abstract\n     */\n    removePlotLine: function() {},\n\n    /**\n     * Remove plot band.\n     * @abstract\n     */\n    removePlotBand: function() {}\n});\n\nmodule.exports = ChartBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"