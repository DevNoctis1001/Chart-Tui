tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_axisTypeMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview axisTypeMixer is mixer for help to axis types charts like bar, column, line, area,\n *                  bubble, column&amp;line combo.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar predicate = require('../helpers/predicate');\nvar Axis = require('../components/axes/axis');\nvar Plot = require('../components/plots/plot');\nvar Legend = require('../components/legends/legend');\nvar SimpleCustomEvent = require('../components/customEvents/simpleCustomEvent');\nvar GroupTypeCustomEvent = require('../components/customEvents/groupTypeCustomEvent');\nvar BoundsTypeCustomEvent = require('../components/customEvents/boundsTypeCustomEvent');\nvar Tooltip = require('../components/tooltips/tooltip');\nvar GroupTooltip = require('../components/tooltips/groupTooltip');\n\n/**\n * Axis limit value.\n * @typedef {{min: number, max: number}} axisLimit\n */\n\n/**\n * axisTypeMixer is mixer for help to axis types charts like bar, column, line, area, bubble, column&amp;line combo.\n * @mixin\n */\nvar axisTypeMixer = {\n    /**\n     * Add axis components.\n     * @param {Array.&lt;object>} axes axes option\n     * @param {boolean} aligned whether aligned or not\n     * @private\n     */\n    _addAxisComponents: function(axes, aligned) {\n        var self = this;\n        tui.util.forEach(axes, function(axis) {\n            var axisParams = {\n                aligned: aligned,\n                isVertical: !!axis.isVertical,\n                seriesName: axis.seriesName || self.chartType\n            };\n\n            if (axis.name === 'rightYAxis') {\n                axisParams.componentType = 'yAxis';\n                axisParams.index = 1;\n            }\n\n            self.componentManager.register(axis.name, Axis, axisParams);\n        });\n    },\n\n    /**\n     * Add series components\n     * @param {Array&lt;object>} seriesSet - series set\n     * @param {object} options - options\n     * @private\n     */\n    _addSeriesComponents: function(seriesSet, options) {\n        var self = this,\n            seriesBaseParams = {\n                libType: options.libType,\n                chartType: options.chartType,\n                componentType: 'series',\n                chartBackground: this.theme.chart.background\n            };\n\n        tui.util.forEach(seriesSet, function(series) {\n            var seriesParams = tui.util.extend(seriesBaseParams, series.data);\n            self.componentManager.register(series.name, series.SeriesClass, seriesParams);\n        });\n    },\n\n    /**\n     * Add tooltip component.\n     * @private\n     */\n    _addTooltipComponent: function() {\n        var TooltipClass = this.options.tooltip.grouped ? GroupTooltip : Tooltip;\n        this.componentManager.register('tooltip', TooltipClass, this._makeTooltipData());\n    },\n\n    /**\n     * Add legend component.\n     * @param {null | object} LegendClass - Legend type class\n     * @param {Array.&lt;string>} seriesNames - series names\n     * @param {?object} additionalParams - additional params\n     * @private\n     */\n    _addLegendComponent: function(LegendClass, seriesNames, additionalParams) {\n        this.componentManager.register('legend', LegendClass || Legend, tui.util.extend({\n            seriesNames: seriesNames,\n            chartType: this.chartType\n        }, additionalParams));\n    },\n\n    /**\n     * Add components for axis type chart.\n     * @param {object} params parameters\n     *      @param {object} params.axes axes data\n     *      @param {object} params.plotData plot data\n     *      @param {function} params.serieses serieses\n     * @private\n     */\n    _addComponentsForAxisType: function(params) {\n        var options = this.options;\n        var aligned = !!params.aligned;\n        var LegendClass;\n\n        if (params.plot) {\n            this.componentManager.register('plot', Plot, {\n                isVertical: this.isVertical,\n                chartType: this.chartType,\n                chartTypes: this.chartTypes,\n                xAxisType: options.xAxis.type\n            });\n        }\n\n        this._addAxisComponents(params.axis, aligned);\n\n        if (options.legend.visible) {\n            params.legend = params.legend || {};\n            LegendClass = params.legend.LegendClass || null;\n            this._addLegendComponent(LegendClass, params.seriesNames, params.legend.additionalParams);\n        }\n\n        this._addSeriesComponents(params.series, options);\n        this._addTooltipComponent();\n        this._addCustomEventComponent();\n    },\n\n    /**\n     * Add data ratios.\n     * @private\n     * @override\n     */\n    _addDataRatios: function(limitMap) {\n        var self = this;\n        var chartTypes = this.chartTypes || [this.chartType];\n        var seriesOption = this.options.series || {};\n        var addDataRatio;\n\n        if (this.dataProcessor.isCoordinateType()) {\n            addDataRatio = function(chartType) {\n                var hasRadius = predicate.isBubbleChart(chartType);\n                self.dataProcessor.addDataRatiosForCoordinateType(chartType, limitMap, hasRadius);\n            };\n        } else {\n            addDataRatio = function(chartType) {\n                var stackType = (seriesOption[chartType] || seriesOption).stackType;\n\n                self.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);\n            };\n        }\n\n        tui.util.forEachArray(chartTypes, addDataRatio);\n    },\n\n    /**\n     * Add simple customEvent component.\n     * @private\n     */\n    _addSimpleCustomEventComponent: function() {\n        this.componentManager.register('customEvent', SimpleCustomEvent, {\n            chartType: this.chartType\n        });\n    },\n\n    /**\n     * Add grouped event handler layer.\n     * @private\n     * @override\n     */\n    _addCustomEventComponentForGroupTooltip: function() {\n        var seriesOptions = this.options.series;\n\n        this.componentManager.register('customEvent', GroupTypeCustomEvent, {\n            chartType: this.chartType,\n            isVertical: this.isVertical,\n            chartTypes: this.chartTypes,\n            zoomable: seriesOptions.zoomable,\n            allowSelect: seriesOptions.allowSelect\n        });\n    },\n\n    /**\n     * Add custom event component for normal tooltip.\n     * @private\n     */\n    _addCustomEventComponentForNormalTooltip: function() {\n        this.componentManager.register('customEvent', BoundsTypeCustomEvent, {\n            chartType: this.chartType,\n            isVertical: this.isVertical,\n            allowSelect: this.options.series.allowSelect\n        });\n    },\n\n    /**\n     * Add custom event component.\n     * @private\n     */\n    _addCustomEventComponent: function() {\n        if (predicate.isCoordinateTypeChart(this.chartType)) {\n            this._addSimpleCustomEventComponent();\n        } else if (this.options.tooltip.grouped) {\n            this._addCustomEventComponentForGroupTooltip();\n        } else {\n            this._addCustomEventComponentForNormalTooltip();\n        }\n    }\n};\n\nmodule.exports = axisTypeMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"