tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_treemapChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Treemap chart is graphical representation of hierarchical data by using rectangles.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase');\nvar ColorSpectrum = require('./colorSpectrum');\nvar Series = require('../components/series/treemapChartSeries');\nvar Tooltip = require('../components/tooltips/tooltip');\nvar Legend = require('../components/legends/spectrumLegend');\nvar BoundsTypeCustomEvent = require('../components/customEvents//boundsTypeCustomEvent');\n\nvar TreemapChart = tui.util.defineClass(ChartBase, /** @lends TreemapChart.prototype */ {\n    /**\n     * className\n     * @type {string}\n     */\n    className: 'tui-treemap-chart',\n    /**\n     * Treemap chart is graphical representation of hierarchical data by using rectangles.\n     * @constructs TreemapChart\n     * @extends ChartBase\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(rawData, theme, options) {\n        //options.series = options.series || {};\n        options.tooltip = options.tooltip || {};\n        options.tooltip.grouped = false;\n\n        ChartBase.call(this, {\n            rawData: rawData,\n            theme: theme,\n            options: options,\n            hasAxes: false,\n            isVertical: true\n        });\n    },\n\n    /**\n     * Add components.\n     * @private\n     */\n    _addComponents: function() {\n        var seriesTheme = this.theme.series[this.chartType];\n        var useColorValue = this.options.series.useColorValue;\n        var colorSpectrum = useColorValue ? (new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor)) : null;\n\n        this.componentManager.register('series', Series, {\n            chartBackground: this.theme.chart.background,\n            chartType: this.chartType,\n            colorSpectrum: colorSpectrum\n        });\n\n        // TODO\n        this.componentManager.register('tooltip', Tooltip, tui.util.extend({\n            labelTheme: tui.util.pick(this.theme, 'series', 'label')\n        }, this._makeTooltipData()));\n\n        if (useColorValue &amp;&amp; this.options.legend.visible) {\n            this.componentManager.register('legend', Legend, {\n                chartType: this.chartType,\n                colorSpectrum: colorSpectrum\n            });\n        }\n\n        this.componentManager.register('customEvent', BoundsTypeCustomEvent, {\n            chartType: this.chartType,\n            isVertical: this.isVertical\n        });\n    },\n\n    /**\n     * Get scale option.\n     * @returns {{legend: boolean}}\n     * @private\n     * @override\n     */\n    _getScaleOption: function() {\n        return {\n            legend: true\n        };\n    },\n\n    /**\n     * Add data ratios to dataProcessor for rendering graph.\n     * @private\n     * @override\n     */\n    _addDataRatios: function(limitMap) {\n        this.dataProcessor.addDataRatiosForTreemapChart(limitMap.legend, this.chartType);\n    },\n\n    /**\n     * On zoom.\n     * @param {number} index - index of target seriesItem\n     */\n    onZoom: function(index) {\n        this.componentManager.render('zoom', null, {\n            index: index\n        });\n    }\n});\n\nmodule.exports = TreemapChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"