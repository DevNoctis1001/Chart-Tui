tui.util.defineNamespace("fedoc.content", {});
fedoc.content["components_customEvents_zoomMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Mixer for zoom event of area type custom event.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar CustomEventBase = require('./customEventBase');\nvar chartConst = require('../../const/');\nvar dom = require('../../helpers/domHandler');\nvar predicate = require('../../helpers/predicate');\nvar renderUtil = require('../../helpers/renderUtil');\nvar eventListener = require('../../helpers/eventListener');\n\n/**\n * Mixer for zoom event of area type custom event.\n * @mixin\n */\nvar zoomMixer = {\n    /**\n     * Initialize for zoom.\n     * @param {boolean} zoomable - whether zoomable or not\n     * @private\n     */\n    _initForZoom: function(zoomable) {\n        /**\n         * whether zoomable or not\n         * @type {boolean}\n         */\n        this.zoomable = zoomable;\n\n        /**\n         * drag start index.\n         * @type {null | object}\n         */\n        this.dragStartIndexes = null;\n\n        /**\n         * start client position(clientX, clientY) of mouse event.\n         * @type {null | {x: number, y: number}}\n         */\n        this.startClientPosition = null;\n\n        /**\n         * start layerX position\n         * @type {null | number}\n         */\n        this.startLayerX = null;\n\n        /**\n         * drag selection element\n         * @type {null | HTMLElement}\n         */\n        this.dragSelectionElement = null;\n\n        /**\n         * container bound\n         * @type {null | {left: number, right: number, top: number}}\n         */\n        this.containerBound = null;\n\n        /**\n         * whether show tooltip after zoom or not.\n         * @type {boolean}\n         */\n        this.isShowTooltipAfterZoom = false;\n\n        /**\n         * whether after mouseup or not.\n         * @type {boolean}\n         */\n        this.afterMouseup = false;\n\n        /**\n         * previouse distance of range\n         * @type {null | number}\n         */\n        this.prevDistanceOfRange = null;\n\n        /**\n         * whether reverse move or not.\n         * @type {null | number}\n         */\n        this.reverseMove = null;\n\n        /**\n         * reset zoom button element.\n         * @type {null | HTMLElement}\n         */\n        this.resetZoomBtn = null;\n\n        /**\n         * Find data for zoomable\n         * @param {number} clientX - clientX\n         * @param {number} clientY - clientY\n         * @returns {object}\n         * @private\n         */\n        if (predicate.isComboChart(this.chartType)) {\n            this._findDataForZoomable = this._findGroupData;\n        } else {\n            this._findDataForZoomable = this._findData;\n        }\n    },\n\n    /**\n     * Show tooltip after zoom.\n     * @private\n     */\n    _showTooltipAfterZoom: function() {\n        var isShowTooltipAfterZoom = this.isShowTooltipAfterZoom;\n        var lastDataBeforeZoom;\n\n        this.isShowTooltipAfterZoom = false;\n\n        if (!isShowTooltipAfterZoom || !this.dragStartIndexes) {\n            return;\n        }\n\n        if (this.reverseMove) {\n            lastDataBeforeZoom = this._getFirstData(this.dragStartIndexes.index);\n        } else {\n            lastDataBeforeZoom = this._getLastData(this.dragEndIndexes.index);\n        }\n\n        this._showTooltip(lastDataBeforeZoom);\n    },\n\n    /**\n     * Update dimension for drag selection element.\n     * @param {HTMLElement} selectionElement - drag selection element\n     * @private\n     */\n    _updateDimensionForDragSelection: function(selectionElement) {\n        renderUtil.renderDimension(selectionElement, {\n            height: this.layout.dimension.height\n        });\n    },\n\n    /**\n     * Render drag selection.\n     * @returns {HTMLElement}\n     * @private\n     */\n    _renderDragSelection: function() {\n        var selectionElement = dom.create('DIV', 'tui-chart-drag-selection');\n\n        this._updateDimensionForDragSelection(selectionElement);\n\n        return selectionElement;\n    },\n\n    /**\n     * Render.\n     * @param {object} data - data for rendering\n     * @returns {HTMLElement}\n     * @override\n     */\n    render: function(data) {\n        var container = CustomEventBase.prototype.render.call(this, data);\n        var selectionElement = this._renderDragSelection();\n\n        dom.append(container, selectionElement);\n        this.dragSelectionElement = selectionElement;\n\n        return container;\n    },\n\n    /**\n     * Resize.\n     * @param {{tickCount: number}} data - data for resizing\n     * @override\n     */\n    resize: function(data) {\n        this.containerBound = null;\n        CustomEventBase.prototype.resize.call(this, data);\n        this._updateDimensionForDragSelection(this.dragSelectionElement);\n    },\n\n    /**\n     * On click\n     * @private\n     * @override\n     */\n    _onClick: function() {},\n\n    /**\n     * Whether after drag mouseup or not.\n     * @returns {boolean}\n     * @private\n     */\n    _isAfterDragMouseup: function() {\n        var afterMouseup = this.afterMouseup;\n\n        if (afterMouseup) {\n            this.afterMouseup = false;\n        }\n\n        return afterMouseup;\n    },\n\n    /**\n     * Bind drag event for zoom.\n     * @param {HTMLElement} target - target element\n     * @private\n     */\n    _bindDragEvent: function(target) {\n        if (target.setCapture) {\n            target.setCapture();\n        }\n\n        eventListener.on(document, 'mousemove', this._onDrag, this);\n        eventListener.off(this.customEventContainer, 'mouseup', this._onMouseup, this);\n        eventListener.on(document, 'mouseup', this._onMouseupAfterDrag, this);\n    },\n\n    /**\n     * Unbind drag event for zoom.\n     * @private\n     */\n    _unbindDragEvent: function() {\n        if (this.downTarget &amp;&amp; this.downTarget.releaseCapture) {\n            this.downTarget.releaseCapture();\n        }\n\n        eventListener.off(document, 'mousemove', this._onDrag, this);\n        eventListener.off(document, 'mouseup', this._onMouseupAfterDrag, this);\n        eventListener.on(this.customEventContainer, 'mouseup', this._onMouseup, this);\n    },\n\n    /**\n     * On mouse down.\n     * @param {MouseEvent} e - mouse event\n     * @private\n     * @override\n     */\n    _onMousedown: function(e) {\n        var target;\n\n        if (!this.zoomable) {\n            return;\n        }\n\n        target = e.target || e.srcElement;\n\n        this.startClientPosition = {\n            x: e.clientX,\n            y: e.clientY\n        };\n        this.startLayerX = this._calculateLayerPosition(e.clientX).x;\n        this.downTarget = target;\n\n        this._bindDragEvent(target);\n    },\n\n    /**\n     * Show drag selection.\n     * @param {number} clientX - clientX\n     * @private\n     */\n    _showDragSelection: function(clientX) {\n        var layerX = this._calculateLayerPosition(clientX).x;\n        var left = Math.min(layerX, this.startLayerX);\n        var width = Math.abs(layerX - this.startLayerX);\n        var element = this.dragSelectionElement;\n\n        element.style.left = left + chartConst.SERIES_EXPAND_SIZE + 'px';\n        element.style.width = width + 'px';\n\n        dom.addClass(element, 'show');\n    },\n\n    /**\n     * Hide drag selection.\n     * @private\n     */\n    _hideDragSelection: function() {\n        dom.removeClass(this.dragSelectionElement, 'show');\n    },\n\n    /**\n     * On mouse drag.\n     * @param {MouseEvent} e - mouse event\n     * @private\n     */\n    _onDrag: function(e) {\n        var clientPos = this.startClientPosition;\n\n        if (tui.util.isNull(this.dragStartIndexes)) {\n            this.dragStartIndexes = this._findDataForZoomable(clientPos.x, clientPos.y).indexes;\n        } else {\n            this._showDragSelection(e.clientX);\n        }\n    },\n\n    /**\n     * Adjust index range for ensure three indexes.\n     * @param {number} startIndex - start index\n     * @param {number} endIndex - end index\n     * @returns {Array.&lt;number>}\n     * @private\n     */\n    _adjustIndexRange: function(startIndex, endIndex) {\n        var indexRange = [startIndex, endIndex].sort(function(a, b) {\n            return a - b;\n        });\n        var distanceOfRange = indexRange[1] - indexRange[0];\n\n        if (distanceOfRange === 0) {\n            if (indexRange[0] === 0) {\n                indexRange[1] += 2;\n            } else {\n                indexRange[0] -= 1;\n                indexRange[1] += 1;\n            }\n        } else if (distanceOfRange === 1) {\n            if (indexRange[0] === 0) {\n                indexRange[1] += 1;\n            } else {\n                indexRange[0] -= 1;\n            }\n        }\n\n        return indexRange;\n    },\n\n    /**\n     * Fire zoom custom event.\n     * @param {number} startIndex - start index\n     * @param {number} endIndex - end index\n     * @private\n     */\n    _fireZoom: function(startIndex, endIndex) {\n        var reverseMove = startIndex > endIndex;\n        var indexRange = this._adjustIndexRange(startIndex, endIndex);\n        var distanceOfRange = indexRange[1] - indexRange[0];\n\n        if (this.prevDistanceOfRange === distanceOfRange) {\n            return;\n        }\n\n        this.prevDistanceOfRange = distanceOfRange;\n        this.reverseMove = reverseMove;\n        this.eventBus.fire('zoom', indexRange);\n    },\n\n    /**\n     * Set flag about whether show tooltip after zoom or not.\n     * @param {number} clientX - clientX of mouse event\n     * @param {number} clientY - clientY of mouse event\n     * @private\n     */\n    _setIsShowTooltipAfterZoomFlag: function(clientX, clientY) {\n        var layerX = this._calculateLayerPosition(clientX, clientY, false).x;\n        var limitLayerX = this._calculateLayerPosition(clientX, clientY).x;\n\n        this.isShowTooltipAfterZoom = (layerX === limitLayerX);\n    },\n\n    /**\n     * On mouseup after drag event.\n     * @param {MouseEvent} e - mouse event\n     * @private\n     */\n    _onMouseupAfterDrag: function(e) {\n        var target;\n\n        this._unbindDragEvent();\n\n        if (tui.util.isNull(this.dragStartIndexes)) {\n            target = e.target || e.srcElement;\n            if (dom.hasClass(target, chartConst.CLASS_NAME_RESET_ZOOM_BTN)) {\n                this._hideTooltip();\n                this.prevDistanceOfRange = null;\n                this.eventBus.fire('resetZoom');\n            } else {\n                CustomEventBase.prototype._onClick.call(this, e);\n            }\n        } else {\n            this.dragEndIndexes = this._findDataForZoomable(e.clientX, e.clientY).indexes;\n            this._setIsShowTooltipAfterZoomFlag(e.clientX, e.clientY);\n            this._hideDragSelection();\n            this._fireZoom(this.dragStartIndexes.groupIndex, this.dragEndIndexes.groupIndex);\n        }\n\n        this.startClientPosition = null;\n        this.dragStartIndexes = null;\n        this.startLayerX = null;\n        this.afterMouseup = true;\n    },\n\n    /**\n     * Render reset zoom button element.\n     * @returns {HTMLElement}\n     * @private\n     */\n    _renderResetZoomBtn: function() {\n        var resetBtn = dom.create('DIV', chartConst.CLASS_NAME_RESET_ZOOM_BTN);\n        resetBtn.innerHTML = 'Reset Zoom';\n\n        return resetBtn;\n    },\n\n    /**\n     * Zoom.\n     * @param {object} data - data for rendering\n     */\n    zoom: function(data) {\n        this.prevFoundData = null;\n        this.rerender(data);\n        this._updateDimensionForDragSelection(this.dragSelectionElement);\n\n        if (!this.resetZoomBtn) {\n            this.resetZoomBtn = this._renderResetZoomBtn();\n            dom.append(this.customEventContainer, this.resetZoomBtn);\n        } else if (data.isResetZoom) {\n            this.customEventContainer.removeChild(this.resetZoomBtn);\n            this.resetZoomBtn = null;\n        }\n    }\n};\n\nmodule.exports = zoomMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"