tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_addingDynamicDataMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar chartConst = require('../const');\nvar predicate = require('../helpers/predicate');\n\n/**\n * addingDynamicData is mixer for adding dynamic data.\n * @mixin\n */\nvar addingDynamicDataMixer = {\n    /**\n     * Initialize for adding data.\n     * @private\n     */\n    _initForAddingData: function() {\n        /**\n         * whether lookupping or not\n         * @type {boolean}\n         */\n        this.lookupping = false;\n\n        /**\n         * whether paused or not\n         * @type {boolean}\n         */\n        this.paused = false;\n\n        /**\n         * rendering delay timer id\n         * @type {null}\n         */\n        this.rerenderingDelayTimerId = null;\n\n        /**\n         * added data count\n         * @type {number}\n         */\n        this.addedDataCount = 0;\n\n        /**\n         * checked legends.\n         * @type {null | Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}}\n         */\n        this.checkedLegends = null;\n\n        /**\n         * previous xAxis data\n         * @type {null|object}\n         */\n        this.prevXAxisData = null;\n    },\n\n    /**\n     * Calculate animate tick size.\n     * @param {number} xAxisWidth - x axis width\n     * @returns {number}\n     * @private\n     */\n    _calculateAnimateTickSize: function(xAxisWidth) {\n        var dataProcessor = this.dataProcessor;\n        var tickInterval = this.options.xAxis.tickInterval;\n        var shiftingOption = !!this.options.series.shifting;\n        var tickCount;\n\n        if (dataProcessor.isCoordinateType()) {\n            tickCount = dataProcessor.getValues(this.chartType, 'x').length - 1;\n        } else {\n            tickCount = dataProcessor.getCategoryCount(false) - 1;\n        }\n\n        if (shiftingOption &amp;&amp; !predicate.isAutoTickInterval(tickInterval)) {\n            tickCount -= 1;\n        }\n\n        return xAxisWidth / tickCount;\n    },\n\n    /**\n     * Animate for adding data.\n     * @private\n     */\n    _animateForAddingData: function() {\n        var self = this;\n        var shiftingOption = !!this.options.series.shifting;\n\n        this.addedDataCount += 1;\n\n        this._render(function(boundsAndScale) {\n            var tickSize = self._calculateAnimateTickSize(boundsAndScale.dimensionMap.xAxis.width);\n\n            self.componentManager.render('animateForAddingData', boundsAndScale, {\n                tickSize: tickSize,\n                shifting: shiftingOption\n            });\n        }, true);\n\n        if (shiftingOption) {\n            this.dataProcessor.shiftData();\n        }\n    },\n\n    /**\n     * Rerender for adding data.\n     * @private\n     */\n    _rerenderForAddingData: function() {\n        var self = this;\n\n        this._render(function(boundsAndScale) {\n            self.componentManager.render('rerender', boundsAndScale);\n        });\n    },\n\n    /**\n     * Check for added data.\n     * @private\n     */\n    _checkForAddedData: function() {\n        var self = this;\n        var added = this.dataProcessor.addDataFromDynamicData();\n\n        if (!added) {\n            this.lookupping = false;\n\n            return;\n        }\n\n        if (this.paused) {\n            if (this.options.series.shifting) {\n                this.dataProcessor.shiftData();\n            }\n            return;\n        }\n\n        this._animateForAddingData();\n        this.rerenderingDelayTimerId = setTimeout(function() {\n            self.rerenderingDelayTimerId = null;\n            self._rerenderForAddingData();\n            self._checkForAddedData();\n        }, 400);\n    },\n\n    /**\n     * Pause animation for adding data.\n     * @private\n     */\n    _pauseAnimationForAddingData: function() {\n        this.paused = true;\n\n        if (this.rerenderingDelayTimerId) {\n            clearTimeout(this.rerenderingDelayTimerId);\n            this.rerenderingDelayTimerId = null;\n\n            if (this.options.series.shifting) {\n                this.dataProcessor.shiftData();\n            }\n        }\n    },\n\n    /**\n     * Restart animation for adding data.\n     * @private\n     */\n    _restartAnimationForAddingData: function() {\n        this.paused = false;\n        this.lookupping = false;\n        this._startLookup();\n    },\n\n    /**\n     * Start lookup.\n     * @private\n     */\n    _startLookup: function() {\n        if (this.lookupping) {\n            return;\n        }\n\n        this.lookupping = true;\n\n        this._checkForAddedData();\n    },\n\n    /**\n     * Add data.\n     * @param {string} category - category\n     * @param {Array} values - values\n     */\n    addData: function(category, values) {\n        if (!values) {\n            values = category;\n            category = null;\n        }\n\n        this.dataProcessor.addDynamicData(category, values);\n        this._startLookup();\n    },\n\n\n    /**\n     * Change checked legend.\n     * @param {Array.&lt;?boolean> | {line: ?Array.&lt;boolean>, column: ?Array.&lt;boolean>}} checkedLegends checked legends\n     * @param {?object} rawData rawData\n     * @param {?object} boundsParams addition params for calculating bounds\n     * @override\n     */\n    _changeCheckedLegends: function(checkedLegends, rawData, boundsParams) {\n        var self = this;\n        var shiftingOption = !!this.options.series.shifting;\n        var pastPaused = this.paused;\n\n        if (!pastPaused) {\n            this._pauseAnimationForAddingData();\n        }\n\n        this.checkedLegends = checkedLegends;\n        this._rerender(checkedLegends, rawData, boundsParams);\n\n        if (!pastPaused) {\n            setTimeout(function() {\n                self.dataProcessor.addDataFromRemainDynamicData(shiftingOption);\n                self._restartAnimationForAddingData();\n            }, chartConst.RERENDER_TIME);\n        }\n    }\n};\n\nmodule.exports = addingDynamicDataMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"