tui.util.defineNamespace("fedoc.content", {});
fedoc.content["components_legends_legend.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Legend component.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar LegendModel = require('./legendModel');\nvar chartConst = require('../../const/');\nvar dom = require('../../helpers/domHandler');\nvar predicate = require('../../helpers/predicate');\nvar eventListener = require('../../helpers/eventListener');\nvar renderUtil = require('../../helpers/renderUtil');\nvar legendTemplate = require('./legendTemplate');\n\nvar Legend = tui.util.defineClass(/** @lends Legend.prototype */ {\n    /**\n     * Legend component.\n     * @constructs Legend\n     * @param {object} params parameters\n     *      @param {object} params.theme - axis theme\n     *      @param {?Array.&lt;string>} params.seriesNames - series names\n     *      @param {string} params.chart - chart type\n     */\n    init: function(params) {\n        /**\n         * legend theme\n         * @type {Object}\n         */\n        this.theme = params.theme;\n\n        /**\n         * options\n         * @type {Object}\n         */\n        this.options = params.options || {};\n\n        /**\n         * chart type\n         * @type {string}\n         */\n        this.chartType = params.chartType;\n\n        /**\n         * series names\n         * @type {?Array.&lt;string>}\n         */\n        this.seriesNames = params.seriesNames || [this.chartType];\n\n        /**\n         * event bus for transmitting message\n         * @type {object}\n         */\n        this.eventBus = params.eventBus;\n\n        /**\n         * Legend view className\n         */\n        this.className = 'tui-chart-legend-area';\n\n        /**\n         * checked indexes\n         * @type {Array}\n         */\n        this.checkedIndexes = [];\n\n        /**\n         * DataProcessor instance\n         * @type {DataProcessor}\n         */\n        this.dataProcessor = params.dataProcessor;\n\n        /**\n         * legend model\n         */\n        this.legendModel = new LegendModel({\n            theme: this.theme,\n            labels: params.dataProcessor.getLegendLabels(),\n            legendData: params.dataProcessor.getLegendData(),\n            seriesNames: this.seriesNames,\n            chartType: this.chartType\n        });\n\n        /**\n         * layout bounds information for this components\n         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number}}}\n         */\n        this.layout = null;\n    },\n\n    /**\n     * Render legend area.\n     * @param {HTMLElement} legendContainer legend container\n     * @private\n     */\n    _renderLegendArea: function(legendContainer) {\n        legendContainer.innerHTML = this._makeLegendHtml(this.legendModel.getData());\n        renderUtil.renderPosition(legendContainer, this.layout.position);\n        legendContainer.style.cssText += ';' + renderUtil.makeFontCssText(this.theme.label);\n    },\n\n    /**\n     * Set data for rendering.\n     * @param {{\n     *      layout: {\n     *          dimension: {width: number, height: number},\n     *          position: {left: number, top: number}\n     *      }\n     * }} data - bounds data\n     * @private\n     */\n    _setDataForRendering: function(data) {\n        if (data) {\n            this.layout = data.layout;\n        }\n    },\n\n    /**\n     * Render legend component.\n     * @param {object} data - bounds data\n     * @returns {HTMLElement} legend element\n     */\n    render: function(data) {\n        var container = dom.create('DIV', this.className);\n\n        this.legendContainer = container;\n\n        if (predicate.isHorizontalLegend(this.options.align)) {\n            dom.addClass(container, 'horizontal');\n        }\n\n        this._setDataForRendering(data);\n        this._renderLegendArea(container);\n        this._attachEvent(container);\n\n        return container;\n    },\n\n    /**\n     * Rerender.\n     * @param {object} data - bounds data\n     */\n    rerender: function(data) {\n        this._setDataForRendering(data);\n        this._renderLegendArea(this.legendContainer);\n    },\n\n    /**\n     * Resize legend component.\n     * @param {object} data - bounds data\n     */\n    resize: function(data) {\n        this.rerender(data);\n    },\n\n    /**\n     * Make cssText of legend rect.\n     * @param {{\n     *      chartType: string,\n     *      theme: {color: string, borderColor: ?string, singleColor: ?string}\n     * }} legendDatum legend datum\n     * @param {number} baseMarginTop base margin-top\n     * @returns {string} cssText of legend rect\n     * @private\n     */\n    _makeLegendRectCssText: function(legendDatum, baseMarginTop) {\n        var theme = legendDatum.theme,\n            borderCssText = theme.borderColor ? renderUtil.concatStr(';border:1px solid ', theme.borderColor) : '',\n            rectMargin, marginTop;\n        if (legendDatum.chartType === 'line') {\n            marginTop = baseMarginTop + chartConst.LINE_MARGIN_TOP;\n        } else {\n            marginTop = baseMarginTop;\n        }\n\n        rectMargin = renderUtil.concatStr(';margin-top:', marginTop, 'px');\n\n        return renderUtil.concatStr('background-color:', theme.singleColor || theme.color, borderCssText, rectMargin);\n    },\n\n\n    /**\n     * Make labels width.\n     * @param {Array.&lt;{chartType: ?string, label: string}>} legendData legend data\n     * @returns {Array.&lt;number>} labels width\n     * @private\n     */\n    _makeLabelsWidth: function(legendData) {\n        var self = this;\n\n        return tui.util.map(legendData, function(item) {\n            var labelWidth = renderUtil.getRenderedLabelWidth(item.label, self.theme.label);\n\n            return labelWidth + chartConst.LEGEND_AREA_PADDING;\n        });\n    },\n\n    /**\n     * Make legend html.\n     * @param {Array.&lt;{chartType: ?string, label: string}>} legendData legend data\n     * @returns {string} legend html\n     * @private\n     */\n    _makeLegendHtml: function(legendData) {\n        var self = this;\n        var template = legendTemplate.tplLegend;\n        var checkBoxTemplate = legendTemplate.tplCheckbox;\n        var labelsWidth = this._makeLabelsWidth(legendData);\n        var labelHeight = renderUtil.getRenderedLabelHeight(legendData[0].label, legendData[0].theme);\n        var isHorizontalLegend = predicate.isHorizontalLegend(this.options.align);\n        var height = labelHeight + (chartConst.LABEL_PADDING_TOP * 2);\n        var baseMarginTop = parseInt((height - chartConst.LEGEND_RECT_WIDTH) / 2, 10) - 1;\n        var html = tui.util.map(legendData, function(legendDatum, index) {\n            var rectCssText = self._makeLegendRectCssText(legendDatum, baseMarginTop);\n            var checkbox = self.options.showCheckbox === false ? '' : checkBoxTemplate({\n                index: index,\n                checked: self.legendModel.isCheckedIndex(index) ? ' checked' : ''\n            });\n            var data = {\n                rectCssText: rectCssText,\n                height: height,\n                labelHeight: labelHeight,\n                unselected: self.legendModel.isUnselectedIndex(index) ? ' unselected' : '',\n                labelWidth: isHorizontalLegend ? ';width:' + labelsWidth[index] + 'px' : '',\n                iconType: legendDatum.chartType || 'rect',\n                label: legendDatum.label,\n                checkbox: checkbox,\n                index: index\n            };\n\n            return template(data);\n        }).join('');\n\n        return html;\n    },\n\n    /**\n     * Find legend element.\n     * @param {HTMLElement} elTarget target element\n     * @returns {HTMLElement} legend element\n     * @private\n     */\n    _findLegendLabelElement: function(elTarget) {\n        var legendContainer;\n\n        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_LEGEND_LABEL)) {\n            legendContainer = elTarget;\n        } else {\n            legendContainer = dom.findParentByClass(elTarget, chartConst.CLASS_NAME_LEGEND_LABEL);\n        }\n\n        return legendContainer;\n    },\n\n    /**\n     * Fire onChangeCheckedLegends event.\n     * @private\n     */\n    _fireChangeCheckedLegendsEvent: function() {\n        this.eventBus.fire('changeCheckedLegends', this.legendModel.getCheckedIndexes());\n    },\n\n    /**\n     * Fire selectLegend event.\n     * @param {{chartType: string, index: number}} data data\n     * @private\n     */\n    _fireSelectLegendEvent: function(data) {\n        var index = this.legendModel.getSelectedIndex();\n        var legendIndex = !tui.util.isNull(index) ? data.seriesIndex : index;\n\n        this.eventBus.fire('selectLegend', data.chartType, legendIndex);\n    },\n\n    /**\n     * Fire selectLegend public event.\n     * @param {{label: string, chartType: string, index: number}} data data\n     * @private\n     */\n    _fireSelectLegendPublicEvent: function(data) {\n        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'selectLegend', {\n            legend: data.label,\n            chartType: data.chartType,\n            index: data.index\n        });\n    },\n\n    /**\n     * Select legend.\n     * @param {number} index index\n     * @private\n     */\n    _selectLegend: function(index) {\n        var data = this.legendModel.getDatum(index);\n\n        this.legendModel.toggleSelectedIndex(index);\n\n        if (!tui.util.isNull(this.legendModel.getSelectedIndex()) &amp;&amp; !this.legendModel.isCheckedSelectedIndex()) {\n            this.legendModel.checkSelectedIndex();\n            this._fireChangeCheckedLegendsEvent();\n        }\n\n        this._renderLegendArea(this.legendContainer);\n\n        this._fireSelectLegendEvent(data);\n        this._fireSelectLegendPublicEvent(data);\n    },\n\n    /**\n     * Get checked indexes.\n     * @returns {Array} checked indexes\n     * @private\n     */\n    _getCheckedIndexes: function() {\n        var checkedIndexes = [];\n\n        tui.util.forEachArray(this.legendContainer.getElementsByTagName('input'), function(checkbox, index) {\n            if (checkbox.checked) {\n                checkedIndexes.push(index);\n            }\n        });\n\n        return checkedIndexes;\n    },\n\n    /**\n     * Check legend.\n     * @private\n     */\n    _checkLegend: function() {\n        var checkedIndexes = this._getCheckedIndexes();\n        var checkedCount = checkedIndexes.length;\n        var isPieTypeCharts = tui.util.all(this.seriesNames, predicate.isPieTypeChart);\n        var data;\n\n        if ((isPieTypeCharts &amp;&amp; checkedCount === 1) || checkedCount === 0) {\n            this._renderLegendArea(this.legendContainer);\n        } else {\n            this.legendModel.updateCheckedData(checkedIndexes);\n\n            data = this.legendModel.getSelectedDatum();\n\n            if (!this.legendModel.isCheckedSelectedIndex()) {\n                this.legendModel.updateSelectedIndex(null);\n            }\n\n            this._renderLegendArea(this.legendContainer);\n\n            this._fireChangeCheckedLegendsEvent();\n\n            if (data) {\n                this._fireSelectLegendEvent(data);\n            }\n        }\n    },\n\n    /**\n     * On click event handler.\n     * @param {MouseEvent} e mouse event\n     * @private\n     */\n    _onClick: function(e) {\n        var elTarget = e.target || e.srcElement,\n            legendContainer, index;\n\n        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_LEGEND_CHECKBOX)) {\n            this._checkLegend();\n\n            return;\n        }\n\n        legendContainer = this._findLegendLabelElement(elTarget);\n\n        if (!legendContainer) {\n            return;\n        }\n\n        index = parseInt(legendContainer.getAttribute('data-index'), 10);\n        this._selectLegend(index);\n    },\n\n    /**\n     * Attach browser event.\n     * @param {HTMLElement} target target element\n     * @private\n     */\n    _attachEvent: function(target) {\n        eventListener.on(target, 'click', this._onClick, this);\n    }\n});\n\ntui.util.CustomEvents.mixin(Legend);\n\nmodule.exports = Legend;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"