tui.util.defineNamespace("fedoc.content", {});
fedoc.content["models_bounds_legendCalculator.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Calculator for dimension of legend.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../../const');\nvar predicate = require('../../helpers/predicate');\nvar renderUtil = require('../../helpers/renderUtil');\n\n/**\n * Calculator for dimension of legend.\n * @module legendCalculator\n */\nvar legendCalculator = {\n    /**\n     * Legend margin.\n     * @type {number}\n     */\n    legendMargin: chartConst.LEGEND_RECT_WIDTH + chartConst.LEGEND_LABEL_LEFT_PADDING + chartConst.LEGEND_AREA_PADDING,\n\n    /**\n     * Calculate sum of legends width.\n     * @param {Array.&lt;string>} labels - legend labels\n     * @param {{fontSize: number, fontFamily: number}} labelTheme - legend label theme\n     * @param {number} checkboxWidth - width for checkbox\n     * @returns {number}\n     * @private\n     */\n    _calculateLegendsWidthSum: function(labels, labelTheme, checkboxWidth) {\n        var legendMargin = this.legendMargin;\n\n        return tui.util.sum(tui.util.map(labels, function(label) {\n            var labelWidth = renderUtil.getRenderedLabelWidth(label, labelTheme) + checkboxWidth;\n\n            return labelWidth + legendMargin;\n        }));\n    },\n\n    /**\n     * Divide legend labels.\n     * @param {Array.&lt;string>} labels legend labels\n     * @param {number} count division count\n     * @returns {Array.&lt;Array.&lt;string>>}\n     * @private\n     */\n    _divideLegendLabels: function(labels, count) {\n        var limitCount = Math.round(labels.length / count);\n        var results = [];\n        var temp = [];\n\n        tui.util.forEachArray(labels, function(label) {\n            if (temp.length &lt; limitCount) {\n                temp.push(label);\n            } else {\n                results.push(temp);\n                temp = [label];\n            }\n        });\n\n        if (temp.length) {\n            results.push(temp);\n        }\n\n        return results;\n    },\n\n    /**\n     * Get max line width.\n     * @param {Array.&lt;string>} dividedLabels - divided labels\n     * @param {{fontFamily: ?string, fontSize: ?string}} labelTheme - label theme\n     * @param {number} checkboxWidth - width for checkbox\n     * @returns {number}\n     * @private\n     */\n    _getMaxLineWidth: function(dividedLabels, labelTheme, checkboxWidth) {\n        var self = this;\n        var lineWidths = tui.util.map(dividedLabels, function(labels) {\n            return self._calculateLegendsWidthSum(labels, labelTheme, checkboxWidth);\n        });\n\n        return tui.util.max(lineWidths);\n    },\n\n    /**\n     * Make divided labels and max line width.\n     * @param {Array.&lt;string>} labels legend labels\n     * @param {number} chartWidth chart width\n     * @param {{fontSize: number, fontFamily: number}} labelTheme legend label theme\n     * @param {number} checkboxWidth - width for checkbox\n     * @returns {{dividedLabels: Array.&lt;Array.&lt;string>>, maxLineWidth: number}}\n     * @private\n     */\n    _makeDividedLabelsAndMaxLineWidth: function(labels, chartWidth, labelTheme, checkboxWidth) {\n        var divideCount = 1;\n        var maxLineWidth = 0;\n        var prevMaxWidth = 0;\n        var dividedLabels, prevLabels;\n\n        do {\n            dividedLabels = this._divideLegendLabels(labels, divideCount);\n            maxLineWidth = this._getMaxLineWidth(dividedLabels, labelTheme, checkboxWidth);\n\n            if (prevMaxWidth === maxLineWidth) {\n                dividedLabels = prevLabels;\n                break;\n            }\n\n            prevMaxWidth = maxLineWidth;\n            prevLabels = dividedLabels;\n            divideCount += 1;\n        } while (maxLineWidth >= chartWidth);\n\n        return {\n            labels: dividedLabels,\n            maxLineWidth: maxLineWidth\n        };\n    },\n\n    /**\n     * Calculate height of horizontal legend.\n     * @param {Array.&lt;Array.&lt;string>>} dividedLabels - divided labels\n     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend\n     * @returns {number}\n     * @private\n     */\n    _calculateHorizontalLegendHeight: function(dividedLabels, labelTheme) {\n        return tui.util.sum(tui.util.map(dividedLabels, function(labels) {\n            return renderUtil.getRenderedLabelsMaxHeight(labels, labelTheme);\n        }));\n    },\n\n    /**\n     * Make dimension of horizontal legend.\n     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend\n     * @param {Array.&lt;string>} legendLabels - labels for legend\n     * @param {number} chartWidth - chart width\n     * @param {number} checkboxWidth - width for checkbox\n     * @returns {{width: number, height: (number)}}\n     * @private\n     */\n    _makeHorizontalDimension: function(labelTheme, legendLabels, chartWidth, checkboxWidth) {\n        var dividedInfo = this._makeDividedLabelsAndMaxLineWidth(legendLabels, chartWidth, labelTheme, checkboxWidth);\n        var horizontalLegendHeight = this._calculateHorizontalLegendHeight(dividedInfo.labels, labelTheme);\n        var legendHeight = horizontalLegendHeight + (chartConst.LEGEND_AREA_PADDING * 2);\n\n        return {\n            width: Math.max(dividedInfo.maxLineWidth, chartConst.MIN_LEGEND_WIDTH),\n            height: legendHeight\n        };\n    },\n\n    /**\n     * Make dimension of vertical legend.\n     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend\n     * @param {Array.&lt;string>} legendLabels - labels for legend\n     * @param {number} checkboxWidth - width for checkbox\n     * @returns {{width: (number)}}\n     * @private\n     */\n    _makeVerticalDimension: function(labelTheme, legendLabels, checkboxWidth) {\n        var labelWidth = renderUtil.getRenderedLabelsMaxWidth(legendLabels, labelTheme) + checkboxWidth;\n\n        return {\n            width: labelWidth + this.legendMargin,\n            height: 0\n        };\n    },\n\n    /**\n     * Calculate legend dimension.\n     * @param {{showCheckbox: boolean, visible: boolean, align: string}} options - options for legend\n     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend\n     * @param {Array.&lt;string>} legendLabels - labels for legend\n     * @param {number} chartWidth chart width\n     * @returns {{width: number, height: number}}\n     */\n    calculate: function(options, labelTheme, legendLabels, chartWidth) {\n        var checkboxWidth = options.showCheckbox === false ? 0 : chartConst.LEGEND_CHECKBOX_WIDTH;\n        var dimension = {};\n\n        if (!options.visible) {\n            dimension.width = 0;\n        } else if (predicate.isHorizontalLegend(options.align)) {\n            dimension = this._makeHorizontalDimension(labelTheme, legendLabels, chartWidth, checkboxWidth);\n        } else {\n            dimension = this._makeVerticalDimension(labelTheme, legendLabels, checkboxWidth);\n        }\n\n        return dimension;\n    }\n};\n\nmodule.exports = legendCalculator;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"