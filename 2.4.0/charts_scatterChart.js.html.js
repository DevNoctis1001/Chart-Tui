tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_scatterChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Scatter chart is a type of plot or mathematical diagram using Cartesian coordinates\n *                  to display values for typically two variables for a set of data.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase');\nvar chartConst = require('../const');\nvar Series = require('../components/series/scatterChartSeries');\nvar axisTypeMixer = require('./axisTypeMixer');\n\nvar ScatterChart = tui.util.defineClass(ChartBase, /** @lends ScatterChart.prototype */ {\n    /**\n     * className\n     * @type {string}\n     */\n    className: 'tui-scatter-chart',\n    /**\n     * Scatter chart is a type of plot or mathematical diagram using Cartesian coordinates\n     *  to display values for typically two variables for a set of data.\n     * @constructs ScatterChart\n     * @extends ChartBase\n     * @mixes axisTypeMixer\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(rawData, theme, options) {\n        options.tooltip = options.tooltip || {};\n\n        if (!options.tooltip.align) {\n            options.tooltip.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;\n        }\n\n        ChartBase.call(this, {\n            rawData: rawData,\n            theme: theme,\n            options: options,\n            hasAxes: true\n        });\n    },\n\n    /**\n     * Add components\n     * @private\n     */\n    _addComponents: function() {\n        this._addComponentsForAxisType({\n            axis: [\n                {\n                    name: 'yAxis',\n                    isVertical: true\n                },\n                {\n                    name: 'xAxis'\n                }\n            ],\n            series: [\n                {\n                    name: 'scatterSeries',\n                    SeriesClass: Series\n                }\n            ],\n            plot: true\n        });\n    },\n\n    /**\n     * Get scale option.\n     * @returns {{xAxis: {valueType: string}, yAxis: {valueType: string}}}\n     * @private\n     * @override\n     */\n    _getScaleOption: function() {\n        return {\n            xAxis: {\n                valueType: 'x'\n            },\n            yAxis: {\n                valueType: 'y'\n            }\n        };\n    }\n});\n\ntui.util.extend(ScatterChart.prototype, axisTypeMixer);\n\nmodule.exports = ScatterChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"