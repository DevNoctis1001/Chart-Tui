tui.util.defineNamespace("fedoc.content", {});
fedoc.content["themes_themeManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Theme manager.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const');\nvar predicate = require('../helpers/predicate');\nvar defaultTheme = require('./defaultTheme');\n\nvar themes = {};\n\nmodule.exports = {\n    /**\n     * Theme register.\n     * @param {string} themeName theme name\n     * @param {object} theme theme\n     */\n    register: function(themeName, theme) {\n        theme = JSON.parse(JSON.stringify(theme));\n        themes[themeName] = theme;\n    },\n\n    /**\n     * Pick series names from raw series data.\n     * @param {string} chartType - chart type\n     * @param {object} rawSeriesData - raw series data\n     * @returns {Array}\n     * @private\n     */\n    _pickSeriesNames: function(chartType, rawSeriesData) {\n        var seriesNames = [];\n        if (predicate.isComboChart(chartType)) {\n            tui.util.forEach(rawSeriesData, function(data, seriesName) {\n                seriesNames.push(seriesName);\n            });\n        } else {\n            seriesNames.push(chartType);\n        }\n\n        return seriesNames;\n    },\n\n    /**\n     * Overwrite theme\n     * @param {object} fromTheme - from theme\n     * @param {object} toTheme - to theme\n     * @private\n     */\n    _overwriteTheme: function(fromTheme, toTheme) {\n        var self = this;\n\n        tui.util.forEach(toTheme, function(item, key) {\n            var fromItem = fromTheme[key];\n            if (!fromItem) {\n                return;\n            }\n\n            if (tui.util.isArray(fromItem)) {\n                toTheme[key] = fromItem.slice();\n            } else if (tui.util.isObject(fromItem)) {\n                self._overwriteTheme(fromItem, item);\n            } else {\n                toTheme[key] = fromItem;\n            }\n        });\n    },\n\n    /**\n     * Pick valid theme properties.\n     * @param {object} theme - theme\n     * @param {string} componentType - component type (series or yAxis)\n     * @returns {object}\n     * @private\n     */\n    _pickValidTheme: function(theme, componentType) {\n        var validTheme = {};\n\n        tui.util.forEachArray(chartConst.THEME_PROPS_MAP[componentType], function(propName) {\n            if (tui.util.isExisty(theme[propName])) {\n                validTheme[propName] = theme[propName];\n            }\n        });\n\n        return validTheme;\n    },\n\n    /**\n     * Create component theme with series name\n     * @param {array.&lt;string>} seriesNames - series names\n     * @param {object} fromTheme - from theme\n     * @param {object} toTheme - to theme\n     * @param {string} componentType - component type\n     * @returns {object}\n     * @private\n     */\n\n    _createComponentThemeWithSeriesName: function(seriesNames, fromTheme, toTheme, componentType) {\n        var self = this;\n        var newTheme = {};\n\n        fromTheme = fromTheme || {};\n\n        tui.util.forEachArray(seriesNames, function(seriesName) {\n            var theme = fromTheme[seriesName] || self._pickValidTheme(fromTheme, componentType);\n\n            if (tui.util.keys(theme).length) {\n                newTheme[seriesName] = JSON.parse(JSON.stringify(defaultTheme[componentType]));\n                self._overwriteTheme(theme, newTheme[seriesName]);\n            } else {\n                newTheme[seriesName] = JSON.parse(JSON.stringify(toTheme));\n            }\n        });\n\n        return newTheme;\n    },\n\n    /**\n     * Set colors theme.\n     * @param {object} theme - theme\n     * @param {object} rawTheme - raw theme\n     * @param {Array.&lt;string>} baseColors - base colors\n     * @private\n     */\n    _setColorsTheme: function(theme, rawTheme, baseColors) {\n        if (rawTheme.colors) {\n            theme.colors = rawTheme.colors.concat(baseColors);\n        } else {\n            theme.colors = baseColors;\n        }\n\n        if (rawTheme.singleColors &amp;&amp; rawTheme.singleColors.length) {\n            theme.singleColors = rawTheme.singleColors.concat(baseColors);\n        }\n    },\n\n    /**\n     * Set series colors theme.\n     * @param {Array.&lt;string>} seriesNames - series names\n     * @param {object} seriesThemeMap - series theme map\n     * @param {object} rawSeriesThemeMap - raw series theme map\n     * @param {object} rawSeriesData - raw series data\n     * @private\n     */\n    _setSeriesColors: function(seriesNames, seriesThemeMap, rawSeriesThemeMap, rawSeriesData) {\n        var self = this;\n        var baseColors = JSON.parse(JSON.stringify(defaultTheme.series.colors));\n        var startThemeIndex;\n\n        rawSeriesThemeMap = rawSeriesThemeMap || {};\n\n        if (seriesNames.length === 1) { // single chart\n            this._setColorsTheme(seriesThemeMap[seriesNames[0]], rawSeriesThemeMap, baseColors);\n        } else { // combo chart\n            startThemeIndex = 0;\n            tui.util.forEachArray(seriesNames, function(seriesName) {\n                var rawSeriesTheme = rawSeriesThemeMap[seriesName] || {};\n                var legendCount = rawSeriesData[seriesName].length;\n                var colorsCount = rawSeriesTheme.colors ? rawSeriesTheme.colors.length : 0;\n                var additionalColors = [];\n                var endThemeIndex;\n\n                if (colorsCount &lt; legendCount) {\n                    endThemeIndex = startThemeIndex + (legendCount - colorsCount);\n                    additionalColors = baseColors.slice(startThemeIndex, endThemeIndex);\n                    startThemeIndex = endThemeIndex;\n                }\n\n                self._setColorsTheme(seriesThemeMap[seriesName], rawSeriesTheme, additionalColors);\n            });\n        }\n    },\n\n    /**\n     * Init theme.\n     * @param {string} themeName - theme name\n     * @param {object} rawTheme - raw theme\n     * @param {array.&lt;string>} seriesNames - series names\n     * @param {object} rawSeriesData - raw series data\n     * @returns {object}\n     * @private\n     * @ignore\n     */\n    _initTheme: function(themeName, rawTheme, seriesNames, rawSeriesData) {\n        var theme;\n\n        if (themeName !== chartConst.DEFAULT_THEME_NAME) {\n            theme = JSON.parse(JSON.stringify(defaultTheme));\n            this._overwriteTheme(rawTheme, theme);\n        } else {\n            theme = JSON.parse(JSON.stringify(rawTheme));\n        }\n\n        theme.yAxis = this._createComponentThemeWithSeriesName(seriesNames, rawTheme.yAxis, theme.yAxis, 'yAxis');\n        theme.series = this._createComponentThemeWithSeriesName(seriesNames, rawTheme.series, theme.series, 'series');\n\n        this._setSeriesColors(seriesNames, theme.series, rawTheme.series, rawSeriesData);\n\n        return theme;\n    },\n\n    /**\n     * Create target themes for font inherit.\n     * @param {object} theme - theme\n     * @returns {Array.&lt;object>}\n     * @private\n     */\n    _createTargetThemesForFontInherit: function(theme) {\n        var items = [\n            theme.title,\n            theme.xAxis.title,\n            theme.xAxis.label,\n            theme.legend.label\n        ];\n\n        tui.util.forEach(theme.yAxis, function(_theme) {\n            items.push(_theme.title, _theme.label);\n        });\n\n        tui.util.forEach(theme.series, function(_theme) {\n            items.push(_theme.label);\n        });\n\n        return items;\n    },\n\n    /**\n     * Inherit theme font.\n     * @param {object} theme theme\n     * @private\n     */\n    _inheritThemeFont: function(theme) {\n        var targetThemes = this._createTargetThemesForFontInherit(theme);\n        var baseFont = theme.chart.fontFamily;\n\n        tui.util.forEachArray(targetThemes, function(item) {\n            if (!item.fontFamily) {\n                item.fontFamily = baseFont;\n            }\n        });\n    },\n\n    /**\n     * Copy color theme to otherTheme from seriesTheme.\n     * @param {object} seriesTheme - series theme\n     * @param {object} otherTheme - other theme\n     * @param {object} seriesName - series name\n     * @private\n     */\n    _copySeriesColorTheme: function(seriesTheme, otherTheme, seriesName) {\n        otherTheme[seriesName] = {\n            colors: seriesTheme.colors,\n            singleColors: seriesTheme.singleColors,\n            borderColor: seriesTheme.borderColor,\n            selectionColor: seriesTheme.selectionColor\n        };\n    },\n\n    /**\n     * Copy series color theme to other components.\n     * @param {object} theme theme\n     * @private\n     * @ignore\n     */\n    _copySeriesColorThemeToOther: function(theme) {\n        var self = this;\n\n        tui.util.forEach(theme.series, function(seriesTheme, seriesName) {\n            self._copySeriesColorTheme(seriesTheme, theme.legend, seriesName);\n            self._copySeriesColorTheme(seriesTheme, theme.tooltip, seriesName);\n        });\n    },\n\n    /**\n     * Get theme.\n     * @param {string} themeName - theme name\n     * @param {string} chartType - chart type\n     * @param {object} rawSeriesData - raw series data\n     * @returns {object}\n     */\n    get: function(themeName, chartType, rawSeriesData) {\n        var rawTheme = themes[themeName];\n        var theme, seriesNames;\n\n        if (!rawTheme) {\n            throw new Error('Not exist ' + themeName + ' theme.');\n        }\n\n        seriesNames = this._pickSeriesNames(chartType, rawSeriesData);\n\n        theme = this._initTheme(themeName, rawTheme, seriesNames, rawSeriesData);\n\n        this._inheritThemeFont(theme, seriesNames);\n        this._copySeriesColorThemeToOther(theme);\n\n        return theme;\n    }\n};\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"