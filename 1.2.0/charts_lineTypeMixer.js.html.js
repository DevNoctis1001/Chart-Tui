ne.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_lineTypeMixer.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview lineTypeMixer is mixer of line type chart(line, area).\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase'),\n    LineTypeEventHandleLayer = require('../eventHandleLayers/lineTypeEventHandleLayer');\n\n/**\n * lineTypeMixer is mixer of line type chart(line, area).\n * @mixin\n */\nvar lineTypeMixer = {\n    /**\n     * Initialize line type chart.\n     * @param {array.&lt;array>} userData chart data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     * @param {object} initedData initialized data from combo chart\n     */\n    lineTypeInit: function(userData, theme, options, initedData) {\n        var baseData = initedData || this.makeBaseData(userData, theme, options, {\n                isVertical: true,\n                hasAxes: true\n            }),\n            convertedData = baseData.convertedData,\n            bounds = baseData.bounds,\n            axesData = this._makeAxesData(convertedData, bounds, options, initedData);\n\n        ChartBase.call(this, {\n            bounds: bounds,\n            axesData: axesData,\n            theme: theme,\n            options: options,\n            isVertical: true,\n            initedData: initedData\n        });\n\n        if (!this.isSubChart &amp;&amp; !this.isGroupedTooltip) {\n            this.addComponent('eventHandleLayer', LineTypeEventHandleLayer, {\n                tickCount: axesData.xAxis ? axesData.xAxis.tickCount : -1\n            });\n        }\n\n        this._addComponents(convertedData, axesData, options);\n    },\n\n    /**\n     * Add components\n     * @param {object} convertedData converted data\n     * @param {object} axesData axes data\n     * @param {object} options chart options\n     * @private\n     */\n    _addComponents: function(convertedData, axesData) {\n        var plotData, seriesData;\n\n        plotData = this.makePlotData(convertedData.plotData, axesData);\n        seriesData = {\n            data: {\n                values: tui.util.pivot(convertedData.values),\n                formattedValues: tui.util.pivot(convertedData.formattedValues),\n                scale: axesData.yAxis.scale,\n                xTickCount: axesData.xAxis &amp;&amp; axesData.xAxis.tickCount || -1\n            }\n        };\n        this.addAxisComponents({\n            convertedData: convertedData,\n            axes: axesData,\n            plotData: plotData,\n            Series: this.Series,\n            seriesData: seriesData,\n            aligned: axesData.xAxis &amp;&amp; axesData.xAxis.aligned\n        });\n    },\n\n    /**\n     * Render\n     * @returns {HTMLElement} chart element\n     */\n    render: function() {\n        if (!this.isSubChart &amp;&amp; !this.isGroupedTooltip) {\n            this._attachLineTypeCoordinateEvent();\n        }\n        return ChartBase.prototype.render.apply(this, arguments);\n    },\n\n    /**\n     * To attach coordinate event of line type.\n     * @private\n     */\n    _attachLineTypeCoordinateEvent: function() {\n        var eventHandleLayer = this.componentMap.eventHandleLayer,\n            series = this.componentMap.series;\n        eventHandleLayer.on('overTickSector', series.onLineTypeOverTickSector, series);\n        eventHandleLayer.on('outTickSector', series.onLineTypeOutTickSector, series);\n    },\n\n    /**\n     * Mix in.\n     * @param {function} func target function\n     * @ignore\n     */\n    mixin: function(func) {\n        tui.util.extend(func.prototype, this);\n    }\n};\n\nmodule.exports = lineTypeMixer;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"