ne.util.defineNamespace("fedoc.content", {});
fedoc.content["legends_legend.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Legend component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil'),\n    defaultTheme = require('../themes/defaultTheme'),\n    legendTemplate = require('./../legends/legendTemplate');\n\nvar Legend = tui.util.defineClass(/** @lends Legend.prototype */ {\n    /**\n     * Legend component.\n     * @constructs Legend\n     * @param {object} params parameters\n     *      @param {number} params.legendLabels legend labels\n     *      @param {object} params.bound axis bound\n     *      @param {object} params.theme axis theme\n     */\n    init: function(params) {\n        tui.util.extend(this, params);\n        /**\n         * Legend view className\n         */\n        this.className = 'tui-chart-legend-area';\n    },\n\n    /**\n     * Render legend.\n     * @param {object} bound plot bound\n     * @returns {HTMLElement} legend element\n     */\n    render: function() {\n        var el = dom.create('DIV', this.className);\n        el.innerHTML = this._makeLegendHtml();\n        renderUtil.renderPosition(el, this.bound.position);\n        this._renderLabelTheme(el, this.theme.label);\n\n        return el;\n    },\n\n    /**\n     * Set theme for legend labels\n     * @param {array.&lt;object>} labels labels\n     * @param {object} theme legend theme\n     * @returns {array.&lt;object>} labels\n     * @private\n     */\n    _setThemeForLabels: function(labels, theme) {\n        var result = tui.util.map(labels, function(item, index) {\n            var itemTheme = {\n                color: theme.colors[index]\n            };\n\n            if (theme.singleColors) {\n                itemTheme.singleColor = theme.singleColors[index];\n            }\n            if (theme.borderColor) {\n                itemTheme.borderColor = theme.borderColor;\n            }\n            item.theme = itemTheme;\n            return item;\n        }, this);\n\n        return result;\n    },\n\n    /**\n     * To make legend labels.\n     * @returns {array.&lt;object>} legend labels.\n     * @private\n     */\n    _makeLegendLabels: function() {\n        var chartType = this.chartType,\n            legendLabels = this.legendLabels,\n            joinLegendLabels = this.joinLegendLabels,\n            labelLen = legendLabels.length,\n            theme = this.theme,\n            chartLegendTheme = tui.util.filter(theme, function(item, name) {\n                return tui.util.inArray(name, chartConst.SERIES_PROPS) === -1 &amp;&amp; name !== 'label';\n            }),\n            chartTypes = tui.util.keys(chartLegendTheme),\n            defaultLegendTheme = {\n                colors: defaultTheme.series.colors\n            },\n            chartTheme, result;\n\n        if (!chartTypes.length) {\n            result = this._setThemeForLabels(joinLegendLabels, theme);\n        } else {\n            chartTheme = theme[chartType] || defaultLegendTheme;\n            result = this._setThemeForLabels(joinLegendLabels.slice(0, labelLen), chartTheme);\n            chartTheme = theme[tui.util.filter(chartTypes, function(propName) {\n                return propName !== chartType;\n            })[0]] || defaultLegendTheme;\n            result = result.concat(this._setThemeForLabels(joinLegendLabels.slice(labelLen), chartTheme));\n        }\n        return result;\n    },\n\n    /**\n     * To make legend html.\n     * @returns {string} legend html\n     * @private\n     */\n    _makeLegendHtml: function() {\n        var labels = this._makeLegendLabels(),\n            template = legendTemplate.tplLegend,\n            labelHeight = renderUtil.getRenderedLabelHeight(labels[0].label, labels[0].theme) + (chartConst.LABEL_PADDING_TOP * 2),\n            baseMarginTop = parseInt((labelHeight - chartConst.LEGEND_RECT_WIDTH) / 2, 10) - 1,\n            html = tui.util.map(labels, function(label) {\n                var borderCssText = label.borderColor ? renderUtil.concatStr(';border:1px solid ', label.borderColor) : '',\n                    rectMargin, marginTop, data;\n                if (label.chartType === 'line') {\n                    marginTop = baseMarginTop + chartConst.LINE_MARGIN_TOP;\n                } else {\n                    marginTop = baseMarginTop;\n                }\n                rectMargin = renderUtil.concatStr(';margin-top:', marginTop, 'px');\n\n                data = {\n                    cssText: renderUtil.concatStr('background-color:', label.theme.singleColor || label.theme.color, borderCssText, rectMargin),\n                    height: labelHeight,\n                    chartType: label.chartType || 'rect',\n                    label: label.label\n                };\n                return template(data);\n            }, this).join('');\n        return html;\n    },\n\n    /**\n     * Render css style of label area.\n     * @param {HTMLElement} el label area element\n     * @param {{fontSize:number, fontFamily: string, color: string}} theme label theme\n     * @private\n     */\n    _renderLabelTheme: function(el, theme) {\n        var cssText = renderUtil.makeFontCssText(theme);\n        el.style.cssText += ';' + cssText;\n    }\n});\n\nmodule.exports = Legend;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"