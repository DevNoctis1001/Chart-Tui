ne.util.defineNamespace("fedoc.content", {});
fedoc.content["tooltips_tooltip.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Tooltip component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar TooltipBase = require('./tooltipBase'),\n    chartConst = require('../const'),\n    dom = require('../helpers/domHandler'),\n    event = require('../helpers/eventListener'),\n    templateMaker = require('../helpers/templateMaker'),\n    tooltipTemplate = require('./tooltipTemplate');\n\nvar Tooltip = tui.util.defineClass(TooltipBase, /** @lends Tooltip.prototype */ {\n    /**\n     * Tooltip component.\n     * @constructs Tooltip\n     * @param {object} params parameters\n     *      @param {array.&lt;number>} params.values converted values\n     *      @param {array} params.labels labels\n     *      @param {array} params.legendLabels legend labels\n     *      @param {object} params.bound axis bound\n     *      @param {object} params.theme axis theme\n     */\n    init: function(params) {\n        TooltipBase.call(this, params);\n        this.tplTooltip = this._getTooltipTemplate(this.options.template);\n        this._setDefaultTooltipPositionOption();\n    },\n\n    /**\n     * Get tooltip template.\n     * @param {object} optionTemplate template option\n     * @returns {object} template\n     * @private\n     */\n    _getTooltipTemplate: function(optionTemplate) {\n        return optionTemplate ? templateMaker.template(optionTemplate) : tooltipTemplate.tplDefault;\n    },\n\n    /**\n     * Set default position option of tooltip.\n     * @private\n     */\n    _setDefaultTooltipPositionOption: function() {\n        if (this.options.position) {\n            return;\n        }\n\n        if (this.isVertical) {\n            this.options.position = chartConst.TOOLTIP_DEFAULT_POSITION_OPTION;\n        } else {\n            this.options.position = chartConst.TOOLTIP_DEFAULT_HORIZONTAL_POSITION_OPTION;\n        }\n    },\n\n    /**\n     * Render tooltip.\n     * @param {{position: object}} bound tooltip bound\n     * @returns {HTMLElement} tooltip element\n     */\n    render: function() {\n        var el = TooltipBase.prototype.render.call(this);\n        this.attachEvent(el);\n        return el;\n    },\n\n    /**\n     * To make tooltip data.\n     * @returns {array.&lt;object>} tooltip data\n     * @override\n     */\n    makeTooltipData: function() {\n        var labels = this.labels,\n            groupValues = this.values,\n            legendLabels = this.legendLabels;\n\n        return tui.util.map(groupValues, function(values, groupIndex) {\n            return tui.util.map(values, function(value, index) {\n                return {\n                    category: labels ? labels[groupIndex] : '',\n                    legend: legendLabels[index],\n                    value: value\n                };\n            });\n        });\n    },\n\n    /**\n     * Fire custom event showAnimation.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @private\n     */\n    _fireShowAnimation: function(indexes) {\n        this.fire('showAnimation', indexes);\n    },\n\n    /**\n     * Fire custom event hideAnimation.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @private\n     */\n    _fireHideAnimation: function(indexes) {\n        this.fire('hideAnimation', indexes);\n    },\n\n    /**\n     * Set data indexes.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @param {{groupIndex: number, index:number}} indexes indexes\n     * @private\n     */\n    _setIndexesCustomAttribute: function(elTooltip, indexes) {\n        elTooltip.setAttribute('data-groupIndex', indexes.groupIndex);\n        elTooltip.setAttribute('data-index', indexes.index);\n    },\n\n    /**\n     * Get data indexes\n     * @param {HTMLElement} elTooltip tooltip element\n     * @returns {{groupIndex: number, index: number}} indexes\n     * @private\n     */\n    _getIndexesCustomAttribute: function(elTooltip) {\n        var groupIndex = elTooltip.getAttribute('data-groupIndex'),\n            index = elTooltip.getAttribute('data-index'),\n            indexes;\n        if (groupIndex &amp;&amp; index) {\n            indexes = {\n                groupIndex: parseInt(groupIndex, 10),\n                index: parseInt(index, 10)\n            };\n        }\n        return indexes;\n    },\n\n    /**\n     * Set showed custom attribute.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @param {boolean} status whether showed or not\n     * @private\n     */\n    _setShowedCustomAttribute: function(elTooltip, status) {\n        elTooltip.setAttribute('data-showed', status);\n    },\n\n    /**\n     * Whether showed tooltip or not.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @returns {boolean} whether showed tooltip or not\n     * @private\n     */\n    _isShowedTooltip: function(elTooltip) {\n        return elTooltip.getAttribute('data-showed') === 'true';\n    },\n\n    /**\n     * On mouseover event handler for tooltip area\n     * @param {MouseEvent} e mouse event\n     */\n    onMouseover: function(e) {\n        var elTarget = e.target || e.srcElement,\n            indexes;\n\n        if (!dom.hasClass(elTarget, chartConst.TOOLTIP_PREFIX)) {\n            elTarget = dom.findParentByClass(elTarget, chartConst.TOOLTIP_PREFIX);\n        }\n\n\n        if (elTarget.id !== this._getTooltipId()) {\n            return;\n        }\n\n        indexes = this._getIndexesCustomAttribute(elTarget);\n\n        this._setShowedCustomAttribute(elTarget, true);\n\n        this._fireShowAnimation(indexes);\n    },\n\n    /**\n     * On mouseout event handler for tooltip area\n     * @param {MouseEvent} e mouse event\n     */\n    onMouseout: function(e) {\n        var elTarget = e.target || e.srcElement;\n\n\n        if (!dom.hasClass(elTarget, chartConst.TOOLTIP_PREFIX)) {\n            elTarget = dom.findParentByClass(elTarget, chartConst.TOOLTIP_PREFIX);\n        }\n\n        if (elTarget.id !== this._getTooltipId()) {\n            return;\n        }\n\n        this.hideTooltip(elTarget);\n    },\n\n    /**\n     * To calculate tooltip position abount pie chart.\n     * @param {object} params parameters\n     *      @param {{left: number, top: number}} params.bound bound\n     *      @param {{clientX: number, clientY: number}} params.eventPosition mouse position\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _calculateTooltipPositionAboutPieChart: function(params) {\n        params.bound.left = params.eventPosition.clientX - this.seriesPosition.left;\n        params.bound.top = params.eventPosition.clientY - this.seriesPosition.top;\n        return this._calculateTooltipPositionAboutNotBarChart(params);\n    },\n\n    /**\n     * To calculate tooltip position about not bar chart.\n     * @param {object} params parameters\n     *      @param {{bound: object}} params.data graph information\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.positionOption position option (ex: 'left top')\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _calculateTooltipPositionAboutNotBarChart: function(params) {\n        var bound = params.bound,\n            addPosition = params.addPosition,\n            minusWidth = params.dimension.width - (bound.width || 0),\n            lineGap = bound.width ? 0 : chartConst.TOOLTIP_GAP,\n            positionOption = params.positionOption || '',\n            tooltipHeight = params.dimension.height,\n            result = {};\n        result.left = bound.left + addPosition.left;\n        result.top = bound.top - tooltipHeight + addPosition.top;\n\n        if (positionOption.indexOf('left') > -1) {\n            result.left -= minusWidth + lineGap;\n        } else if (positionOption.indexOf('center') > -1) {\n            result.left -= minusWidth / 2;\n        } else {\n            result.left += lineGap;\n        }\n\n        if (positionOption.indexOf('bottom') > -1) {\n            result.top += tooltipHeight + lineGap;\n        } else if (positionOption.indexOf('middle') > -1) {\n            result.top += tooltipHeight / 2;\n        } else {\n            result.top -= chartConst.TOOLTIP_GAP;\n        }\n\n        return result;\n    },\n\n    /**\n     * To calculate tooltip position about bar chart.\n     * @param {object} params parameters\n     *      @param {{bound: object}} params.data graph information\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.positionOption position option (ex: 'left top')\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _calculateTooltipPositionAboutBarChart: function(params) {\n        var bound = params.bound,\n            addPosition = params.addPosition,\n            minusHeight = params.dimension.height - (bound.height || 0),\n            positionOption = params.positionOption || '',\n            tooltipWidth = params.dimension.width,\n            result = {};\n\n        result.left = bound.left + bound.width + addPosition.left;\n        result.top = bound.top + addPosition.top;\n\n        // TODO : positionOptions을 객체로 만들어서 검사하도록 변경하기 ex) positionOption.left = true\n        if (positionOption.indexOf('left') > -1) {\n            result.left -= tooltipWidth;\n        } else if (positionOption.indexOf('center') > -1) {\n            result.left -= tooltipWidth / 2;\n        } else {\n            result.left += chartConst.TOOLTIP_GAP;\n        }\n\n        if (positionOption.indexOf('top') > -1) {\n            result.top -= minusHeight;\n        } else if (positionOption.indexOf('middle') > -1) {\n            result.top -= minusHeight / 2;\n        }\n\n        return result;\n    },\n\n    /**\n     * Calculate tooltip position.\n     * @param {object} params parameters\n     *      @param {{left: number, top: number, width: number, height: number}} params.bound graph bound\n     *      @param {string} params.chartType chart type\n     *      @param {boolean} params.allowNegativeTooltip whether allow negative tooltip or not\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.positionOption position option (ex: 'left top')\n     * @returns {{top: number, left: number}} position\n     * @private\n     */\n    _calculateTooltipPosition: function(params) {\n        var result = {},\n            sizeType, positionType, addPadding;\n\n        if (params.eventPosition) {\n            return this._calculateTooltipPositionAboutPieChart(params);\n        }\n\n        if (params.chartType === chartConst.CHART_TYPE_BAR) {\n            result = this._calculateTooltipPositionAboutBarChart(params);\n            sizeType = 'width';\n            positionType = 'left';\n            addPadding = 1;\n        } else {\n            result = this._calculateTooltipPositionAboutNotBarChart(params);\n            sizeType = 'height';\n            positionType = 'top';\n            addPadding = -1;\n        }\n\n        if (params.allowNegativeTooltip) {\n            result = this._moveToSymmetry(result, {\n                bound: params.bound,\n                indexes: params.indexes,\n                dimension: params.dimension,\n                sizeType: sizeType,\n                positionType: positionType,\n                addPadding: addPadding\n            });\n        }\n        return result;\n    },\n\n    /**\n     * Get value by indexes.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @returns {(string | number)} value\n     * @private\n     */\n    _getValueByIndexes: function(indexes) {\n        return this.values[indexes.groupIndex][indexes.index];\n    },\n\n    /**\n     * Move to symmetry.\n     * @param {{left: number, top: number}} position tooltip position\n     * @param {object} params parameters\n     *      @param {{left: number, top: number, width: number, height: number}} params.bound graph bound\n     *      @param {string} params.id tooltip id\n     *      @param {{width: number, height: number}} params.dimension tooltip dimension\n     *      @param {string} params.sizeType size type (width or height)\n     *      @param {string} params.positionType position type (left or top)\n     *      @param {number} params.addPadding add padding\n     * @returns {{left: number, top: number}} moved position\n     * @private\n     */\n    _moveToSymmetry: function(position, params) {\n        var bound = params.bound,\n            sizeType = params.sizeType,\n            positionType = params.positionType,\n            value = this._getValueByIndexes(params.indexes),\n            center;\n\n        if (value &lt; 0) {\n            center = bound[positionType] + (bound[sizeType] / 2) + (params.addPadding || 0);\n            position[positionType] = position[positionType] - (position[positionType] - center) * 2 - params.dimension[sizeType];\n        }\n\n        return position;\n    },\n\n    /**\n     * Get tooltip id.\n     * @returns {string} tooltip id\n     * @private\n     */\n    _getTooltipId: function() {\n        if (!this.tooltipId) {\n            this.tooltipId = chartConst.TOOLTIP_ID_PREFIX + '-' + (new Date()).getTime();\n        }\n        return this.tooltipId;\n    },\n\n    /**\n     * To make tooltip html.\n     * @param {{groupIndex: number, index: number}} indexes indexes\n     * @returns {string} tooltip html\n     * @private\n     */\n    _makeTooltipHtml: function(indexes) {\n        var data = this.data[indexes.groupIndex][indexes.index];\n        data.suffix = this.suffix;\n        return this.tplTooltip(data);\n    },\n\n    _isChangedIndexes: function(prevIndexes, indexes) {\n        return !!prevIndexes &amp;&amp; (prevIndexes.groupIndex !== indexes.groupIndex || prevIndexes.index !== indexes.index);\n    },\n\n    /**\n     * Show tooltip.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @param {{indexes: {groupIndex: number, index: number}, bound: object}} params tooltip data\n     * @param {{left: number, top: number}} prevPosition prev position\n     */\n    showTooltip: function(elTooltip, params, prevPosition) {\n        var indexes = params.indexes,\n            curIndexes = this._getIndexesCustomAttribute(elTooltip),\n            position;\n\n        if (elTooltip.id === this._getTooltipId() &amp;&amp; this._isChangedIndexes(curIndexes, indexes)) {\n            this._fireHideAnimation(curIndexes);\n        }\n\n        elTooltip.id = this._getTooltipId();\n        elTooltip.innerHTML = this._makeTooltipHtml(indexes);\n\n        this._setIndexesCustomAttribute(elTooltip, indexes);\n        this._setShowedCustomAttribute(elTooltip, true);\n\n        dom.addClass(elTooltip, 'show');\n\n        position = this._calculateTooltipPosition(tui.util.extend({\n            dimension: this.getTooltipDimension(elTooltip),\n            addPosition: tui.util.extend({\n                left: 0,\n                top: 0\n            }, this.options.addPosition),\n            positionOption: this.options.position || '',\n            eventPosition: params.eventPosition\n        }, params));\n\n        this.moveToPosition(elTooltip, position, prevPosition);\n        this._fireShowAnimation(indexes);\n    },\n\n    /**\n     * Hide tooltip.\n     * @param {HTMLElement} elTooltip tooltip element\n     * @param {function} callback callback\n     */\n    hideTooltip: function(elTooltip) {\n        var that = this,\n            indexes = this._getIndexesCustomAttribute(elTooltip);\n        this._setShowedCustomAttribute(elTooltip, false);\n        this._fireHideAnimation(indexes);\n\n        if (this._isChangedIndexes(this.prevIndexes, indexes)) {\n            delete this.prevIndexes;\n        }\n\n        setTimeout(function() {\n            if (that._isShowedTooltip(elTooltip)) {\n                return;\n            }\n            that.hideAnimation(elTooltip);\n\n            that = null;\n            indexes = null;\n        }, chartConst.HIDE_DELAY);\n    },\n\n    /**\n     * Attach event\n     * @param {HTMLElement} el target element\n     */\n    attachEvent: function(el) {\n        event.bindEvent('mouseover', el, tui.util.bind(this.onMouseover, this));\n        event.bindEvent('mouseout', el, tui.util.bind(this.onMouseout, this));\n    }\n});\n\ntui.util.CustomEvents.mixin(Tooltip);\n\nmodule.exports = Tooltip;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"