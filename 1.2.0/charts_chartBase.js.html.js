ne.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_chartBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview ChartBase\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const'),\n    dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil'),\n    dataConverter = require('../helpers/dataConverter'),\n    boundsMaker = require('../helpers/boundsMaker'),\n    GroupedEventHandleLayer = require('../eventHandleLayers/groupedEventHandleLayer');\n\nvar ChartBase = tui.util.defineClass(/** @lends ChartBase.prototype */ {\n    /**\n     * Chart base.\n     * @constructs ChartBase\n     * @param {object} params parameters\n     *      @param {object} params.bounds chart bounds\n     *      @param {object} params.theme chart theme\n     *      @param {{yAxis: obejct, xAxis: object}} axesData axes data\n     *      @param {object} params.options chart options\n     *      @param {boolean} param.isVertical whether vertical or not\n     *      @param {object} params.initedData initialized data from combo chart\n     */\n    init: function(params) {\n        this.chartId = params.initedData &amp;&amp; params.initedData.chartId || chartConst.CHAR_ID_PREFIX + '-' + (new Date()).getTime();\n        this.isSubChart = !!params.initedData;\n        this.components = [];\n        this.componentMap = {};\n        this.bounds = params.bounds;\n        this.theme = params.theme;\n        this.options = params.options;\n        this.isSubChart = !!params.initedData;\n        this.hasAxes = !!params.axesData;\n        this.isVertical = !!params.isVertical;\n        this.isGroupedTooltip = params.options.tooltip &amp;&amp; params.options.tooltip.grouped;\n\n        this._addGroupedEventHandleLayer(params.axesData, params.options.chartType);\n    },\n\n    /**\n     * Add grouped event handler layer.\n     * @param {{yAxis: obejct, xAxis: object}} axesData axes data\n     * @param {string} chartType chart type\n     * @param {boolean} isVertical whether vertical or not\n     * @private\n     */\n    _addGroupedEventHandleLayer: function(axesData, chartType) {\n        var tickCount;\n\n        if (!this.hasAxes || !this.isGroupedTooltip || this.isSubChart) {\n            return;\n        }\n\n        if (this.isVertical) {\n            tickCount = axesData.xAxis ? axesData.xAxis.tickCount : -1;\n        } else {\n            tickCount = axesData.yAxis ? axesData.yAxis.tickCount : -1;\n        }\n\n        this.addComponent('eventHandleLayer', GroupedEventHandleLayer, {\n            tickCount: tickCount,\n            chartType: chartType,\n            isVertical: this.isVertical\n        });\n    },\n\n    /**\n     * To make baes data.\n     * @param {array | object} userData user data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     * @param {object} params add params\n     * @returns {{convertedData: object, bounds: object}} base data\n     */\n    makeBaseData: function(userData, theme, options, params) {\n        var seriesChartTypes = params ? params.seriesChartTypes : [],\n            convertedData = dataConverter.convert(userData, options.chart, options.chartType, seriesChartTypes),\n            bounds = boundsMaker.make(tui.util.extend({\n                chartType: options.chartType,\n                convertedData: convertedData,\n                theme: theme,\n                options: options\n            }, params));\n\n        return {\n            convertedData: convertedData,\n            bounds: bounds\n        };\n    },\n\n    /**\n     * Add component.\n     * @param {string} name component name\n     * @param {function} Component component function\n     * @param {object} params parameters\n     */\n    addComponent: function(name, Component, params) {\n        var bound = this.bounds[name],\n            theme = this.theme[name],\n            options = this.options[name],\n            index = params.index || 0,\n            commonParams = {},\n            component;\n\n        commonParams.bound = tui.util.isArray(bound) ? bound[index] : bound;\n        commonParams.theme = tui.util.isArray(theme) ? theme[index] : theme;\n        commonParams.options = tui.util.isArray(options) ? options[index] : options || {};\n\n        params = tui.util.extend(commonParams, params);\n        component = new Component(params);\n        this.components.push(component);\n        this.componentMap[name] = component;\n    },\n\n    /**\n     * Attach custom evnet.\n     * @private\n     */\n    _attachCustomEvent: function() {\n        if (this.hasAxes &amp;&amp; this.isGroupedTooltip &amp;&amp; !this.isSubChart) {\n            this._attachCoordinateEvent();\n        } else if (!this.hasAxes || !this.isGroupedTooltip) {\n            this._attachTooltipEvent();\n        }\n    },\n\n    /**\n     * Render chart.\n     * @param {HTMLElement} el chart element\n     * @param {object} paper object for graph drawing\n     * @returns {HTMLElement} chart element\n     */\n    render: function(el, paper) {\n        if (!el) {\n            el = dom.create('DIV', this.className);\n\n            dom.addClass(el, 'tui-chart');\n            this._renderTitle(el);\n            renderUtil.renderDimension(el, this.bounds.chart.dimension);\n            renderUtil.renderBackground(el, this.theme.chart.background);\n            renderUtil.renderFontFamily(el, this.theme.chart.fontFamily);\n        }\n\n        this._renderComponents(el, this.components, paper);\n        this._attachCustomEvent();\n\n        return el;\n    },\n\n    /**\n     * Render title.\n     * @param {HTMLElement} el target element\n     * @private\n     */\n    _renderTitle: function(el) {\n        var chartOptions = this.options.chart || {},\n            elTitle = renderUtil.renderTitle(chartOptions.title, this.theme.title, 'tui-chart-title');\n        dom.append(el, elTitle);\n    },\n\n    /**\n     * Render components.\n     * @param {HTMLElement} container container element\n     * @param {array.&lt;object>} components components\n     * @param {object} paper object for graph drawing\n     * @private\n     */\n    _renderComponents: function(container, components, paper) {\n        var elements = tui.util.map(components, function(component) {\n            return component.render(paper);\n        });\n        dom.append(container, elements);\n    },\n\n    /**\n     * Get paper.\n     * @returns {object} paper\n     */\n    getPaper: function() {\n        var series = this.componentMap.series,\n            paper;\n\n        if (series) {\n            paper = series.getPaper();\n        }\n\n        return paper;\n    },\n\n    /**\n     * Attach custom event\n     * @private\n     */\n    _attachTooltipEvent: function() {\n        var tooltip = this.componentMap.tooltip,\n            series = this.componentMap.series;\n        if (!tooltip || !series) {\n            return;\n        }\n        series.on('showTooltip', tooltip.onShow, tooltip);\n        series.on('hideTooltip', tooltip.onHide, tooltip);\n\n        if (!series.onShowAnimation) {\n            return;\n        }\n\n        tooltip.on('showAnimation', series.onShowAnimation, series);\n        tooltip.on('hideAnimation', series.onHideAnimation, series);\n    },\n\n    /**\n     * Attach coordinate event.\n     * @private\n     */\n    _attachCoordinateEvent: function() {\n        var eventHandleLayer = this.componentMap.eventHandleLayer,\n            tooltip = this.componentMap.tooltip,\n            series = this.componentMap.series;\n        eventHandleLayer.on('showGroupTooltip', tooltip.onShow, tooltip);\n        eventHandleLayer.on('hideGroupTooltip', tooltip.onHide, tooltip);\n\n        if (series) {\n            tooltip.on('showGroupAnimation', series.onShowGroupAnimation, series);\n            tooltip.on('hideGroupAnimation', series.onHideGroupAnimation, series);\n        }\n    },\n\n    /**\n     * Animate chart.\n     */\n    animateChart: function() {\n        tui.util.forEachArray(this.components, function(component) {\n            if (component.animateComponent) {\n                component.animateComponent();\n            }\n        });\n    }\n});\n\nmodule.exports = ChartBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"