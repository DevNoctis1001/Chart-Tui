ne.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_comboChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Combo chart.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar calculator = require('../helpers/calculator'),\n    ChartBase = require('./chartBase'),\n    axisDataMaker = require('../helpers/axisDataMaker'),\n    defaultTheme = require('../themes/defaultTheme'),\n    GroupTooltip = require('../tooltips/groupTooltip'),\n    ColumnChart = require('./columnChart'),\n    LineChart = require('./lineChart');\n\nvar ComboChart = tui.util.defineClass(ChartBase, /** @lends ComboChart.prototype */ {\n    /**\n     * Combo chart.\n     * @constructs ComboChart\n     * @extends ChartBase\n     * @param {array.&lt;array>} userData chart data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(userData, theme, options) {\n        var seriesChartTypes = tui.util.keys(userData.series).sort(),\n            optionChartTypes = this._getYAxisOptionChartTypes(seriesChartTypes, options.yAxis),\n            chartTypes = optionChartTypes.length ? optionChartTypes : seriesChartTypes,\n            baseData = this.makeBaseData(userData, theme, options, {\n                isVertical: true,\n                hasAxes: true,\n                seriesChartTypes: seriesChartTypes,\n                optionChartTypes: optionChartTypes\n            }),\n            convertedData = baseData.convertedData,\n            bounds = baseData.bounds,\n            optionsMap = this._makeOptionsMap(chartTypes, options),\n            themeMap = this._makeThemeMap(seriesChartTypes, theme, convertedData.legendLabels),\n            yAxisParams = {\n                convertedData: convertedData,\n                seriesDimension: bounds.series.dimension,\n                chartTypes: chartTypes,\n                isOneYAxis: !optionChartTypes.length,\n                options: options\n            },\n            baseAxesData = {};\n\n        baseAxesData.yAxis = this._makeYAxisData(tui.util.extend({\n            index: 0\n        }, yAxisParams));\n\n        baseAxesData.xAxis = axisDataMaker.makeLabelAxisData({\n            labels: convertedData.labels\n        });\n\n        this.className = 'tui-combo-chart';\n\n        ChartBase.call(this, {\n            bounds: bounds,\n            axesData: baseAxesData,\n            theme: theme,\n            options: options,\n            isVertical: true\n        });\n\n        this.addComponent('tooltip', GroupTooltip, {\n            labels: convertedData.labels,\n            joinFormattedValues: convertedData.joinFormattedValues,\n            joinLegendLabels: convertedData.joinLegendLabels,\n            chartId: this.chartId\n        });\n\n        this._installCharts({\n            userData: userData,\n            baseData: baseData,\n            baseAxesData: baseAxesData,\n            axesData: this._makeAxesData(baseAxesData, yAxisParams, convertedData.formatFunctions),\n            seriesChartTypes: seriesChartTypes,\n            optionsMap: optionsMap,\n            themeMap: themeMap\n        });\n    },\n\n    /**\n     * Get y axis option chart types.\n     * @param {array.&lt;string>} chartTypes chart types\n     * @param {object} yAxisOptions y axis options\n     * @returns {array.&lt;string>} chart types\n     * @private\n     */\n    _getYAxisOptionChartTypes: function(chartTypes, yAxisOptions) {\n        var resultChartTypes = chartTypes.slice(),\n            isReverse = false,\n            optionChartTypes;\n\n        yAxisOptions = yAxisOptions ? [].concat(yAxisOptions) : [];\n\n        if (yAxisOptions.length === 1 &amp;&amp; !yAxisOptions[0].chartType) {\n            resultChartTypes = [];\n        } else if (yAxisOptions.length) {\n            optionChartTypes = tui.util.map(yAxisOptions, function(option) {\n                return option.chartType;\n            });\n\n            tui.util.forEachArray(optionChartTypes, function(chartType, index) {\n                isReverse = isReverse || (chartType &amp;&amp; resultChartTypes[index] !== chartType || false);\n            });\n\n            if (isReverse) {\n                resultChartTypes.reverse();\n            }\n        }\n\n        return resultChartTypes;\n    },\n\n    /**\n     * To make y axis data.\n     * @param {object} params parameters\n     *      @param {number} params.index chart index\n     *      @param {object} params.convertedData converted data\n     *      @param {{width: number, height: number}} params.seriesDimension series dimension\n     *      @param {array.&lt;string>} chartTypes chart type\n     *      @param {boolean} isOneYAxis whether one series or not\n     *      @param {object} options chart options\n     *      @param {object} addParams add params\n     * @returns {object} y axis data\n     * @private\n     */\n    _makeYAxisData: function(params) {\n        var convertedData = params.convertedData,\n            index = params.index,\n            chartType = params.chartTypes[index],\n            options = params.options,\n            yAxisValues, yAxisOptions, seriesOption;\n\n        if (params.isOneYAxis) {\n            yAxisValues = convertedData.joinValues;\n            yAxisOptions = [options.yAxis];\n        } else {\n            yAxisValues = convertedData.values[chartType];\n            yAxisOptions = options.yAxis || [];\n        }\n\n        seriesOption = options.series &amp;&amp; options.series[chartType] || options.series;\n\n        return axisDataMaker.makeValueAxisData(tui.util.extend({\n            values: yAxisValues,\n            stacked: seriesOption &amp;&amp; seriesOption.stacked || '',\n            options: yAxisOptions[index],\n            chartType: chartType,\n            seriesDimension: params.seriesDimension,\n            formatFunctions: convertedData.formatFunctions,\n            isVertical: true\n        }, params.addParams));\n    },\n\n    /**\n     * To make axes data.\n     * @param {{yAxis: object, xAxis: object}} baseAxesData base axes data\n     * @param {object} yAxisParams y axis params\n     * @returns {object} axes data\n     * @private\n     */\n    _makeAxesData: function(baseAxesData, yAxisParams, formatFunctions) {\n        var yAxisData = baseAxesData.yAxis,\n            chartTypes = yAxisParams.chartTypes,\n            axesData = {},\n            yrAxisData;\n        if (!yAxisParams.isOneYAxis) {\n            yrAxisData = this._makeYAxisData(tui.util.extend({\n                index: 1,\n                addParams: {\n                    isPositionRight: true\n                }\n            }, yAxisParams));\n            if (yAxisData.tickCount &lt; yrAxisData.tickCount) {\n                this._increaseYAxisTickCount(yrAxisData.tickCount - yAxisData.tickCount, yAxisData, formatFunctions);\n            } else if (yAxisData.tickCount > yrAxisData.tickCount) {\n                this._increaseYAxisTickCount(yAxisData.tickCount - yrAxisData.tickCount, yrAxisData, formatFunctions);\n            }\n        }\n\n        axesData[chartTypes[0]] = baseAxesData;\n        axesData[chartTypes[1]] = {\n            yAxis: yrAxisData || yAxisData\n        };\n\n        return axesData;\n    },\n\n    /**\n     * To make order info abound chart type.\n     * @param {array.&lt;string>} chartTypes chart types\n     * @returns {object} chart order info\n     * @private\n     */\n    _makeChartTypeOrderInfo: function(chartTypes) {\n        var result = {};\n        tui.util.forEachArray(chartTypes, function(chartType, index) {\n            result[chartType] = index;\n        });\n        return result;\n    },\n\n    /**\n     * To make options map\n     * @param {object} chartTypes chart types\n     * @param {object} options chart options\n     * @param {object} orderInfo chart order\n     * @returns {object} options map\n     * @private\n     */\n    _makeOptionsMap: function(chartTypes, options) {\n        var orderInfo = this._makeChartTypeOrderInfo(chartTypes),\n            result = {};\n        tui.util.forEachArray(chartTypes, function(chartType) {\n            var chartOptions = JSON.parse(JSON.stringify(options)),\n                index = orderInfo[chartType];\n\n            if (chartOptions.yAxis &amp;&amp; chartOptions.yAxis[index]) {\n                chartOptions.yAxis = chartOptions.yAxis[index];\n            }\n\n            if (chartOptions.series &amp;&amp; chartOptions.series[chartType]) {\n                chartOptions.series = chartOptions.series[chartType];\n            }\n\n            if (chartOptions.tooltip &amp;&amp; chartOptions.tooltip[chartType]) {\n                chartOptions.tooltip = chartOptions.tooltip[chartType];\n            }\n            chartOptions.parentChartType = chartOptions.chartType;\n            chartOptions.chartType = chartType;\n            result[chartType] = chartOptions;\n        });\n        return result;\n    },\n\n    /**\n     * To make theme map\n     * @param {object} chartTypes chart types\n     * @param {object} theme chart theme\n     * @param {object} legendLabels legend labels\n     * @returns {object} theme map\n     * @private\n     */\n    _makeThemeMap: function(chartTypes, theme, legendLabels) {\n        var result = {},\n            colorCount = 0;\n        tui.util.forEachArray(chartTypes, function(chartType) {\n            var chartTheme = JSON.parse(JSON.stringify(theme)),\n                removedColors;\n\n            if (chartTheme.yAxis[chartType]) {\n                chartTheme.yAxis = chartTheme.yAxis[chartType];\n            } else if (!chartTheme.yAxis.title) {\n                chartTheme.yAxis = JSON.parse(JSON.stringify(defaultTheme.yAxis));\n            }\n\n            if (chartTheme.series[chartType]) {\n                chartTheme.series = chartTheme.series[chartType];\n            } else if (!chartTheme.series.colors) {\n                chartTheme.series = JSON.parse(JSON.stringify(defaultTheme.series));\n                chartTheme.series.label.fontFamily = chartTheme.chart.fontFamily;\n            } else {\n                removedColors = chartTheme.series.colors.splice(0, colorCount);\n                chartTheme.series.colors = chartTheme.series.colors.concat(removedColors);\n                colorCount += legendLabels[chartType].length;\n            }\n            result[chartType] = chartTheme;\n        });\n        return result;\n    },\n\n    /**\n     * Increase y axis tick count.\n     * @param {number} increaseTickCount increase tick count\n     * @param {object} toData to tick info\n     * @param {array.&lt;function>} formatFunctions format functions\n     * @private\n     */\n    _increaseYAxisTickCount: function(increaseTickCount, toData, formatFunctions) {\n        toData.scale.max += toData.step * increaseTickCount;\n        toData.labels = axisDataMaker.formatLabels(calculator.makeLabelsFromScale(toData.scale, toData.step), formatFunctions);\n        toData.tickCount += increaseTickCount;\n        toData.validTickCount += increaseTickCount;\n    },\n\n    /**\n     * Install charts.\n     * @param {object} params parameters\n     *      @param {object} params.userData user data\n     *      @param {object} params.baseData chart base data\n     *      @param {object} params.theme chart theme\n     *      @param {object} params.options chart options\n     *      @param {{yAxis: object, xAxis: object}} params.baseAxesData base axes data\n     *      @param {object} params.axesData axes data\n     *      @param {array.&lt;string>} params.seriesChartTypes series chart types\n     *      @param {array.&lt;string>} params.chartTypes chart types\n     * @private\n     */\n    _installCharts: function(params) {\n        var chartClasses = {\n                column: ColumnChart,\n                line: LineChart\n            },\n            baseData = params.baseData,\n            convertedData = baseData.convertedData,\n            plotData = {\n                vTickCount: params.baseAxesData.yAxis.validTickCount,\n                hTickCount: params.baseAxesData.xAxis.validTickCount\n            },\n            joinLegendLabels = convertedData.joinLegendLabels;\n\n        this.charts = tui.util.map(params.seriesChartTypes, function(chartType) {\n            var legendLabels = convertedData.legendLabels[chartType],\n                axes = params.axesData[chartType],\n                options = params.optionsMap[chartType],\n                theme = params.themeMap[chartType],\n                bounds = JSON.parse(JSON.stringify(baseData.bounds)),\n                Chart = chartClasses[chartType],\n                initedData, chart;\n\n            if (axes &amp;&amp; axes.yAxis.isPositionRight) {\n                bounds.yAxis = bounds.yrAxis;\n            }\n\n            initedData = {\n                convertedData: {\n                    values: convertedData.values[chartType],\n                    labels: convertedData.labels,\n                    formatFunctions: convertedData.formatFunctions,\n                    formattedValues: convertedData.formattedValues[chartType],\n                    legendLabels: legendLabels,\n                    joinLegendLabels: joinLegendLabels,\n                    plotData: plotData\n                },\n                bounds: bounds,\n                axes: axes,\n                chartId: this.chartId\n            };\n\n            chart = new Chart(params.userData, theme, options, initedData);\n            plotData = null;\n            joinLegendLabels = null;\n            return chart;\n        }, this);\n    },\n\n    /**\n     * Render combo chart.\n     * @returns {HTMLElement} combo chart element\n     */\n    render: function() {\n        var el = ChartBase.prototype.render.call(this);\n        var paper;\n        tui.util.forEachArray(this.charts, function(chart, index) {\n            setTimeout(function() {\n                chart.render(el, paper);\n                if (!paper) {\n                    paper = chart.getPaper();\n                }\n                chart.animateChart();\n            }, 1 * index);\n        });\n        return el;\n    }\n});\n\nmodule.exports = ComboChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"