tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_bubbleChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Bubble chart.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ChartBase = require('./chartBase');\nvar chartConst = require('../const');\nvar Series = require('../series/bubbleChartSeries');\nvar CircleLegend = require('../legends/circleLegend');\nvar axisTypeMixer = require('./axisTypeMixer');\nvar axisDataMaker = require('../helpers/axisDataMaker');\nvar predicate = require('../helpers/predicate');\nvar renderUtil = require('../helpers/renderUtil');\nvar SimpleCustomEvent = require('../customEvents/simpleCustomEvent');\n\nvar BubbleChart = tui.util.defineClass(ChartBase, /** @lends BubbleChart.prototype */ {\n    /**\n     * className\n     * @type {string}\n     */\n    className: 'tui-bubble-chart',\n    /**\n     * Bubble chart.\n     * @constructs BubbleChart\n     * @extends ChartBase\n     * @mixes axisTypeMixer\n     * @param {Array.&lt;Array>} rawData raw data\n     * @param {object} theme chart theme\n     * @param {object} options chart options\n     */\n    init: function(rawData, theme, options) {\n        options.tooltip = options.tooltip || {};\n\n        this.axisScaleMakerMap = null;\n\n        if (!options.tooltip.align) {\n            options.tooltip.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;\n        }\n\n        ChartBase.call(this, {\n            rawData: rawData,\n            theme: theme,\n            options: options,\n            hasAxes: true\n        });\n\n        this._addComponents(options.chartType);\n    },\n\n    /**\n     * Pick limit from options\n     * @param {{min: number, max: number, title: string}} options - axis options\n     * @returns {{min: number, max: number}}\n     * @private\n     */\n    _pickLimitFromOptions: function(options) {\n        options = options || {};\n\n        return {\n            min: options.min,\n            max: options.max\n        };\n    },\n\n    /**\n     * Create AxisScaleMaker for bubble chart.\n     * @param {{min: number, max: number, title: string}} options - axis options\n     * @param {string} areaType - type of area like xAxis, yAxis\n     * @param {string} valueType - type of value like x, y, r\n     * @returns {AxisScaleMaker}\n     * @override\n     * @private\n     */\n    _createAxisScaleMaker: function(options, areaType, valueType) {\n        var limit = this._pickLimitFromOptions(options);\n        var additionalParams = {\n            areaType: areaType,\n            valueType: valueType\n        };\n\n        return ChartBase.prototype._createAxisScaleMaker.call(this, limit, additionalParams, this.chartType);\n    },\n\n    /**\n     * Make map for AxisScaleMaker of axes(xAxis, yAxis).\n     * @returns {Object.&lt;string, AxisScaleMaker>}\n     * @private\n     */\n    _makeAxisScaleMakerMap: function() {\n        var hasCategories = this.dataProcessor.hasCategories();\n        var seriesDataModel = this.dataProcessor.getSeriesDataModel(this.chartType);\n        var isXCountGreaterThanYCount = seriesDataModel.isXCountGreaterThanYCount();\n        var options = this.options;\n        var scaleMakerMap = {};\n\n        if (hasCategories) {\n            if (isXCountGreaterThanYCount) {\n                scaleMakerMap.xAxis = this._createAxisScaleMaker(options.xAxis, 'xAxis', 'x');\n            } else {\n                scaleMakerMap.yAxis = this._createAxisScaleMaker(options.yAxis, 'yAxis', 'y');\n            }\n        } else {\n            scaleMakerMap.xAxis = this._createAxisScaleMaker(options.xAxis, 'xAxis', 'x');\n            scaleMakerMap.yAxis = this._createAxisScaleMaker(options.yAxis, 'yAxis', 'y');\n        }\n\n        return scaleMakerMap;\n    },\n\n    /**\n     * Get map for AxisScaleMaker of axes(xAxis, yAxis).\n     * @returns {Object.&lt;string, AxisScaleMaker>}\n     * @private\n     */\n    _getAxisScaleMakerMap: function() {\n        if (!this.axisScaleMakerMap) {\n            this.axisScaleMakerMap = this._makeAxisScaleMakerMap();\n        }\n\n        return this.axisScaleMakerMap;\n    },\n\n    /**\n     * Make axis data.\n     * @param {AxisScaleMaker} axisScaleMaker - AxisScaleMaker\n     * @param {boolean} [isVertical] - whether vertical or not\n     * @returns {object}\n     * @private\n     */\n    _makeAxisData: function(axisScaleMaker, isVertical) {\n        var axisData;\n\n        if (axisScaleMaker) {\n            axisData = axisDataMaker.makeValueAxisData({\n                axisScaleMaker: axisScaleMaker,\n                isVertical: !!isVertical\n            });\n        } else {\n            axisData = axisDataMaker.makeLabelAxisData({\n                labels: this.dataProcessor.getCategories(),\n                isVertical: !!isVertical\n            });\n        }\n\n        return axisData;\n    },\n\n    /**\n     * Make axes data\n     * @returns {object} axes data\n     * @private\n     */\n    _makeAxesData: function() {\n        var axisScaleMakerMap = this._getAxisScaleMakerMap();\n\n        return {\n            xAxis: this._makeAxisData(axisScaleMakerMap.xAxis),\n            yAxis: this._makeAxisData(axisScaleMakerMap.yAxis, true)\n        };\n    },\n\n    /**\n     * Add components\n     * @param {string} chartType chart type\n     * @private\n     */\n    _addComponents: function(chartType) {\n        this._addComponentsForAxisType({\n            axes: [\n                {\n                    name: 'yAxis'\n                },\n                {\n                    name: 'xAxis'\n                }\n            ],\n            chartType: chartType,\n            serieses: [\n                {\n                    name: 'bubbleSeries',\n                    SeriesClass: Series\n                }\n            ]\n        });\n\n        if (!tui.util.pick(this.options, 'circleLegend', 'hidden')) {\n            this.componentManager.register('circleLegend', CircleLegend, {\n                chartType: chartType,\n                baseFontFamily: this.theme.chart.fontFamily\n            });\n        }\n    },\n\n    /**\n     * Get width of max label of CircleLegend.\n     * @returns {number}\n     * @private\n     */\n    _getMaxCircleLegendLabelWidth: function() {\n        var maxLabel = this.dataProcessor.getFormattedMaxValue(this.chartType, 'circleLegend', 'r');\n        var maxLabelWidth = renderUtil.getRenderedLabelWidth(maxLabel, {\n            fontSize: chartConst.CIRCLE_LEGEND_LABEL_FONT_SIZE,\n            fontFamily: this.theme.chart.fontFamily\n        });\n\n        return maxLabelWidth;\n    },\n\n    /**\n     * Get width of circle legend area.\n     * @returns {number}\n     * @private\n     */\n    _getCircleLegendWidth: function() {\n        var maxRadius = this.boundsMaker.getMinimumPixelStepForAxis();\n        var circleWidth = (maxRadius * 2) + chartConst.CIRCLE_LEGEND_PADDING;\n        var maxLabelWidth = this._getMaxCircleLegendLabelWidth();\n\n        return Math.max(circleWidth, maxLabelWidth);\n    },\n\n    /**\n     * Update width of legend and series of boundsMaker.\n     * @param {number} seriesWidth - width of series area\n     * @param {number} legendWidth - width of legend area\n     * @private\n     */\n    _updateLegendAndSeriesWidth: function(seriesWidth, legendWidth) {\n        var circleLegendWidth = this._getCircleLegendWidth();\n        var legendAlignOption = tui.util.pick(this.options, 'legend', 'align');\n\n        if (!predicate.isHorizontalLegend(legendAlignOption)) {\n            this.boundsMaker.registerBaseDimension('legend', {\n                width: circleLegendWidth\n            });\n        }\n\n        this.boundsMaker.registerBaseDimension('series', {\n            width: seriesWidth - (circleLegendWidth - legendWidth)\n        });\n    },\n\n    /**\n     * Update axesData of boundsMaker.\n     * @private\n     */\n    _updateAxesDataOfBoundsMaker: function() {\n        var newAxesData;\n\n        this.axisScaleMakerMap = null;\n        newAxesData = this._makeAxesData();\n        this.boundsMaker.registerAxesData(newAxesData);\n    },\n\n    /**\n     * Whether changed max radius or not.\n     * @param {boolean} beforeMaxRadius - before max radius\n     * @returns {boolean}\n     */\n    isChangedMaxRadius: function(beforeMaxRadius) {\n        var afterMaxRadius = this.boundsMaker.getMinimumPixelStepForAxis();\n\n        return (beforeMaxRadius !== afterMaxRadius);\n    },\n\n    /**\n     * Update width of legend area by width of circle legend area.\n     * @private\n     */\n    _updateLegendWidthByCircleLegendWidth: function() {\n        var boundsMaker = this.boundsMaker;\n        var axesData = boundsMaker.getAxesData();\n        var circleLegendWidth = this._getCircleLegendWidth();\n        var legendWidth = boundsMaker.getDimension('calculationLegend').width;\n        var isXAxisLabel, beforeMaxRadius, seriesWidth;\n\n        if (legendWidth >= circleLegendWidth) {\n            return;\n        }\n\n        isXAxisLabel = axesData.xAxis.isLabel;\n        seriesWidth = boundsMaker.getDimension('series').width;\n        beforeMaxRadius = boundsMaker.getMinimumPixelStepForAxis();\n\n        this._updateLegendAndSeriesWidth(seriesWidth, legendWidth);\n\n        if (!isXAxisLabel) {\n            this._updateAxesDataOfBoundsMaker(isXAxisLabel);\n        }\n\n        if (this.isChangedMaxRadius(beforeMaxRadius)) {\n            this._updateLegendAndSeriesWidth(seriesWidth, legendWidth);\n\n            if (!isXAxisLabel) {\n                this._updateAxesDataOfBoundsMaker(isXAxisLabel);\n            }\n        }\n    },\n\n    /**\n     * Register dimension of circle legend.\n     * @private\n     */\n    _registerCircleLegendDimension: function() {\n        var circleLegendWidth = this._getCircleLegendWidth();\n\n        this.boundsMaker.registerBaseDimension('circleLegend', {\n            width: circleLegendWidth,\n            height: circleLegendWidth\n        });\n    },\n\n    /**\n     * Update dimensions.\n     * @param {{xAxis: object, yAxis: object}} axesData - data for rendering of axis area(x axis and y axis).\n     * @private\n     * @override\n     */\n    _updateDimensions: function() {\n        if (predicate.isHidden(this.options.circleLegend)) {\n            return;\n        }\n\n        this._updateLegendWidthByCircleLegendWidth();\n        this._registerCircleLegendDimension();\n    },\n\n    /**\n     * Rerender.\n     * @private\n     */\n    _rerender: function() {\n        this.axisScaleMakerMap = null;\n        ChartBase.prototype._rerender.apply(this, arguments);\n    }\n});\n\naxisTypeMixer.mixin(BubbleChart);\n\n/**\n * Add data ratios.\n * @private\n * @override\n */\nBubbleChart.prototype._addDataRatios = function() {\n    var scaleMakerMap = this._getAxisScaleMakerMap(),\n        limitMap = {};\n\n    if (scaleMakerMap.xAxis) {\n        limitMap.x = scaleMakerMap.xAxis.getLimit();\n    }\n\n    if (scaleMakerMap.yAxis) {\n        limitMap.y = scaleMakerMap.yAxis.getLimit();\n    }\n\n    this.dataProcessor.addDataRatiosForCoordinateType(limitMap);\n};\n\n/**\n * Add custom event component for normal tooltip.\n * @private\n */\nBubbleChart.prototype._attachCustomEvent = function() {\n    var componentManager = this.componentManager;\n    var customEvent = componentManager.get('customEvent');\n    var bubbleSeries = componentManager.get('bubbleSeries');\n    var tooltip = componentManager.get('tooltip');\n\n    axisTypeMixer._attachCustomEvent.call(this);\n\n    customEvent.on({\n        clickBubbleSeries: bubbleSeries.onClickSeries,\n        moveBubbleSeries: bubbleSeries.onMoveSeries\n    }, bubbleSeries);\n\n    bubbleSeries.on({\n        showTooltip: tooltip.onShow,\n        hideTooltip: tooltip.onHide,\n        showTooltipContainer: tooltip.onShowTooltipContainer,\n        hideTooltipContainer: tooltip.onHideTooltipContainer\n    }, tooltip);\n};\n\n/**\n * Add custom event component.\n * @private\n */\nBubbleChart.prototype._addCustomEventComponent = function() {\n    this.componentManager.register('customEvent', SimpleCustomEvent, {\n        chartType: this.chartType\n    });\n};\n\nmodule.exports = BubbleChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"