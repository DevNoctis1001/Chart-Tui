tui.util.defineNamespace("fedoc.content", {});
fedoc.content["legends_legend.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Legend component.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar LegendModel = require('./legendModel'),\n    LegendDimensionModel = require('./legendDimensionModel'),\n    chartConst = require('../const'),\n    dom = require('../helpers/domHandler'),\n    predicate = require('../helpers/predicate'),\n    eventListener = require('../helpers/eventListener'),\n    renderUtil = require('../helpers/renderUtil'),\n    legendTemplate = require('./../legends/legendTemplate');\n\nvar Legend = tui.util.defineClass(/** @lends Legend.prototype */ {\n    /**\n     * Legend component.\n     * @constructs Legend\n     * @param {object} params parameters\n     *      @param {object} params.theme axis theme\n     *      @param {?Array.&lt;string>} params.chartTypes chart types\n     *      @param {string} params.chart type\n     */\n    init: function(params) {\n        var legendData;\n\n        /**\n         * legend theme\n         * @type {Object}\n         */\n        this.theme = params.theme;\n\n        /**\n         * options\n         * @type {Object}\n         */\n        this.options = params.options || {};\n\n        /**\n         * chart types\n         * @type {?Array.&lt;string>}\n         */\n        this.chartTypes = params.chartTypes;\n\n        /**\n         * chart type\n         * @type {string}\n         */\n        this.chartType = params.chartType;\n\n        /**\n         * user event object\n         */\n        this.userEvent = params.userEvent;\n\n        /**\n         * Legend view className\n         */\n        this.className = 'tui-chart-legend-area';\n\n        /**\n         * checked indexes\n         * @type {Array}\n         */\n        this.checkedIndexes = [];\n\n        /**\n         * bounds maker\n         * @type {BoundsMaker}\n         */\n        this.boundsMaker = params.boundsMaker;\n\n        legendData = params.dataProcessor.getLegendData();\n        /**\n         * legend model\n         */\n        this.legendModel = new LegendModel({\n            theme: this.theme,\n            labels: params.dataProcessor.getLegendLabels(),\n            legendData: legendData,\n            chartTypes: this.chartTypes,\n            chartType: this.chartType\n        });\n\n        this.dimensionModel = new LegendDimensionModel({\n            legendLabels: tui.util.pluck(legendData, 'label'),\n            chartType: this.chartType,\n            options: this.options,\n            theme: this.theme\n        });\n    },\n\n    /**\n     * Register legend dimension.\n     */\n    registerDimension: function() {\n        var chartWidth = this.boundsMaker.getDimension('chart').width;\n        var legendDimension = this.dimensionModel.makeDimension(chartWidth);\n\n        this.boundsMaker.registerBaseDimension('legend', legendDimension);\n\n        if (!predicate.isHorizontalLegend(this.options.align) &amp;&amp; this.options.hidden !== true) {\n            this.boundsMaker.registerBaseDimension('calculationLegend', {\n                width: legendDimension.width\n            });\n        }\n    },\n\n    /**\n     * Render legend area.\n     * @param {HTMLElement} legendContainer legend container\n     * @param {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound lengend bound\n     * @param {Array.&lt;boolean>} checkedIndexes checked indexes\n     * @private\n     */\n    _renderLegendArea: function(legendContainer) {\n        legendContainer.innerHTML = this._makeLegendHtml(this.legendModel.getData());\n        renderUtil.renderPosition(legendContainer, this.boundsMaker.getPosition('legend'));\n        legendContainer.style.cssText += ';' + renderUtil.makeFontCssText(this.theme.label);\n    },\n\n    /**\n     * Render legend component.\n     * @returns {HTMLElement} legend element\n     */\n    render: function() {\n        var el = dom.create('DIV', this.className);\n\n        this.legendContainer = el;\n\n        if (predicate.isHorizontalLegend(this.options.align)) {\n            dom.addClass(el, 'horizontal');\n        }\n\n        this._renderLegendArea(el);\n        this._attachEvent(el);\n        return el;\n    },\n\n    /**\n     * Rerender.\n     */\n    rerender: function() {\n        this._renderLegendArea(this.legendContainer);\n    },\n\n    /**\n     * Resize legend component.\n     */\n    resize: function() {\n        this._renderLegendArea(this.legendContainer);\n    },\n\n    /**\n     * Make cssText of legend rect.\n     * @param {{\n     *      chartType: string,\n     *      theme: {color: string, borderColor: ?string, singleColor: ?string}\n     * }} legendDatum legend datum\n     * @param {number} baseMarginTop base margin-top\n     * @returns {string} cssText of legend rect\n     * @private\n     */\n    _makeLegendRectCssText: function(legendDatum, baseMarginTop) {\n        var theme = legendDatum.theme,\n            borderCssText = theme.borderColor ? renderUtil.concatStr(';border:1px solid ', theme.borderColor) : '',\n            rectMargin, marginTop;\n        if (legendDatum.chartType === 'line') {\n            marginTop = baseMarginTop + chartConst.LINE_MARGIN_TOP;\n        } else {\n            marginTop = baseMarginTop;\n        }\n\n        rectMargin = renderUtil.concatStr(';margin-top:', marginTop, 'px');\n\n        return renderUtil.concatStr('background-color:', theme.singleColor || theme.color, borderCssText, rectMargin);\n    },\n\n\n    /**\n     * Make labels width.\n     * @param {Array.&lt;{chartType: ?string, label: string}>} legendData legend data\n     * @returns {Array.&lt;number>} labels width\n     * @private\n     */\n    _makeLabelsWidth: function(legendData) {\n        var self = this;\n\n        return tui.util.map(legendData, function(item) {\n            var labelWidth = renderUtil.getRenderedLabelWidth(item.label, self.theme.label);\n            return labelWidth + chartConst.LEGEND_AREA_PADDING;\n        });\n    },\n\n    /**\n     * Make legend html.\n     * @param {Array.&lt;{chartType: ?string, label: string}>} legendData legend data\n     * @returns {string} legend html\n     * @private\n     */\n    _makeLegendHtml: function(legendData) {\n        var self = this,\n            template = legendTemplate.tplLegend,\n            checkBoxTemplate = legendTemplate.tplCheckbox,\n            labelsWidth = this._makeLabelsWidth(legendData),\n            labelHeight = renderUtil.getRenderedLabelHeight(legendData[0].label, legendData[0].theme),\n            isHorizontalLegend = predicate.isHorizontalLegend(this.options.align),\n            height = labelHeight + (chartConst.LABEL_PADDING_TOP * 2),\n            baseMarginTop = parseInt((height - chartConst.LEGEND_RECT_WIDTH) / 2, 10) - 1,\n            html = tui.util.map(legendData, function(legendDatum, index) {\n                var rectCssText = self._makeLegendRectCssText(legendDatum, baseMarginTop),\n                    checkbox = self.options.hasCheckbox === false ? '' : checkBoxTemplate({\n                        index: index,\n                        checked: self.legendModel.isCheckedIndex(index) ? ' checked' : ''\n                    }),\n                    data;\n\n                data = {\n                    rectCssText: rectCssText,\n                    height: height,\n                    labelHeight: labelHeight,\n                    unselected: self.legendModel.isUnselectedIndex(index) ? ' unselected' : '',\n                    labelWidth: isHorizontalLegend ? ';width:' + labelsWidth[index] + 'px' : '',\n                    iconType: legendDatum.chartType || 'rect',\n                    label: legendDatum.label,\n                    checkbox: checkbox,\n                    index: index\n                };\n                return template(data);\n            }).join('');\n        return html;\n    },\n\n    /**\n     * Find legend element.\n     * @param {HTMLElement} elTarget target element\n     * @returns {HTMLElement} legend element\n     * @private\n     */\n    _findLegendLabelElement: function(elTarget) {\n        var legendContainer;\n\n        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_LEGEND_LABEL)) {\n            legendContainer = elTarget;\n        } else {\n            legendContainer = dom.findParentByClass(elTarget, chartConst.CLASS_NAME_LEGEND_LABEL);\n        }\n\n        return legendContainer;\n    },\n\n    /**\n     * Fire legend checkbox event.\n     * @private\n     */\n    _fireLegendCheckboxEvent: function() {\n        this.fire('changeCheckedLegends', this.legendModel.getCheckedIndexes());\n    },\n\n    /**\n     * Fire legend event.\n     * @param {{chartType: string, index: number}} data data\n     * @private\n     */\n    _fireLegendSelectionEvent: function(data) {\n        var self = this,\n            chartTypes = this.chartTypes || [data.chartType],\n            index = this.legendModel.getSelectedIndex(),\n            legendIndex = !tui.util.isNull(index) ? data.seriesIndex : index;\n\n        tui.util.forEachArray(chartTypes, function(chartType) {\n            self.fire(renderUtil.makeCustomEventName('select', chartType, 'legend'), data.chartType, legendIndex);\n        });\n    },\n\n    /**\n     * Fire user event.\n     * @param {{label: string, chartType: string, index: number}} data data\n     * @private\n     */\n    _fireUserEvent: function(data) {\n        this.userEvent.fire('selectLegend', {\n            legend: data.label,\n            chartType: data.chartType,\n            index: data.index\n        });\n    },\n\n    /**\n     * Select legend.\n     * @param {number} index index\n     * @private\n     */\n    _selectLegend: function(index) {\n        var data = this.legendModel.getDatum(index);\n\n        this.legendModel.toggleSelectedIndex(index);\n\n        if (!tui.util.isNull(this.legendModel.getSelectedIndex()) &amp;&amp; !this.legendModel.isCheckedSelectedIndex()) {\n            this.legendModel.checkSelectedIndex();\n            this._fireLegendCheckboxEvent();\n        }\n\n        this._renderLegendArea(this.legendContainer);\n\n        this._fireLegendSelectionEvent(data);\n        this._fireUserEvent(data);\n    },\n\n    /**\n     * Get checked indexes.\n     * @returns {Array} checked indexes\n     * @private\n     */\n    _getCheckedIndexes: function() {\n        var checkedIndexes = [];\n        tui.util.forEachArray(this.legendContainer.getElementsByTagName('input'), function(checkbox, index) {\n            if (checkbox.checked) {\n                checkedIndexes.push(index);\n            }\n        });\n        return checkedIndexes;\n    },\n\n    /**\n     * Check legend.\n     * @private\n     */\n    _checkLegend: function() {\n        var checkedIndexes = this._getCheckedIndexes(),\n            checkedCount = checkedIndexes.length,\n            data;\n\n        if ((predicate.isPieChart(this.chartType) &amp;&amp; checkedCount === 1) || checkedCount === 0) {\n            this._renderLegendArea(this.legendContainer);\n        } else {\n            this.legendModel.updateCheckedData(checkedIndexes);\n\n            data = this.legendModel.getSelectedDatum();\n\n            if (!this.legendModel.isCheckedSelectedIndex()) {\n                this.legendModel.updateSelectedIndex(null);\n            }\n\n            this._renderLegendArea(this.legendContainer);\n\n            this._fireLegendCheckboxEvent();\n\n            if (data) {\n                this._fireLegendSelectionEvent(data, true);\n            }\n        }\n    },\n\n    /**\n     * On click event handler.\n     * @param {MouseEvent} e mouse event\n     * @private\n     */\n    _onClick: function(e) {\n        var elTarget = e.target || e.srcElement,\n            legendContainer, index;\n\n        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_LEGEND_CHECKBOX)) {\n            this._checkLegend();\n            return;\n        }\n\n        legendContainer = this._findLegendLabelElement(elTarget);\n\n        if (!legendContainer) {\n            return;\n        }\n\n        index = parseInt(legendContainer.getAttribute('data-index'), 10);\n        this._selectLegend(index);\n    },\n\n    /**\n     * Attach browser event.\n     * @param {HTMLElement} target target element\n     * @private\n     */\n    _attachEvent: function(target) {\n        eventListener.bindEvent('click', target, this._onClick, this);\n    }\n});\n\ntui.util.CustomEvents.mixin(Legend);\n\nmodule.exports = Legend;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"