tui.util.defineNamespace("fedoc.content", {});
fedoc.content["components_customEvents_groupTypeCustomEvent.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview GroupTypeCustomEvent is event handle layer for grouped tooltip option.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar CustomEventBase = require('./customEventBase');\nvar zoomMixer = require('./zoomMixer');\n\nvar GroupTypeCustomEvent = tui.util.defineClass(CustomEventBase, /** @lends GroupTypeCustomEvent.prototype */ {\n    /**\n     * GroupTypeCustomEvent is event handle layer for grouped tooltip option.\n     * @param {object} params parameters\n     * @constructs GroupTypeCustomEvent\n     * @extends CustomEventBase\n     */\n    init: function(params) {\n        CustomEventBase.call(this, params);\n\n        /**\n         * previous index of group data\n         * @type {null}\n         */\n        this.prevIndex = null;\n\n        /**\n         * whether zoomable or not\n         * @type {boolean}\n         */\n        this.zoomable = params.zoomable;\n\n        /**\n         * type of size\n         * @type {string}\n         */\n        this.sizeType = this.isVertical ? 'height' : 'width';\n\n        if (this.zoomable) {\n            tui.util.extend(this, zoomMixer);\n            this._initForZoom(params.zoomable);\n        }\n    },\n\n    /**\n     * Initialize data of custom event\n     * @param {Array.&lt;object>} seriesInfos series infos\n     * @override\n     */\n    initCustomEventData: function(seriesInfos) {\n        CustomEventBase.prototype.initCustomEventData.call(this, seriesInfos);\n\n        if (this.zoomable) {\n            this._showTooltipAfterZoom();\n        }\n    },\n\n    /**\n     * Find data by client position.\n     * @param {number} clientX - clientX\n     * @param {number} clientY - clientY\n     * @returns {object}\n     * @private\n     */\n    _findGroupData: function(clientX, clientY) {\n        var layerPosition = this._calculateLayerPosition(clientX, clientY, true);\n        var pointValue;\n\n        if (this.isVertical) {\n            pointValue = layerPosition.x;\n        } else {\n            pointValue = layerPosition.y;\n        }\n\n        return {\n            indexes: {\n                groupIndex: this.tickBaseCoordinateModel.findIndex(pointValue)\n            }\n        };\n    },\n\n    /**\n     * Get first data.\n     * @returns {{indexes: {groupIndex: number}}} - data\n     * @private\n     */\n    _getFirstData: function() {\n        return {\n            indexes: {\n                groupIndex: 0\n            }\n        };\n    },\n\n    /**\n     * Get last data\n     * @returns {{indexes: {groupIndex: number}}} - data\n     * @private\n     */\n    _getLastData: function() {\n        return {\n            indexes: {\n                groupIndex: this.tickBaseCoordinateModel.getLastIndex()\n            }\n        };\n    },\n\n    /**\n     * Whether out position or not.\n     * @param {number} layerX layerX\n     * @param {number} layerY layerY\n     * @returns {boolean} result boolean\n     * @private\n     */\n    _isOutPosition: function(layerX, layerY) {\n        var dimension = this.dimension;\n\n        return layerX &lt; 0 || layerX > dimension.width || layerY &lt; 0 || layerY > dimension.height;\n    },\n\n    /**\n     * Show tooltip.\n     * @param {{indexes: {groupIndex: number}}} foundData - data\n     * @param {boolean} [isMoving] - whether moving or not\n     * @private\n     */\n    _showTooltip: function(foundData, isMoving) {\n        var index = foundData.indexes.groupIndex;\n\n        this.prevIndex = index;\n        this.eventBus.fire('showTooltip', {\n            index: index,\n            range: this.tickBaseCoordinateModel.makeRange(index),\n            size: this.dimension[this.sizeType],\n            isVertical: this.isVertical,\n            isMoving: isMoving\n        });\n    },\n\n    /**\n     * Hide tooltip\n     * @private\n     */\n    _hideTooltip: function() {\n        this.eventBus.fire('hideTooltip', this.prevIndex);\n        this.prevIndex = null;\n    },\n\n    /**\n     * On mousemove.\n     * @param {MouseEvent} e mouse event object\n     * @private\n     * @override\n     */\n    _onMousemove: function(e) {\n        var foundData, index;\n\n        CustomEventBase.prototype._onMousemove.call(this, e);\n\n        if (this.zoomable &amp;&amp; this._isAfterDragMouseup()) {\n            return;\n        }\n\n        foundData = this._findGroupData(e.clientX, e.clientY);\n\n        index = foundData.indexes.groupIndex;\n\n        if (index === -1) {\n            this._onMouseout(e);\n        } else if (this.prevIndex !== index) {\n            this._showTooltip(foundData);\n        }\n    },\n\n    /**\n     * On mouseout.\n     * @override\n     */\n    _onMouseout: function(e) {\n        var layerPosition;\n\n        layerPosition = this._calculateLayerPosition(e.clientX, e.clientY, false);\n\n        if (this._isOutPosition(layerPosition.x, layerPosition.y) &amp;&amp; !tui.util.isNull(this.prevIndex)) {\n            this._hideTooltip();\n        }\n\n        CustomEventBase.prototype._onMouseout.call(this);\n    }\n});\n\nmodule.exports = GroupTypeCustomEvent;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"