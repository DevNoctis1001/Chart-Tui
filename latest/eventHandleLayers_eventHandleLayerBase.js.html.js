ne.util.defineNamespace("fedoc.content", {});
fedoc.content["eventHandleLayers_eventHandleLayerBase.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview EventHandleLayerBase is base class for event handle layers.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar event = require('../helpers/eventListener'),\n    dom = require('../helpers/domHandler'),\n    renderUtil = require('../helpers/renderUtil');\n\nvar EventHandleLayerBase = tui.util.defineClass(/** @lends EventHandleLayerBase.prototype */ {\n    /**\n     * EventHandleLayerBase is base class for event handle layers.\n     * @constructs EventHandleLayerBase\n     * @param {object} params parameters\n     *      @param {{\n     *          dimension: {width: number, height: number},\n     *          position: {left: number, top: number}\n     *      }} params.bound bound\n     *      @param {string} params.chartType chart type\n     *      @param {boolean} params.isVertical whether vertical or not\n     */\n    init: function(params) {\n        this.bound = params.bound;\n        this.chartType = params.chartType;\n        this.isVertical = params.isVertical;\n        this.coordinateData = this.makeCoordinateData(params.bound.dimension, params.tickCount, params.chartType);\n    },\n\n    /**\n     * To make coordinate data.\n     */\n    makeCoordinateData: function() {},\n\n    /**\n     * Render.\n     * @return {HTMLElement} coordinate area\n     */\n    render: function() {\n        var elCoordinateArea = dom.create('DIV', 'tui-chart-series-coordinate-area');\n        renderUtil.renderDimension(elCoordinateArea, this.bound.dimension);\n        renderUtil.renderPosition(elCoordinateArea, this.bound.position);\n        this.attachEvent(elCoordinateArea);\n        return elCoordinateArea;\n    },\n\n    /**\n     * Find group index.\n     * @param {number} pointValue mouse position point value\n     * @returns {number} group index\n     */\n    findIndex: function(pointValue) {\n        var foundIndex = -1;\n        tui.util.forEachArray(this.coordinateData, function(scale, index) {\n            if (scale.min &lt; pointValue &amp;&amp; scale.max >= pointValue) {\n                foundIndex = index;\n                return false;\n            }\n        });\n\n        return foundIndex;\n    },\n\n    /**\n     * To make coordinate data abount line type chart.\n     * @param {number} width width\n     * @param {number} tickCount tick count\n     * @returns {array} coordinate data\n     */\n    makeLineTypeCoordinateData: function(width, tickCount) {\n        var tickInterval = width / (tickCount - 1),\n            halfInterval = tickInterval / 2;\n        return tui.util.map(tui.util.range(0, tickCount), function(index) {\n            return {\n                min: index * tickInterval - halfInterval,\n                max: index * tickInterval + halfInterval\n            };\n        });\n    },\n\n    /**\n     * On mouse move\n     * @abstract\n     */\n    onMousemove: function() {},\n\n    /**\n     * On mouse out\n     * @abstract\n     */\n    onMouseout: function() {},\n\n    /**\n     * Attach event\n     * @param {HTMLElement} el target element\n     */\n    attachEvent: function(el) {\n        event.bindEvent('mousemove', el, tui.util.bind(this.onMousemove, this));\n        event.bindEvent('mouseout', el, tui.util.bind(this.onMouseout, this));\n    }\n});\n\ntui.util.CustomEvents.mixin(EventHandleLayerBase);\n\nmodule.exports = EventHandleLayerBase;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"