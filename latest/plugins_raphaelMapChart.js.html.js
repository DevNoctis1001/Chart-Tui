tui.util.defineNamespace("fedoc.content", {});
fedoc.content["plugins_raphaelMapChart.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview RaphaelPieCharts is graph renderer for map chart.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar raphaelRenderUtil = require('./raphaelRenderUtil');\n\nvar raphael = window.Raphael;\n\nvar STROKE_COLOR = 'gray';\n\n/**\n * @classdesc RaphaelMapCharts is graph renderer for map chart.\n * @class RaphaelMapChart\n */\nvar RaphaelMapChart = tui.util.defineClass(/** @lends RaphaelMapChart.prototype */ {\n    /**\n     * Render function of map chart.\n     * @param {HTMLElement} container container\n     * @param {object} data data\n     *      @param {{width: number, height: number}} data.dimension series dimension\n     *      @param {Array.&lt;{code: string, path: string}>} data.map mapData\n     *      @param {MapChartColorModel} data.colorModel color model\n     * @returns {object} paper raphael paper\n     */\n    render: function(container, data) {\n        var dimension = data.dimension,\n            mapDimension = data.mapModel.getMapDimension(),\n            paper;\n\n        this.paper = paper = raphael(container, dimension.width, dimension.height);\n        this.sectors = this._renderMap(data);\n        this.overColor = data.theme.overColor;\n\n        paper.setViewBox(0, 0, mapDimension.width, mapDimension.height, false);\n\n        return paper;\n    },\n\n    /**\n     * Render map graph.\n     * @param {object} data data\n     *      @param {{width: number, height: number}} data.dimension series dimension\n     *      @param {Array.&lt;{code: string, path: string}>} data.map mapData\n     *      @param {MapChartColorModel} data.colorModel color model\n     * @returns {Array.&lt;{sector: object, color: string, data: object}>} rendered map information\n     * @private\n     */\n    _renderMap: function(data) {\n        var colorModel = data.colorModel;\n\n        return tui.util.map(data.mapModel.getMapData(), function(datum, index) {\n            var percentValue = datum.percentValue || 0,\n                color = colorModel.getColor(percentValue),\n                sector = raphaelRenderUtil.renderArea(this.paper, datum.path, color, 1, STROKE_COLOR, 1);\n\n            sector.data('index', index);\n\n            return {\n                sector: sector,\n                color: color,\n                percentValue: datum.percentValue\n            };\n        }, this);\n    },\n\n    /**\n     * Find sector index.\n     * @param {{left: number, top: number}} position position\n     * @returns {?number} found index\n     */\n    findSectorIndex: function(position) {\n        var sector = this.paper.getElementByPoint(position.left, position.top),\n            foundIndex = (sector &amp;&amp; !tui.util.isUndefined(sector.data('index'))) ? sector.data('index') : null,\n            data = foundIndex &amp;&amp; this.sectors[foundIndex];\n\n        return data &amp;&amp; !tui.util.isUndefined(data.percentValue) ? foundIndex : null;\n    },\n\n    /**\n     * Change color.\n     * @param {number} index index\n     */\n    changeColor: function(index) {\n        var sector = this.sectors[index];\n\n        sector.sector.animate({\n            fill: this.overColor\n        }, 100);\n    },\n\n    /**\n     * Restore color.\n     * @param {number} index index\n     */\n    restoreColor: function(index) {\n        var sector = this.sectors[index];\n\n        sector.sector.animate({\n            fill: sector.color\n        }, 100);\n    },\n\n    /**\n     * Set size\n     * @param {{width: number, height: number}} dimension dimension\n     */\n    setSize: function(dimension) {\n        this.paper.setSize(dimension.width, dimension.height);\n    }\n});\n\nmodule.exports = RaphaelMapChart;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"