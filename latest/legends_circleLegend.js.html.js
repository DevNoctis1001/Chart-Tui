tui.util.defineNamespace("fedoc.content", {});
fedoc.content["legends_circleLegend.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Circle legend component render a legend in the form of overlapping circles\n *                  by representative radius values.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../const');\nvar dom = require('../helpers/domHandler');\nvar renderUtil = require('../helpers/renderUtil');\nvar pluginFactory = require('../factories/pluginFactory');\nvar legendTemplate = require('./../legends/legendTemplate');\n\nvar CircleLegend = tui.util.defineClass(/** @lends CircleLegend.prototype */ {\n    /**\n     * css className of circle legend\n     * @type {string}\n     */\n    className: 'tui-chart-circle-legend-area',\n    /**\n     * ratios for rendering circle\n     * @type {Array.&lt;number>}\n     */\n    circleRatios: [1, 0.5, 0.25],\n    /**\n     * Circle legend component render a legend in the form of overlapping circles by representative radius values.\n     * @constructs CircleLegend\n     * @param {object} params parameters\n     *      @param {?string} params.libType - library type for graph rendering\n     *      @param {string} params.chartType - chart type\n     *      @param {DataProcessor} params.dataProcessor - DataProcessor\n     *      @param {BoundsMaker} params.boundsMaker - BoundsMaker\n     *      @param {string} params.baseFontFamily - base fontFamily of chart\n     */\n    init: function(params) {\n        var libType = params.libType || chartConst.DEFAULT_PLUGIN;\n\n        /**\n         * chart type\n         * @type {string}\n         */\n        this.chartType = params.chartType;\n\n        /**\n         * data processor\n         * @type {DataProcessor}\n         */\n        this.dataProcessor = params.dataProcessor;\n\n        /**\n         * bounds maker\n         * @type {BoundsMaker}\n         */\n        this.boundsMaker = params.boundsMaker;\n\n        /**\n         * theme for label of circle legend area\n         * @type {{fontSize: number, fontFamily: *}}\n         */\n        this.labelTheme = {\n            fontSize: chartConst.CIRCLE_LEGEND_LABEL_FONT_SIZE,\n            fontFamily: params.baseFontFamily\n        };\n\n        /**\n         * Graph renderer\n         * @type {object}\n         */\n        this.graphRenderer = pluginFactory.get(libType, 'circleLegend');\n    },\n\n    /**\n     * Format label\n     * @param {number} label - label\n     * @param {number} decimalLength - decimal length\n     * @returns {string}\n     * @private\n     */\n    _formatLabel: function(label, decimalLength) {\n        var formatFunctions = this.dataProcessor.getFormatFunctions();\n\n        if (decimalLength === 0) {\n            label = String(parseInt(label, 10));\n        } else {\n            label = String(label);\n            label = renderUtil.formatDecimal(label, decimalLength);\n        }\n\n        return renderUtil.formatValue(label, formatFunctions, 'circleLegend', 'r');\n    },\n\n    /**\n     * Make label html.\n     * @returns {string}\n     * @private\n     */\n    _makeLabelHtml: function() {\n        var self = this;\n        var boundsMaker = this.boundsMaker;\n        var dimension = boundsMaker.getDimension('circleLegend');\n        var halfWidth = dimension.width / 2;\n        var maxPixelRadius = boundsMaker.getMinimumPixelStepForAxis();\n        var maxValueRadius = this.dataProcessor.getMaxValue(this.chartType, 'r');\n        var decimalLength = tui.util.getDecimalLength(maxValueRadius);\n        var labelHeight = renderUtil.getRenderedLabelHeight(maxValueRadius, this.labelTheme);\n\n        return tui.util.map(this.circleRatios, function(ratio) {\n            var diameter = maxPixelRadius * ratio * 2;\n            var label = self._formatLabel(maxValueRadius * ratio, decimalLength);\n            var labelWidth = renderUtil.getRenderedLabelWidth(label, self.labelTheme);\n            return legendTemplate.tplCircleLegendLabel({\n                left: halfWidth - (labelWidth / 2),\n                top: dimension.height - diameter - labelHeight,\n                label: label\n            });\n        }).join('');\n    },\n\n    /**\n     * Render label area.\n     * @private\n     */\n    _renderLabelArea: function() {\n        var labelContainer = dom.create('DIV', 'tui-chart-circle-legend-label-area');\n\n        labelContainer.innerHTML = this._makeLabelHtml();\n        this.container.appendChild(labelContainer);\n    },\n\n    /**\n     * Render for circle legend area.\n     * @private\n     */\n    _render: function() {\n        var circleContainer = dom.create('DIV', 'tui-chart-circle-area');\n        var maxRadius = this.boundsMaker.getMinimumPixelStepForAxis();\n        var dimension = this.boundsMaker.getDimension('circleLegend');\n        var position = this.boundsMaker.getPosition('circleLegend');\n\n        this.container.appendChild(circleContainer);\n\n        this.graphRenderer.render(circleContainer, dimension, maxRadius, this.circleRatios);\n\n        this._renderLabelArea();\n        renderUtil.renderPosition(this.container, position);\n    },\n\n    /**\n     * Render.\n     * @returns {HTMLElement}\n     */\n    render: function() {\n        var container = dom.create('DIV', this.className);\n\n        this.container = container;\n        this._render();\n        return container;\n    },\n\n    /**\n     * Rerender.\n     */\n    rerender: function() {\n        this.container.innerHTML = null;\n        this._render();\n    },\n\n    /**\n     * Resize.\n     */\n    resize: function() {\n        this.rerender();\n    }\n});\n\nmodule.exports = CircleLegend;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"