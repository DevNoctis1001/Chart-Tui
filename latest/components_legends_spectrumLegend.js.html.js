tui.util.defineNamespace("fedoc.content", {});
fedoc.content["components_legends_spectrumLegend.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview  Spectrum Legend component.\n * @author NHN Ent.\n *         FE Development Lab &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar chartConst = require('../../const/');\nvar predicate = require('../../helpers/predicate');\nvar dom = require('../../helpers/domHandler');\nvar renderUtil = require('../../helpers/renderUtil');\nvar pluginFactory = require('../../factories//pluginFactory');\nvar legendTemplate = require('./legendTemplate');\n\nvar SpectrumLegend = tui.util.defineClass(/** @lends SpectrumLegend.prototype */ {\n    /**\n     * Spectrum Legend component.\n     * @constructs SpectrumLegend\n     * @param {object} params parameters\n     *      @param {object} params.theme axis theme\n     *      @param {?Array.&lt;string>} params.options legend options\n     *      @param {MapChartDataProcessor} params.dataProcessor data processor\n     */\n    init: function(params) {\n        var libType = params.libType || chartConst.DEFAULT_PLUGIN;\n\n        /**\n         * class name.\n         * @type {string}\n         */\n        this.className = 'tui-chart-legend-area';\n\n        /**\n         * chart type\n         * @type {string}\n         */\n        this.chartType = params.chartType;\n\n        /**\n         * legend theme\n         * @type {Object}\n         */\n        this.theme = params.theme;\n\n        /**\n         * options\n         * @type {object}\n         */\n        this.options = params.options || {};\n\n        /**\n         * data processor\n         * @type {DataProcessor}\n         */\n        this.dataProcessor = params.dataProcessor;\n\n        /**\n         * color spectrum\n         * @type {ColorSpectrum}\n         */\n        this.colorSpectrum = params.colorSpectrum;\n\n        /**\n         * event bus for transmitting message\n         * @type {object}\n         */\n        this.eventBus = params.eventBus;\n\n        /**\n         * Graph renderer\n         * @type {object}\n         */\n        this.graphRenderer = pluginFactory.get(libType, 'mapLegend');\n\n        /**\n         * Whether horizontal legend or not.\n         * @type {boolean}\n         */\n        this.isHorizontal = predicate.isHorizontalLegend(this.options.align);\n\n        /**\n         * scale data for legend\n         * @type {null|object}\n         */\n        this.scaleData = null;\n\n        this._attachToEventBus();\n    },\n\n    /**\n     * Attach to event bus.\n     * @private\n     */\n    _attachToEventBus: function() {\n        this.eventBus.on({\n            showWedge: this.onShowWedge,\n            hideTooltip: this.onHideWedge\n        }, this);\n    },\n\n    /**\n     * Make base data to make tick html.\n     * @returns {{startPositionValue: number, step: number, positionType: string, labelSize: ?number}} base data\n     * @private\n     */\n    _makeBaseDataToMakeTickHtml: function() {\n        var dimension = this.layout.dimension;\n        var scaleData = this.scaleData;\n        var stepCount = scaleData.stepCount || scaleData.tickCount - 1;\n        var baseData = {};\n        var firstLabel;\n\n        if (this.isHorizontal) {\n            baseData.startPositionValue = 5;\n            baseData.step = dimension.width / stepCount;\n            baseData.positionType = 'left:';\n        } else {\n            baseData.startPositionValue = 0;\n            baseData.step = dimension.height / stepCount;\n            baseData.positionType = 'top:';\n            firstLabel = scaleData.labels[0];\n            baseData.labelSize = parseInt(renderUtil.getRenderedLabelHeight(firstLabel, this.theme.label) / 2, 10) - 1;\n        }\n\n        return baseData;\n    },\n    /**\n     * Make tick html.\n     * @returns {string} tick html.\n     * @private\n     */\n    _makeTickHtml: function() {\n        var self = this;\n        var baseData = this._makeBaseDataToMakeTickHtml();\n        var positionValue = baseData.startPositionValue;\n        var htmls;\n\n        htmls = tui.util.map(this.scaleData.labels, function(label) {\n            var labelSize, html;\n\n            if (self.isHorizontal) {\n                labelSize = parseInt(renderUtil.getRenderedLabelWidth(label, self.theme.label) / 2, 10);\n            } else {\n                labelSize = baseData.labelSize;\n            }\n\n            html = legendTemplate.tplTick({\n                position: baseData.positionType + positionValue + 'px',\n                labelPosition: baseData.positionType + (positionValue - labelSize) + 'px',\n                label: label\n            });\n\n            positionValue += baseData.step;\n\n            return html;\n        });\n\n        return htmls.join('');\n    },\n\n    /**\n     * Render tick area.\n     * @returns {HTMLElement} tick countainer\n     * @private\n     */\n    _renderTickArea: function() {\n        var tickContainer = dom.create('div', 'tui-chart-legend-tick-area');\n\n        tickContainer.innerHTML = this._makeTickHtml();\n\n        if (this.isHorizontal) {\n            dom.addClass(tickContainer, 'horizontal');\n        }\n\n        return tickContainer;\n    },\n\n    /**\n     * Make graph dimension of vertical legend\n     * @returns {{width: number, height: number}} dimension\n     * @private\n     */\n    _makeVerticalGraphDimension: function() {\n        return {\n            width: chartConst.MAP_LEGEND_GRAPH_SIZE,\n            height: this.layout.dimension.height\n        };\n    },\n\n    /**\n     * Make graph dimension of horizontal legend\n     * @returns {{width: number, height: number}} dimension\n     * @private\n     */\n    _makeHorizontalGraphDimension: function() {\n        return {\n            width: this.layout.dimension.width + 10,\n            height: chartConst.MAP_LEGEND_GRAPH_SIZE\n        };\n    },\n\n    /**\n     * Render graph.\n     * @param {HTMLElement} container container element\n     * @private\n     */\n    _renderGraph: function(container) {\n        var dimension;\n\n        if (this.isHorizontal) {\n            dimension = this._makeHorizontalGraphDimension();\n        } else {\n            dimension = this._makeVerticalGraphDimension();\n        }\n\n        this.graphRenderer.render(container, dimension, this.colorSpectrum, this.isHorizontal);\n    },\n\n    /**\n     * Render legend area.\n     * @param {HTMLElement} container legend container\n     * @private\n     */\n    _renderLegendArea: function(container) {\n        var tickContainer;\n\n        container.innerHTML = '';\n        renderUtil.renderPosition(container, this.layout.position);\n        this._renderGraph(container);\n        tickContainer = this._renderTickArea();\n        container.appendChild(tickContainer);\n        container.style.cssText += ';' + renderUtil.makeFontCssText(this.theme.label);\n    },\n\n    /**\n     * Set data for rendering.\n     * @param {{\n     *      layout: object,\n     *      legendScaleData: object\n     * }} data - scale data\n     * @private\n     */\n    _setDataForRendering: function(data) {\n        this.layout = data.layout;\n        this.scaleData = data.legendScaleData;\n    },\n\n    /**\n     * Render legend component.\n     * @param {object} data - scale data\n     * @returns {HTMLElement} legend element\n     */\n    render: function(data) {\n        var container = dom.create('DIV', this.className);\n\n        this.legendContainer = container;\n        this._setDataForRendering(data);\n        this._renderLegendArea(container);\n\n        return container;\n    },\n\n    /**\n     * Resize legend component.\n     * @param {object} data - scale data\n     */\n    resize: function(data) {\n        this._setDataForRendering(data);\n        this._renderLegendArea(this.legendContainer);\n    },\n\n    /**\n     * On show wedge.\n     * @param {number} ratio ratio\n     */\n    onShowWedge: function(ratio) {\n        this.graphRenderer.showWedge(chartConst.MAP_LEGEND_SIZE * ratio);\n    },\n\n    /**\n     * On hide wedge.\n     */\n    onHideWedge: function() {\n        this.graphRenderer.hideWedge();\n    }\n});\n\nmodule.exports = SpectrumLegend;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"