tui.util.defineNamespace("fedoc.content", {});
fedoc.content["charts_componentManager.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview ComponentManager manages components of chart.\n * @author NHN Ent.\n *         FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\n'use strict';\n\nvar ComponentManager = tui.util.defineClass(/** @lends ComponentManager.prototype */ {\n    /**\n     * ComponentManager manages components of chart.\n     * @param {object} params parameters\n     *      @param {object} params.theme theme\n     *      @param {object} params.options options\n     *      @param {DataProcessor} params.dataProcessor data processor\n     *      @param {BoundsMaker} params.boundsMaker bounds maker\n     * @constructs ComponentManager\n     */\n    init: function(params) {\n        /**\n         * Components\n         * @type {Array.&lt;object>}\n         */\n        this.components = [];\n\n        /**\n         * Component map.\n         * @type {object}\n         */\n        this.componentMap = {};\n\n        /**\n         * theme\n         * @type {object}\n         */\n        this.theme = params.theme || {};\n\n        /**\n         * options\n         * @type {object}\n         */\n        this.options = params.options || {};\n\n        /**\n         * data processor\n         * @type {DataProcessor}\n         */\n        this.dataProcessor = params.dataProcessor;\n\n        /**\n         * bounds maker\n         * @type {BoundsMaker}\n         */\n        this.boundsMaker = params.boundsMaker;\n\n        /**\n         * whether chart has axes or not\n         * @type {boolean}\n         */\n        this.hasAxes = params.hasAxes;\n    },\n\n    /**\n     * Register component.\n     * The component refers to a component of the chart.\n     * The component types are axis, legend, plot, series and customEvent.\n     * Chart Component Description : https://i-msdn.sec.s-msft.com/dynimg/IC267997.gif\n     * @param {string} name component name\n     * @param {function} Component component constructor\n     * @param {object} params component parameters\n     */\n    register: function(name, Component, params) {\n        var options, index, theme,\n            component, componentType;\n\n        params = params || {};\n\n        componentType = params.componentType || name;\n        options = params.options || this.options[componentType];\n        theme = params.theme || this.theme[componentType];\n        index = params.index || 0;\n\n        params.theme = theme;\n        params.options = tui.util.isArray(options) ? options[index] : options || {};\n        params.dataProcessor = this.dataProcessor;\n        params.boundsMaker = this.boundsMaker;\n        params.hasAxes = this.hasAxes;\n\n        component = new Component(params);\n        component.name = name;\n        component.componentType = componentType;\n\n        this.components.push(component);\n        this.componentMap[name] = component;\n    },\n\n    /**\n     * Iterate each components.\n     * @param {function} iteratee iteratee\n     */\n    each: function(iteratee) {\n        tui.util.forEachArray(this.components, iteratee);\n    },\n\n    /**\n     * Return the results of applying the iteratee to each components.\n     *  @param {function} iteratee iteratee\n     * @returns {Array.&lt;object>} components\n     */\n    map: function(iteratee) {\n        return tui.util.map(this.components, iteratee);\n    },\n\n    /**\n     * Find components to conditionMap.\n     * @param {object} conditionMap condition map\n     * @returns {Array.&lt;object>} filtered components\n     */\n    where: function(conditionMap) {\n        return tui.util.filter(this.components, function(component) {\n            var contained = true;\n\n            tui.util.forEach(conditionMap, function(value, key) {\n                if (component[key] !== value) {\n                    contained = false;\n                    return false;\n                }\n            });\n\n            return contained;\n        });\n    },\n\n    /**\n     * Get component.\n     * @param {string} name component name\n     * @returns {object} component instance\n     */\n    get: function(name) {\n        return this.componentMap[name];\n    }\n});\n\nmodule.exports = ComponentManager;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"